/*
 * Opdex Platform API
 *
 * The Opdex Platform Web API is an interface for querying information from the Opdex contract indexer and quoting Opdex smart contract transactions. The Opdex contract indexer is a job that continually runs and stores relevant broadcast transaction data, in a way that represents the current known state of the Opdex protocol at the present time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using Xunit;

using Opdex.Client.Client;
using Opdex.Client.Api;
// uncomment below to import models
//using Opdex.Client.Model;

namespace Opdex.Client.Test.Api
{
    /// <summary>
    ///  Class for testing TokensApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class TokensApiTests : IDisposable
    {
        private TokensApi instance;

        public TokensApiTests()
        {
            instance = new TokensApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of TokensApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' TokensApi
            //Assert.IsType<TokensApi>(instance);
        }

        /// <summary>
        /// Test AddToken
        /// </summary>
        [Fact]
        public void AddTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AddTokenRequest addTokenRequest = null;
            //var response = instance.AddToken(addTokenRequest);
            //Assert.IsType<TokenResponse>(response);
        }

        /// <summary>
        /// Test BuildApproveAllowanceQuote
        /// </summary>
        [Fact]
        public void BuildApproveAllowanceQuoteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string token = null;
            //QuoteApproveAllowanceRequest quoteApproveAllowanceRequest = null;
            //var response = instance.BuildApproveAllowanceQuote(token, quoteApproveAllowanceRequest);
            //Assert.IsType<TransactionQuoteResponse>(response);
        }

        /// <summary>
        /// Test BuildDistributeTokensQuote
        /// </summary>
        [Fact]
        public void BuildDistributeTokensQuoteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string token = null;
            //var response = instance.BuildDistributeTokensQuote(token);
            //Assert.IsType<TransactionQuoteResponse>(response);
        }

        /// <summary>
        /// Test GetToken
        /// </summary>
        [Fact]
        public void GetTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string token = null;
            //var response = instance.GetToken(token);
            //Assert.IsType<TokenResponse>(response);
        }

        /// <summary>
        /// Test GetTokenHistory
        /// </summary>
        [Fact]
        public void GetTokenHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string token = null;
            //DateTime startDateTime = null;
            //DateTime endDateTime = null;
            //Interval? interval = null;
            //SortDirection? direction = null;
            //int? limit = null;
            //string cursor = null;
            //var response = instance.GetTokenHistory(token, startDateTime, endDateTime, interval, direction, limit, cursor);
            //Assert.IsType<TokenSnapshotsResponse>(response);
        }

        /// <summary>
        /// Test GetTokens
        /// </summary>
        [Fact]
        public void GetTokensTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TokenType? tokenType = null;
            //List<string> tokens = null;
            //string keyword = null;
            //TokenOrderByType? orderBy = null;
            //SortDirection? direction = null;
            //int? limit = null;
            //string cursor = null;
            //var response = instance.GetTokens(tokenType, tokens, keyword, orderBy, direction, limit, cursor);
            //Assert.IsType<TokensResponse>(response);
        }
    }
}
