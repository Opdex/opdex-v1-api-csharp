/*
 * Opdex Platform API
 *
 * The Opdex Platform Web API is an interface for querying information from the Opdex contract indexer and quoting Opdex smart contract transactions. The Opdex contract indexer is a job that continually runs and stores relevant broadcast transaction data, in a way that represents the current known state of the Opdex protocol at the present time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using Xunit;

using Opdex.Client.Client;
using Opdex.Client.Api;
// uncomment below to import models
//using Opdex.Client.Model;

namespace Opdex.Client.Test.Api
{
    /// <summary>
    ///  Class for testing VaultsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class VaultsApiTests : IDisposable
    {
        private VaultsApi instance;

        public VaultsApiTests()
        {
            instance = new VaultsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of VaultsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' VaultsApi
            //Assert.IsType<VaultsApi>(instance);
        }

        /// <summary>
        /// Test BuildCompleteProposalQuote
        /// </summary>
        [Fact]
        public void BuildCompleteProposalQuoteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string vault = null;
            //int proposalId = null;
            //var response = instance.BuildCompleteProposalQuote(vault, proposalId);
            //Assert.IsType<TransactionQuoteResponse>(response);
        }

        /// <summary>
        /// Test BuildPledgeQuote
        /// </summary>
        [Fact]
        public void BuildPledgeQuoteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string vault = null;
            //int proposalId = null;
            //QuotePledgeRequest quotePledgeRequest = null;
            //var response = instance.BuildPledgeQuote(vault, proposalId, quotePledgeRequest);
            //Assert.IsType<TransactionQuoteResponse>(response);
        }

        /// <summary>
        /// Test BuildProposeChangeMinimumPledgeQuote
        /// </summary>
        [Fact]
        public void BuildProposeChangeMinimumPledgeQuoteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string vault = null;
            //QuoteProposeMinimumPledgeRequest quoteProposeMinimumPledgeRequest = null;
            //var response = instance.BuildProposeChangeMinimumPledgeQuote(vault, quoteProposeMinimumPledgeRequest);
            //Assert.IsType<TransactionQuoteResponse>(response);
        }

        /// <summary>
        /// Test BuildProposeChangeMinimumVoteQuote
        /// </summary>
        [Fact]
        public void BuildProposeChangeMinimumVoteQuoteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string vault = null;
            //QuoteProposeMinimumVoteRequest quoteProposeMinimumVoteRequest = null;
            //var response = instance.BuildProposeChangeMinimumVoteQuote(vault, quoteProposeMinimumVoteRequest);
            //Assert.IsType<TransactionQuoteResponse>(response);
        }

        /// <summary>
        /// Test BuildProposeCreateCertificateQuote
        /// </summary>
        [Fact]
        public void BuildProposeCreateCertificateQuoteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string vault = null;
            //QuoteProposeCreateCertificateRequest quoteProposeCreateCertificateRequest = null;
            //var response = instance.BuildProposeCreateCertificateQuote(vault, quoteProposeCreateCertificateRequest);
            //Assert.IsType<TransactionQuoteResponse>(response);
        }

        /// <summary>
        /// Test BuildProposeRevokeCertificateQuote
        /// </summary>
        [Fact]
        public void BuildProposeRevokeCertificateQuoteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string vault = null;
            //QuoteProposeRevokeCertificateRequest quoteProposeRevokeCertificateRequest = null;
            //var response = instance.BuildProposeRevokeCertificateQuote(vault, quoteProposeRevokeCertificateRequest);
            //Assert.IsType<TransactionQuoteResponse>(response);
        }

        /// <summary>
        /// Test BuildRedeemCertificateQuote
        /// </summary>
        [Fact]
        public void BuildRedeemCertificateQuoteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string vault = null;
            //var response = instance.BuildRedeemCertificateQuote(vault);
            //Assert.IsType<TransactionQuoteResponse>(response);
        }

        /// <summary>
        /// Test BuildVoteQuote
        /// </summary>
        [Fact]
        public void BuildVoteQuoteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string vault = null;
            //int proposalId = null;
            //QuoteVoteRequest quoteVoteRequest = null;
            //var response = instance.BuildVoteQuote(vault, proposalId, quoteVoteRequest);
            //Assert.IsType<TransactionQuoteResponse>(response);
        }

        /// <summary>
        /// Test BuildWithdrawPledgeQuote
        /// </summary>
        [Fact]
        public void BuildWithdrawPledgeQuoteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string vault = null;
            //int proposalId = null;
            //QuoteWithdrawPledgeRequest quoteWithdrawPledgeRequest = null;
            //var response = instance.BuildWithdrawPledgeQuote(vault, proposalId, quoteWithdrawPledgeRequest);
            //Assert.IsType<TransactionQuoteResponse>(response);
        }

        /// <summary>
        /// Test BuildWithdrawVoteQuote
        /// </summary>
        [Fact]
        public void BuildWithdrawVoteQuoteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string vault = null;
            //int proposalId = null;
            //QuoteWithdrawVoteRequest quoteWithdrawVoteRequest = null;
            //var response = instance.BuildWithdrawVoteQuote(vault, proposalId, quoteWithdrawVoteRequest);
            //Assert.IsType<TransactionQuoteResponse>(response);
        }

        /// <summary>
        /// Test GetCertificates
        /// </summary>
        [Fact]
        public void GetCertificatesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string vault = null;
            //string owner = null;
            //CertificateStatus? status = null;
            //SortDirection? direction = null;
            //int? limit = null;
            //string cursor = null;
            //var response = instance.GetCertificates(vault, owner, status, direction, limit, cursor);
            //Assert.IsType<CertificatesResponse>(response);
        }

        /// <summary>
        /// Test GetPledgePosition
        /// </summary>
        [Fact]
        public void GetPledgePositionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string vault = null;
            //int proposalId = null;
            //string pledger = null;
            //var response = instance.GetPledgePosition(vault, proposalId, pledger);
            //Assert.IsType<PledgeResponse>(response);
        }

        /// <summary>
        /// Test GetPledges
        /// </summary>
        [Fact]
        public void GetPledgesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string vault = null;
            //int? proposalId = null;
            //string pledger = null;
            //bool? includeZeroBalances = null;
            //SortDirection? direction = null;
            //int? limit = null;
            //string cursor = null;
            //var response = instance.GetPledges(vault, proposalId, pledger, includeZeroBalances, direction, limit, cursor);
            //Assert.IsType<PledgesResponse>(response);
        }

        /// <summary>
        /// Test GetProposals
        /// </summary>
        [Fact]
        public void GetProposalsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string vault = null;
            //ProposalStatus? status = null;
            //ProposalType? type = null;
            //SortDirection? direction = null;
            //int? limit = null;
            //string cursor = null;
            //var response = instance.GetProposals(vault, status, type, direction, limit, cursor);
            //Assert.IsType<ProposalsResponse>(response);
        }

        /// <summary>
        /// Test GetVault
        /// </summary>
        [Fact]
        public void GetVaultTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string vault = null;
            //var response = instance.GetVault(vault);
            //Assert.IsType<VaultResponse>(response);
        }

        /// <summary>
        /// Test GetVaultProposal
        /// </summary>
        [Fact]
        public void GetVaultProposalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string vault = null;
            //int proposalId = null;
            //var response = instance.GetVaultProposal(vault, proposalId);
            //Assert.IsType<ProposalResponse>(response);
        }

        /// <summary>
        /// Test GetVaults
        /// </summary>
        [Fact]
        public void GetVaultsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string lockedToken = null;
            //SortDirection? direction = null;
            //int? limit = null;
            //string cursor = null;
            //var response = instance.GetVaults(lockedToken, direction, limit, cursor);
            //Assert.IsType<VaultsResponse>(response);
        }

        /// <summary>
        /// Test GetVotePosition
        /// </summary>
        [Fact]
        public void GetVotePositionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string vault = null;
            //int proposalId = null;
            //string voter = null;
            //var response = instance.GetVotePosition(vault, proposalId, voter);
            //Assert.IsType<VoteResponse>(response);
        }

        /// <summary>
        /// Test GetVotes
        /// </summary>
        [Fact]
        public void GetVotesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string vault = null;
            //int? proposalId = null;
            //string voter = null;
            //bool? includeZeroBalances = null;
            //SortDirection? direction = null;
            //int? limit = null;
            //string cursor = null;
            //var response = instance.GetVotes(vault, proposalId, voter, includeZeroBalances, direction, limit, cursor);
            //Assert.IsType<VotesResponse>(response);
        }
    }
}
