/*
 * Opdex Platform API
 *
 * The Opdex Platform Web API is an interface for querying information from the Opdex contract indexer and quoting Opdex smart contract transactions. The Opdex contract indexer is a job that continually runs and stores relevant broadcast transaction data, in a way that represents the current known state of the Opdex protocol at the present time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using Xunit;

using Opdex.Client.Client;
using Opdex.Client.Api;
// uncomment below to import models
//using Opdex.Client.Model;

namespace Opdex.Client.Test.Api
{
    /// <summary>
    ///  Class for testing WalletsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class WalletsApiTests : IDisposable
    {
        private WalletsApi instance;

        public WalletsApiTests()
        {
            instance = new WalletsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of WalletsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' WalletsApi
            //Assert.IsType<WalletsApi>(instance);
        }

        /// <summary>
        /// Test GetApprovedAllowance
        /// </summary>
        [Fact]
        public void GetApprovedAllowanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string address = null;
            //string token = null;
            //string spender = null;
            //var response = instance.GetApprovedAllowance(address, token, spender);
            //Assert.IsType<ApprovedAllowanceResponse>(response);
        }

        /// <summary>
        /// Test GetBalance
        /// </summary>
        [Fact]
        public void GetBalanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string address = null;
            //string token = null;
            //var response = instance.GetBalance(address, token);
            //Assert.IsType<AddressBalanceResponse>(response);
        }

        /// <summary>
        /// Test GetBalances
        /// </summary>
        [Fact]
        public void GetBalancesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string address = null;
            //List<string> tokens = null;
            //List<TokenAttributeFilter> tokenAttributes = null;
            //bool? includeZeroBalances = null;
            //SortDirection? direction = null;
            //int? limit = null;
            //string cursor = null;
            //var response = instance.GetBalances(address, tokens, tokenAttributes, includeZeroBalances, direction, limit, cursor);
            //Assert.IsType<AddressBalancesResponse>(response);
        }

        /// <summary>
        /// Test GetMiningPosition
        /// </summary>
        [Fact]
        public void GetMiningPositionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string address = null;
            //string pool = null;
            //var response = instance.GetMiningPosition(address, pool);
            //Assert.IsType<MiningPositionResponse>(response);
        }

        /// <summary>
        /// Test GetMiningPositions
        /// </summary>
        [Fact]
        public void GetMiningPositionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string address = null;
            //List<string> miningPools = null;
            //List<string> liquidityPools = null;
            //bool? includeZeroAmounts = null;
            //SortDirection? direction = null;
            //int? limit = null;
            //string cursor = null;
            //var response = instance.GetMiningPositions(address, miningPools, liquidityPools, includeZeroAmounts, direction, limit, cursor);
            //Assert.IsType<MiningPositionsResponse>(response);
        }

        /// <summary>
        /// Test GetStakingPosition
        /// </summary>
        [Fact]
        public void GetStakingPositionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string address = null;
            //string pool = null;
            //var response = instance.GetStakingPosition(address, pool);
            //Assert.IsType<StakingPositionResponse>(response);
        }

        /// <summary>
        /// Test GetStakingPositions
        /// </summary>
        [Fact]
        public void GetStakingPositionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string address = null;
            //List<string> liquidityPools = null;
            //bool? includeZeroAmounts = null;
            //SortDirection? direction = null;
            //int? limit = null;
            //string cursor = null;
            //var response = instance.GetStakingPositions(address, liquidityPools, includeZeroAmounts, direction, limit, cursor);
            //Assert.IsType<StakingPositionsResponse>(response);
        }

        /// <summary>
        /// Test RefreshBalance
        /// </summary>
        [Fact]
        public void RefreshBalanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string address = null;
            //string token = null;
            //var response = instance.RefreshBalance(address, token);
            //Assert.IsType<AddressBalanceResponse>(response);
        }

        /// <summary>
        /// Test RefreshMiningPosition
        /// </summary>
        [Fact]
        public void RefreshMiningPositionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string address = null;
            //string pool = null;
            //var response = instance.RefreshMiningPosition(address, pool);
            //Assert.IsType<MiningPositionResponse>(response);
        }

        /// <summary>
        /// Test RefreshStakingPosition
        /// </summary>
        [Fact]
        public void RefreshStakingPositionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string address = null;
            //string pool = null;
            //var response = instance.RefreshStakingPosition(address, pool);
            //Assert.IsType<StakingPositionResponse>(response);
        }
    }
}
