/*
 * Opdex Platform API
 *
 * The Opdex Platform Web API is an interface for querying information from the Opdex contract indexer and quoting Opdex smart contract transactions. The Opdex contract indexer is a job that continually runs and stores relevant broadcast transaction data, in a way that represents the current known state of the Opdex protocol at the present time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Opdex.Client.Client.FileParameter;
using OpenAPIDateConverter = Opdex.Client.Client.OpenAPIDateConverter;

namespace Opdex.Client.Model
{
    /// <summary>
    /// MarketStakingSummary
    /// </summary>
    [DataContract(Name = "marketStakingSummary")]
    public partial class MarketStakingSummary : IEquatable<MarketStakingSummary>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MarketStakingSummary" /> class.
        /// </summary>
        /// <param name="stakingWeight">Decimal value with uncapped precision and size.</param>
        /// <param name="dailyStakingWeightChangePercent">Percentage change of the staking weight amount from the previous day.</param>
        /// <param name="stakingUsd">Total staking weight USD amount.</param>
        /// <param name="dailyStakingUsdChangePercent">Percentage change of the staking USD amount from the previous day.</param>
        public MarketStakingSummary(string stakingWeight = default(string), decimal dailyStakingWeightChangePercent = default(decimal), decimal stakingUsd = default(decimal), decimal dailyStakingUsdChangePercent = default(decimal))
        {
            this.StakingWeight = stakingWeight;
            this.DailyStakingWeightChangePercent = dailyStakingWeightChangePercent;
            this.StakingUsd = stakingUsd;
            this.DailyStakingUsdChangePercent = dailyStakingUsdChangePercent;
        }

        /// <summary>
        /// Decimal value with uncapped precision and size
        /// </summary>
        /// <value>Decimal value with uncapped precision and size</value>
        [DataMember(Name = "stakingWeight", EmitDefaultValue = false)]
        public string StakingWeight { get; set; }

        /// <summary>
        /// Percentage change of the staking weight amount from the previous day
        /// </summary>
        /// <value>Percentage change of the staking weight amount from the previous day</value>
        [DataMember(Name = "dailyStakingWeightChangePercent", EmitDefaultValue = false)]
        public decimal DailyStakingWeightChangePercent { get; set; }

        /// <summary>
        /// Total staking weight USD amount
        /// </summary>
        /// <value>Total staking weight USD amount</value>
        [DataMember(Name = "stakingUsd", EmitDefaultValue = false)]
        public decimal StakingUsd { get; set; }

        /// <summary>
        /// Percentage change of the staking USD amount from the previous day
        /// </summary>
        /// <value>Percentage change of the staking USD amount from the previous day</value>
        [DataMember(Name = "dailyStakingUsdChangePercent", EmitDefaultValue = false)]
        public decimal DailyStakingUsdChangePercent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MarketStakingSummary {\n");
            sb.Append("  StakingWeight: ").Append(StakingWeight).Append("\n");
            sb.Append("  DailyStakingWeightChangePercent: ").Append(DailyStakingWeightChangePercent).Append("\n");
            sb.Append("  StakingUsd: ").Append(StakingUsd).Append("\n");
            sb.Append("  DailyStakingUsdChangePercent: ").Append(DailyStakingUsdChangePercent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MarketStakingSummary);
        }

        /// <summary>
        /// Returns true if MarketStakingSummary instances are equal
        /// </summary>
        /// <param name="input">Instance of MarketStakingSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MarketStakingSummary input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.StakingWeight == input.StakingWeight ||
                    (this.StakingWeight != null &&
                    this.StakingWeight.Equals(input.StakingWeight))
                ) && 
                (
                    this.DailyStakingWeightChangePercent == input.DailyStakingWeightChangePercent ||
                    this.DailyStakingWeightChangePercent.Equals(input.DailyStakingWeightChangePercent)
                ) && 
                (
                    this.StakingUsd == input.StakingUsd ||
                    this.StakingUsd.Equals(input.StakingUsd)
                ) && 
                (
                    this.DailyStakingUsdChangePercent == input.DailyStakingUsdChangePercent ||
                    this.DailyStakingUsdChangePercent.Equals(input.DailyStakingUsdChangePercent)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StakingWeight != null)
                {
                    hashCode = (hashCode * 59) + this.StakingWeight.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DailyStakingWeightChangePercent.GetHashCode();
                hashCode = (hashCode * 59) + this.StakingUsd.GetHashCode();
                hashCode = (hashCode * 59) + this.DailyStakingUsdChangePercent.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // StakingWeight (string) pattern
            Regex regexStakingWeight = new Regex(@"^\\d*\\.\\d{1,18}$", RegexOptions.CultureInvariant);
            if (false == regexStakingWeight.Match(this.StakingWeight).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StakingWeight, must match a pattern of " + regexStakingWeight, new [] { "StakingWeight" });
            }

            // DailyStakingWeightChangePercent (decimal) minimum
            if (this.DailyStakingWeightChangePercent < (decimal)0.0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DailyStakingWeightChangePercent, must be a value greater than or equal to 0.0.", new [] { "DailyStakingWeightChangePercent" });
            }

            // StakingUsd (decimal) minimum
            if (this.StakingUsd < (decimal)0.0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StakingUsd, must be a value greater than or equal to 0.0.", new [] { "StakingUsd" });
            }

            // DailyStakingUsdChangePercent (decimal) minimum
            if (this.DailyStakingUsdChangePercent < (decimal)0.0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DailyStakingUsdChangePercent, must be a value greater than or equal to 0.0.", new [] { "DailyStakingUsdChangePercent" });
            }

            yield break;
        }
    }

}
