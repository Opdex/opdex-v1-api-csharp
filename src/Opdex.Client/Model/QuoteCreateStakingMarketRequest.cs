/*
 * Opdex Platform API
 *
 * The Opdex Platform Web API is an interface for querying information from the Opdex contract indexer and quoting Opdex smart contract transactions. The Opdex contract indexer is a job that continually runs and stores relevant broadcast transaction data, in a way that represents the current known state of the Opdex protocol at the present time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Opdex.Client.Client.FileParameter;
using OpenAPIDateConverter = Opdex.Client.Client.OpenAPIDateConverter;

namespace Opdex.Client.Model
{
    /// <summary>
    /// Request to retrieve a create staking market call quote
    /// </summary>
    [DataContract(Name = "quoteCreateStakingMarketRequest")]
    public partial class QuoteCreateStakingMarketRequest : IEquatable<QuoteCreateStakingMarketRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QuoteCreateStakingMarketRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected QuoteCreateStakingMarketRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="QuoteCreateStakingMarketRequest" /> class.
        /// </summary>
        /// <param name="stakingToken">An address on the Cirrus network (required).</param>
        public QuoteCreateStakingMarketRequest(string stakingToken = default(string))
        {
            // to ensure "stakingToken" is required (not null)
            if (stakingToken == null) {
                throw new ArgumentNullException("stakingToken is a required property for QuoteCreateStakingMarketRequest and cannot be null");
            }
            this.StakingToken = stakingToken;
        }

        /// <summary>
        /// An address on the Cirrus network
        /// </summary>
        /// <value>An address on the Cirrus network</value>
        [DataMember(Name = "stakingToken", IsRequired = true, EmitDefaultValue = false)]
        public string StakingToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class QuoteCreateStakingMarketRequest {\n");
            sb.Append("  StakingToken: ").Append(StakingToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QuoteCreateStakingMarketRequest);
        }

        /// <summary>
        /// Returns true if QuoteCreateStakingMarketRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of QuoteCreateStakingMarketRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QuoteCreateStakingMarketRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.StakingToken == input.StakingToken ||
                    (this.StakingToken != null &&
                    this.StakingToken.Equals(input.StakingToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StakingToken != null)
                {
                    hashCode = (hashCode * 59) + this.StakingToken.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // StakingToken (string) maxLength
            if (this.StakingToken != null && this.StakingToken.Length > 42)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StakingToken, length must be less than 42.", new [] { "StakingToken" });
            }

            // StakingToken (string) minLength
            if (this.StakingToken != null && this.StakingToken.Length < 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StakingToken, length must be greater than 30.", new [] { "StakingToken" });
            }

            // StakingToken (string) pattern
            Regex regexStakingToken = new Regex(@"^[a-km-zA-HJ-NP-Z1-9]+$", RegexOptions.CultureInvariant);
            if (false == regexStakingToken.Match(this.StakingToken).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StakingToken, must match a pattern of " + regexStakingToken, new [] { "StakingToken" });
            }

            yield break;
        }
    }

}
