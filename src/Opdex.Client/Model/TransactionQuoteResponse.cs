/*
 * Opdex Platform API
 *
 * The Opdex Platform Web API is an interface for querying information from the Opdex contract indexer and quoting Opdex smart contract transactions. The Opdex contract indexer is a job that continually runs and stores relevant broadcast transaction data, in a way that represents the current known state of the Opdex protocol at the present time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Opdex.Client.Client.FileParameter;
using OpenAPIDateConverter = Opdex.Client.Client.OpenAPIDateConverter;

namespace Opdex.Client.Model
{
    /// <summary>
    /// Quote for submitting a smart contract transaction
    /// </summary>
    [DataContract(Name = "transactionQuoteResponse")]
    public partial class TransactionQuoteResponse : IEquatable<TransactionQuoteResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionQuoteResponse" /> class.
        /// </summary>
        /// <param name="result">Value which is returned by the quoted smart contract call.</param>
        /// <param name="error">Smart contract call error details.</param>
        /// <param name="gasUsed">Total amount of gas consumed in the quoted smart contract call.</param>
        /// <param name="events">events.</param>
        /// <param name="request">Encoded transaction request, which can be used to replay or broadcast the transaction.</param>
        public TransactionQuoteResponse(Object result = default(Object), string error = default(string), int gasUsed = default(int), List<TransactionEvent> events = default(List<TransactionEvent>), string request = default(string))
        {
            this.Result = result;
            this.Error = error;
            this.GasUsed = gasUsed;
            this.Events = events;
            this.Request = request;
        }

        /// <summary>
        /// Value which is returned by the quoted smart contract call
        /// </summary>
        /// <value>Value which is returned by the quoted smart contract call</value>
        [DataMember(Name = "result", EmitDefaultValue = true)]
        public Object Result { get; set; }

        /// <summary>
        /// Smart contract call error details
        /// </summary>
        /// <value>Smart contract call error details</value>
        [DataMember(Name = "error", EmitDefaultValue = false)]
        public string Error { get; set; }

        /// <summary>
        /// Total amount of gas consumed in the quoted smart contract call
        /// </summary>
        /// <value>Total amount of gas consumed in the quoted smart contract call</value>
        [DataMember(Name = "gasUsed", EmitDefaultValue = false)]
        public int GasUsed { get; set; }

        /// <summary>
        /// Gets or Sets Events
        /// </summary>
        [DataMember(Name = "events", EmitDefaultValue = false)]
        public List<TransactionEvent> Events { get; set; }

        /// <summary>
        /// Encoded transaction request, which can be used to replay or broadcast the transaction
        /// </summary>
        /// <value>Encoded transaction request, which can be used to replay or broadcast the transaction</value>
        [DataMember(Name = "request", EmitDefaultValue = false)]
        public string Request { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransactionQuoteResponse {\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  GasUsed: ").Append(GasUsed).Append("\n");
            sb.Append("  Events: ").Append(Events).Append("\n");
            sb.Append("  Request: ").Append(Request).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionQuoteResponse);
        }

        /// <summary>
        /// Returns true if TransactionQuoteResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionQuoteResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionQuoteResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Result == input.Result ||
                    (this.Result != null &&
                    this.Result.Equals(input.Result))
                ) && 
                (
                    this.Error == input.Error ||
                    (this.Error != null &&
                    this.Error.Equals(input.Error))
                ) && 
                (
                    this.GasUsed == input.GasUsed ||
                    this.GasUsed.Equals(input.GasUsed)
                ) && 
                (
                    this.Events == input.Events ||
                    this.Events != null &&
                    input.Events != null &&
                    this.Events.SequenceEqual(input.Events)
                ) && 
                (
                    this.Request == input.Request ||
                    (this.Request != null &&
                    this.Request.Equals(input.Request))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Result != null)
                {
                    hashCode = (hashCode * 59) + this.Result.GetHashCode();
                }
                if (this.Error != null)
                {
                    hashCode = (hashCode * 59) + this.Error.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.GasUsed.GetHashCode();
                if (this.Events != null)
                {
                    hashCode = (hashCode * 59) + this.Events.GetHashCode();
                }
                if (this.Request != null)
                {
                    hashCode = (hashCode * 59) + this.Request.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // GasUsed (int) minimum
            if (this.GasUsed < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GasUsed, must be a value greater than or equal to 0.", new [] { "GasUsed" });
            }

            yield break;
        }
    }

}
