/*
 * Opdex Platform API
 *
 * The Opdex Platform Web API is an interface for querying information from the Opdex contract indexer and quoting Opdex smart contract transactions. The Opdex contract indexer is a job that continually runs and stores relevant broadcast transaction data, in a way that represents the current known state of the Opdex protocol at the present time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Opdex.Client.Client.FileParameter;
using OpenAPIDateConverter = Opdex.Client.Client.OpenAPIDateConverter;

namespace Opdex.Client.Model
{
    /// <summary>
    /// LiquidityPoolStakingSummary
    /// </summary>
    [DataContract(Name = "liquidityPoolStakingSummary")]
    public partial class LiquidityPoolStakingSummary : IEquatable<LiquidityPoolStakingSummary>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LiquidityPoolStakingSummary" /> class.
        /// </summary>
        /// <param name="token">token.</param>
        /// <param name="weight">Decimal value with uncapped precision and size.</param>
        /// <param name="usd">USD value of tokens staking.</param>
        /// <param name="dailyWeightChangePercent">Percentage change of tokens staking from the previous day.</param>
        /// <param name="nominated">True if the pool is nominated for mining, otherwise false.</param>
        public LiquidityPoolStakingSummary(MarketTokenResponse token = default(MarketTokenResponse), string weight = default(string), decimal usd = default(decimal), decimal dailyWeightChangePercent = default(decimal), bool nominated = default(bool))
        {
            this.Token = token;
            this.Weight = weight;
            this.Usd = usd;
            this.DailyWeightChangePercent = dailyWeightChangePercent;
            this.Nominated = nominated;
        }

        /// <summary>
        /// Gets or Sets Token
        /// </summary>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public MarketTokenResponse Token { get; set; }

        /// <summary>
        /// Decimal value with uncapped precision and size
        /// </summary>
        /// <value>Decimal value with uncapped precision and size</value>
        [DataMember(Name = "weight", EmitDefaultValue = false)]
        public string Weight { get; set; }

        /// <summary>
        /// USD value of tokens staking
        /// </summary>
        /// <value>USD value of tokens staking</value>
        [DataMember(Name = "usd", EmitDefaultValue = false)]
        public decimal Usd { get; set; }

        /// <summary>
        /// Percentage change of tokens staking from the previous day
        /// </summary>
        /// <value>Percentage change of tokens staking from the previous day</value>
        [DataMember(Name = "dailyWeightChangePercent", EmitDefaultValue = false)]
        public decimal DailyWeightChangePercent { get; set; }

        /// <summary>
        /// True if the pool is nominated for mining, otherwise false
        /// </summary>
        /// <value>True if the pool is nominated for mining, otherwise false</value>
        [DataMember(Name = "nominated", EmitDefaultValue = true)]
        public bool Nominated { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LiquidityPoolStakingSummary {\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  Usd: ").Append(Usd).Append("\n");
            sb.Append("  DailyWeightChangePercent: ").Append(DailyWeightChangePercent).Append("\n");
            sb.Append("  Nominated: ").Append(Nominated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LiquidityPoolStakingSummary);
        }

        /// <summary>
        /// Returns true if LiquidityPoolStakingSummary instances are equal
        /// </summary>
        /// <param name="input">Instance of LiquidityPoolStakingSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LiquidityPoolStakingSummary input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.Weight == input.Weight ||
                    (this.Weight != null &&
                    this.Weight.Equals(input.Weight))
                ) && 
                (
                    this.Usd == input.Usd ||
                    this.Usd.Equals(input.Usd)
                ) && 
                (
                    this.DailyWeightChangePercent == input.DailyWeightChangePercent ||
                    this.DailyWeightChangePercent.Equals(input.DailyWeightChangePercent)
                ) && 
                (
                    this.Nominated == input.Nominated ||
                    this.Nominated.Equals(input.Nominated)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Token != null)
                {
                    hashCode = (hashCode * 59) + this.Token.GetHashCode();
                }
                if (this.Weight != null)
                {
                    hashCode = (hashCode * 59) + this.Weight.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Usd.GetHashCode();
                hashCode = (hashCode * 59) + this.DailyWeightChangePercent.GetHashCode();
                hashCode = (hashCode * 59) + this.Nominated.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Weight (string) pattern
            Regex regexWeight = new Regex(@"^\\d*\\.\\d{1,18}$", RegexOptions.CultureInvariant);
            if (false == regexWeight.Match(this.Weight).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Weight, must match a pattern of " + regexWeight, new [] { "Weight" });
            }

            // Usd (decimal) minimum
            if (this.Usd < (decimal)0.0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Usd, must be a value greater than or equal to 0.0.", new [] { "Usd" });
            }

            // DailyWeightChangePercent (decimal) minimum
            if (this.DailyWeightChangePercent < (decimal)-100.0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DailyWeightChangePercent, must be a value greater than or equal to -100.0.", new [] { "DailyWeightChangePercent" });
            }

            yield break;
        }
    }

}
