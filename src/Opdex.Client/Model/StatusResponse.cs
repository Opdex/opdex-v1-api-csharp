/*
 * Opdex Platform API
 *
 * The Opdex Platform Web API is an interface for querying information from the Opdex contract indexer and quoting Opdex smart contract transactions. The Opdex contract indexer is a job that continually runs and stores relevant broadcast transaction data, in a way that represents the current known state of the Opdex protocol at the present time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Opdex.Client.Client.FileParameter;
using OpenAPIDateConverter = Opdex.Client.Client.OpenAPIDateConverter;

namespace Opdex.Client.Model
{
    /// <summary>
    /// Status of the API instance
    /// </summary>
    [DataContract(Name = "statusResponse")]
    public partial class StatusResponse : IEquatable<StatusResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StatusResponse" /> class.
        /// </summary>
        /// <param name="commit">The commit hash for the version of the code that is running.</param>
        /// <param name="identifier">Globally unique identifier of the current API instance.</param>
        /// <param name="underMaintenance">Whether the API is under maintenance.</param>
        public StatusResponse(string commit = default(string), string identifier = default(string), bool underMaintenance = default(bool))
        {
            this.Commit = commit;
            this.Identifier = identifier;
            this.UnderMaintenance = underMaintenance;
        }

        /// <summary>
        /// The commit hash for the version of the code that is running
        /// </summary>
        /// <value>The commit hash for the version of the code that is running</value>
        [DataMember(Name = "commit", EmitDefaultValue = false)]
        public string Commit { get; set; }

        /// <summary>
        /// Globally unique identifier of the current API instance
        /// </summary>
        /// <value>Globally unique identifier of the current API instance</value>
        [DataMember(Name = "identifier", EmitDefaultValue = false)]
        public string Identifier { get; set; }

        /// <summary>
        /// Whether the API is under maintenance
        /// </summary>
        /// <value>Whether the API is under maintenance</value>
        [DataMember(Name = "underMaintenance", EmitDefaultValue = true)]
        public bool UnderMaintenance { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StatusResponse {\n");
            sb.Append("  Commit: ").Append(Commit).Append("\n");
            sb.Append("  Identifier: ").Append(Identifier).Append("\n");
            sb.Append("  UnderMaintenance: ").Append(UnderMaintenance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StatusResponse);
        }

        /// <summary>
        /// Returns true if StatusResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of StatusResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StatusResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Commit == input.Commit ||
                    (this.Commit != null &&
                    this.Commit.Equals(input.Commit))
                ) && 
                (
                    this.Identifier == input.Identifier ||
                    (this.Identifier != null &&
                    this.Identifier.Equals(input.Identifier))
                ) && 
                (
                    this.UnderMaintenance == input.UnderMaintenance ||
                    this.UnderMaintenance.Equals(input.UnderMaintenance)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Commit != null)
                {
                    hashCode = (hashCode * 59) + this.Commit.GetHashCode();
                }
                if (this.Identifier != null)
                {
                    hashCode = (hashCode * 59) + this.Identifier.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UnderMaintenance.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
