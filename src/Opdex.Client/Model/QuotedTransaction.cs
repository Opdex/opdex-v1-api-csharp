/*
 * Opdex Platform API
 *
 * The Opdex Platform Web API is an interface for querying information from the Opdex contract indexer and quoting Opdex smart contract transactions. The Opdex contract indexer is a job that continually runs and stores relevant broadcast transaction data, in a way that represents the current known state of the Opdex protocol at the present time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Opdex.Client.Client.FileParameter;
using OpenAPIDateConverter = Opdex.Client.Client.OpenAPIDateConverter;

namespace Opdex.Client.Model
{
    /// <summary>
    /// Quoted transaction that can be handed off to a wallet
    /// </summary>
    [DataContract(Name = "quotedTransaction")]
    public partial class QuotedTransaction : IEquatable<QuotedTransaction>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QuotedTransaction" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected QuotedTransaction() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="QuotedTransaction" /> class.
        /// </summary>
        /// <param name="sender">An address on the Cirrus network (required).</param>
        /// <param name="to">An address on the Cirrus network (required).</param>
        /// <param name="amount">Decimal value with uncapped precision and size (required).</param>
        /// <param name="method">Name of smart contract method to call (required).</param>
        /// <param name="parameters">An array of labelled parameters to pass to the method.</param>
        /// <param name="callback">An endpoint that the broadcaster can call back to (required).</param>
        public QuotedTransaction(string sender = default(string), string to = default(string), string amount = default(string), string method = default(string), List<LabelledSmartContractParameter> parameters = default(List<LabelledSmartContractParameter>), string callback = default(string))
        {
            // to ensure "sender" is required (not null)
            if (sender == null) {
                throw new ArgumentNullException("sender is a required property for QuotedTransaction and cannot be null");
            }
            this.Sender = sender;
            // to ensure "to" is required (not null)
            if (to == null) {
                throw new ArgumentNullException("to is a required property for QuotedTransaction and cannot be null");
            }
            this.To = to;
            // to ensure "amount" is required (not null)
            if (amount == null) {
                throw new ArgumentNullException("amount is a required property for QuotedTransaction and cannot be null");
            }
            this.Amount = amount;
            // to ensure "method" is required (not null)
            if (method == null) {
                throw new ArgumentNullException("method is a required property for QuotedTransaction and cannot be null");
            }
            this.Method = method;
            // to ensure "callback" is required (not null)
            if (callback == null) {
                throw new ArgumentNullException("callback is a required property for QuotedTransaction and cannot be null");
            }
            this.Callback = callback;
            this.Parameters = parameters;
        }

        /// <summary>
        /// An address on the Cirrus network
        /// </summary>
        /// <value>An address on the Cirrus network</value>
        [DataMember(Name = "sender", IsRequired = true, EmitDefaultValue = false)]
        public string Sender { get; set; }

        /// <summary>
        /// An address on the Cirrus network
        /// </summary>
        /// <value>An address on the Cirrus network</value>
        [DataMember(Name = "to", IsRequired = true, EmitDefaultValue = false)]
        public string To { get; set; }

        /// <summary>
        /// Decimal value with uncapped precision and size
        /// </summary>
        /// <value>Decimal value with uncapped precision and size</value>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = false)]
        public string Amount { get; set; }

        /// <summary>
        /// Name of smart contract method to call
        /// </summary>
        /// <value>Name of smart contract method to call</value>
        [DataMember(Name = "method", IsRequired = true, EmitDefaultValue = false)]
        public string Method { get; set; }

        /// <summary>
        /// An array of labelled parameters to pass to the method
        /// </summary>
        /// <value>An array of labelled parameters to pass to the method</value>
        [DataMember(Name = "parameters", EmitDefaultValue = false)]
        public List<LabelledSmartContractParameter> Parameters { get; set; }

        /// <summary>
        /// An endpoint that the broadcaster can call back to
        /// </summary>
        /// <value>An endpoint that the broadcaster can call back to</value>
        [DataMember(Name = "callback", IsRequired = true, EmitDefaultValue = false)]
        public string Callback { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class QuotedTransaction {\n");
            sb.Append("  Sender: ").Append(Sender).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("  Callback: ").Append(Callback).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QuotedTransaction);
        }

        /// <summary>
        /// Returns true if QuotedTransaction instances are equal
        /// </summary>
        /// <param name="input">Instance of QuotedTransaction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QuotedTransaction input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Sender == input.Sender ||
                    (this.Sender != null &&
                    this.Sender.Equals(input.Sender))
                ) && 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Method == input.Method ||
                    (this.Method != null &&
                    this.Method.Equals(input.Method))
                ) && 
                (
                    this.Parameters == input.Parameters ||
                    this.Parameters != null &&
                    input.Parameters != null &&
                    this.Parameters.SequenceEqual(input.Parameters)
                ) && 
                (
                    this.Callback == input.Callback ||
                    (this.Callback != null &&
                    this.Callback.Equals(input.Callback))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Sender != null)
                {
                    hashCode = (hashCode * 59) + this.Sender.GetHashCode();
                }
                if (this.To != null)
                {
                    hashCode = (hashCode * 59) + this.To.GetHashCode();
                }
                if (this.Amount != null)
                {
                    hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                }
                if (this.Method != null)
                {
                    hashCode = (hashCode * 59) + this.Method.GetHashCode();
                }
                if (this.Parameters != null)
                {
                    hashCode = (hashCode * 59) + this.Parameters.GetHashCode();
                }
                if (this.Callback != null)
                {
                    hashCode = (hashCode * 59) + this.Callback.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Sender (string) maxLength
            if (this.Sender != null && this.Sender.Length > 42)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Sender, length must be less than 42.", new [] { "Sender" });
            }

            // Sender (string) minLength
            if (this.Sender != null && this.Sender.Length < 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Sender, length must be greater than 30.", new [] { "Sender" });
            }

            // Sender (string) pattern
            Regex regexSender = new Regex(@"^[a-km-zA-HJ-NP-Z1-9]+$", RegexOptions.CultureInvariant);
            if (false == regexSender.Match(this.Sender).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Sender, must match a pattern of " + regexSender, new [] { "Sender" });
            }

            // To (string) maxLength
            if (this.To != null && this.To.Length > 42)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for To, length must be less than 42.", new [] { "To" });
            }

            // To (string) minLength
            if (this.To != null && this.To.Length < 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for To, length must be greater than 30.", new [] { "To" });
            }

            // To (string) pattern
            Regex regexTo = new Regex(@"^[a-km-zA-HJ-NP-Z1-9]+$", RegexOptions.CultureInvariant);
            if (false == regexTo.Match(this.To).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for To, must match a pattern of " + regexTo, new [] { "To" });
            }

            // Amount (string) pattern
            Regex regexAmount = new Regex(@"^\\d*\\.\\d{1,18}$", RegexOptions.CultureInvariant);
            if (false == regexAmount.Match(this.Amount).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Amount, must match a pattern of " + regexAmount, new [] { "Amount" });
            }

            // Method (string) minLength
            if (this.Method != null && this.Method.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Method, length must be greater than 1.", new [] { "Method" });
            }

            // Callback (string) minLength
            if (this.Callback != null && this.Callback.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Callback, length must be greater than 1.", new [] { "Callback" });
            }

            yield break;
        }
    }

}
