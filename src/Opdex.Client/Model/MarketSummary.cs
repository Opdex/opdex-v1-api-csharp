/*
 * Opdex Platform API
 *
 * The Opdex Platform Web API is an interface for querying information from the Opdex contract indexer and quoting Opdex smart contract transactions. The Opdex contract indexer is a job that continually runs and stores relevant broadcast transaction data, in a way that represents the current known state of the Opdex protocol at the present time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Opdex.Client.Client.FileParameter;
using OpenAPIDateConverter = Opdex.Client.Client.OpenAPIDateConverter;

namespace Opdex.Client.Model
{
    /// <summary>
    /// MarketSummary
    /// </summary>
    [DataContract(Name = "marketSummary")]
    public partial class MarketSummary : IEquatable<MarketSummary>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MarketSummary" /> class.
        /// </summary>
        /// <param name="liquidityUsd">Total liquidity USD amount.</param>
        /// <param name="dailyLiquidityUsdChangePercent">Percentage change of the liquidity USD amount from the previous day.</param>
        /// <param name="volumeUsd">Total volume USD amount.</param>
        /// <param name="staking">staking.</param>
        /// <param name="rewards">rewards.</param>
        public MarketSummary(decimal liquidityUsd = default(decimal), decimal dailyLiquidityUsdChangePercent = default(decimal), decimal volumeUsd = default(decimal), MarketStakingSummary staking = default(MarketStakingSummary), RewardSummary rewards = default(RewardSummary))
        {
            this.LiquidityUsd = liquidityUsd;
            this.DailyLiquidityUsdChangePercent = dailyLiquidityUsdChangePercent;
            this.VolumeUsd = volumeUsd;
            this.Staking = staking;
            this.Rewards = rewards;
        }

        /// <summary>
        /// Total liquidity USD amount
        /// </summary>
        /// <value>Total liquidity USD amount</value>
        [DataMember(Name = "liquidityUsd", EmitDefaultValue = false)]
        public decimal LiquidityUsd { get; set; }

        /// <summary>
        /// Percentage change of the liquidity USD amount from the previous day
        /// </summary>
        /// <value>Percentage change of the liquidity USD amount from the previous day</value>
        [DataMember(Name = "dailyLiquidityUsdChangePercent", EmitDefaultValue = false)]
        public decimal DailyLiquidityUsdChangePercent { get; set; }

        /// <summary>
        /// Total volume USD amount
        /// </summary>
        /// <value>Total volume USD amount</value>
        [DataMember(Name = "volumeUsd", EmitDefaultValue = false)]
        public decimal VolumeUsd { get; set; }

        /// <summary>
        /// Gets or Sets Staking
        /// </summary>
        [DataMember(Name = "staking", EmitDefaultValue = false)]
        public MarketStakingSummary Staking { get; set; }

        /// <summary>
        /// Gets or Sets Rewards
        /// </summary>
        [DataMember(Name = "rewards", EmitDefaultValue = false)]
        public RewardSummary Rewards { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MarketSummary {\n");
            sb.Append("  LiquidityUsd: ").Append(LiquidityUsd).Append("\n");
            sb.Append("  DailyLiquidityUsdChangePercent: ").Append(DailyLiquidityUsdChangePercent).Append("\n");
            sb.Append("  VolumeUsd: ").Append(VolumeUsd).Append("\n");
            sb.Append("  Staking: ").Append(Staking).Append("\n");
            sb.Append("  Rewards: ").Append(Rewards).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MarketSummary);
        }

        /// <summary>
        /// Returns true if MarketSummary instances are equal
        /// </summary>
        /// <param name="input">Instance of MarketSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MarketSummary input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.LiquidityUsd == input.LiquidityUsd ||
                    this.LiquidityUsd.Equals(input.LiquidityUsd)
                ) && 
                (
                    this.DailyLiquidityUsdChangePercent == input.DailyLiquidityUsdChangePercent ||
                    this.DailyLiquidityUsdChangePercent.Equals(input.DailyLiquidityUsdChangePercent)
                ) && 
                (
                    this.VolumeUsd == input.VolumeUsd ||
                    this.VolumeUsd.Equals(input.VolumeUsd)
                ) && 
                (
                    this.Staking == input.Staking ||
                    (this.Staking != null &&
                    this.Staking.Equals(input.Staking))
                ) && 
                (
                    this.Rewards == input.Rewards ||
                    (this.Rewards != null &&
                    this.Rewards.Equals(input.Rewards))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.LiquidityUsd.GetHashCode();
                hashCode = (hashCode * 59) + this.DailyLiquidityUsdChangePercent.GetHashCode();
                hashCode = (hashCode * 59) + this.VolumeUsd.GetHashCode();
                if (this.Staking != null)
                {
                    hashCode = (hashCode * 59) + this.Staking.GetHashCode();
                }
                if (this.Rewards != null)
                {
                    hashCode = (hashCode * 59) + this.Rewards.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // LiquidityUsd (decimal) minimum
            if (this.LiquidityUsd < (decimal)0.0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LiquidityUsd, must be a value greater than or equal to 0.0.", new [] { "LiquidityUsd" });
            }

            // DailyLiquidityUsdChangePercent (decimal) minimum
            if (this.DailyLiquidityUsdChangePercent < (decimal)-100.0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DailyLiquidityUsdChangePercent, must be a value greater than or equal to -100.0.", new [] { "DailyLiquidityUsdChangePercent" });
            }

            // VolumeUsd (decimal) minimum
            if (this.VolumeUsd < (decimal)0.0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VolumeUsd, must be a value greater than or equal to 0.0.", new [] { "VolumeUsd" });
            }

            yield break;
        }
    }

}
