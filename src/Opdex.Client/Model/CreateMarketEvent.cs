/*
 * Opdex Platform API
 *
 * The Opdex Platform Web API is an interface for querying information from the Opdex contract indexer and quoting Opdex smart contract transactions. The Opdex contract indexer is a job that continually runs and stores relevant broadcast transaction data, in a way that represents the current known state of the Opdex protocol at the present time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Opdex.Client.Client.FileParameter;
using OpenAPIDateConverter = Opdex.Client.Client.OpenAPIDateConverter;

namespace Opdex.Client.Model
{
    /// <summary>
    /// Indicates a market was created
    /// </summary>
    [DataContract(Name = "createMarketEvent")]
    public partial class CreateMarketEvent : IEquatable<CreateMarketEvent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateMarketEvent" /> class.
        /// </summary>
        /// <param name="market">An address on the Cirrus network.</param>
        /// <param name="owner">An address on the Cirrus network.</param>
        /// <param name="router">An address on the Cirrus network.</param>
        /// <param name="authPoolCreators">Whether the market requires authorization to create a pool.</param>
        /// <param name="authProviders">Whether the market requires authorization to provide liquidity.</param>
        /// <param name="authTraders">Whether the market requires authorization to swap.</param>
        /// <param name="transactionFeePercent">Swap fee percentage amount.</param>
        /// <param name="stakingToken">An address on the Cirrus network.</param>
        /// <param name="enableMarketFee">Whether the market fee is enabled.</param>
        /// <param name="eventType">eventType.</param>
        /// <param name="contract">An address on the Cirrus network.</param>
        /// <param name="sortOrder">Index to sort event order.</param>
        public CreateMarketEvent(string market = default(string), string owner = default(string), string router = default(string), bool authPoolCreators = default(bool), bool authProviders = default(bool), bool authTraders = default(bool), decimal transactionFeePercent = default(decimal), string stakingToken = default(string), bool enableMarketFee = default(bool), TransactionEventType eventType = default(TransactionEventType), string contract = default(string), int sortOrder = default(int))
        {
            this.Market = market;
            this.Owner = owner;
            this.Router = router;
            this.AuthPoolCreators = authPoolCreators;
            this.AuthProviders = authProviders;
            this.AuthTraders = authTraders;
            this.TransactionFeePercent = transactionFeePercent;
            this.StakingToken = stakingToken;
            this.EnableMarketFee = enableMarketFee;
            this.EventType = eventType;
            this.Contract = contract;
            this.SortOrder = sortOrder;
        }

        /// <summary>
        /// An address on the Cirrus network
        /// </summary>
        /// <value>An address on the Cirrus network</value>
        [DataMember(Name = "market", EmitDefaultValue = false)]
        public string Market { get; set; }

        /// <summary>
        /// An address on the Cirrus network
        /// </summary>
        /// <value>An address on the Cirrus network</value>
        [DataMember(Name = "owner", EmitDefaultValue = false)]
        public string Owner { get; set; }

        /// <summary>
        /// An address on the Cirrus network
        /// </summary>
        /// <value>An address on the Cirrus network</value>
        [DataMember(Name = "router", EmitDefaultValue = false)]
        public string Router { get; set; }

        /// <summary>
        /// Whether the market requires authorization to create a pool
        /// </summary>
        /// <value>Whether the market requires authorization to create a pool</value>
        [DataMember(Name = "authPoolCreators", EmitDefaultValue = true)]
        public bool AuthPoolCreators { get; set; }

        /// <summary>
        /// Whether the market requires authorization to provide liquidity
        /// </summary>
        /// <value>Whether the market requires authorization to provide liquidity</value>
        [DataMember(Name = "authProviders", EmitDefaultValue = true)]
        public bool AuthProviders { get; set; }

        /// <summary>
        /// Whether the market requires authorization to swap
        /// </summary>
        /// <value>Whether the market requires authorization to swap</value>
        [DataMember(Name = "authTraders", EmitDefaultValue = true)]
        public bool AuthTraders { get; set; }

        /// <summary>
        /// Swap fee percentage amount
        /// </summary>
        /// <value>Swap fee percentage amount</value>
        [DataMember(Name = "transactionFeePercent", EmitDefaultValue = false)]
        public decimal TransactionFeePercent { get; set; }

        /// <summary>
        /// An address on the Cirrus network
        /// </summary>
        /// <value>An address on the Cirrus network</value>
        [DataMember(Name = "stakingToken", EmitDefaultValue = false)]
        public string StakingToken { get; set; }

        /// <summary>
        /// Whether the market fee is enabled
        /// </summary>
        /// <value>Whether the market fee is enabled</value>
        [DataMember(Name = "enableMarketFee", EmitDefaultValue = true)]
        public bool EnableMarketFee { get; set; }

        /// <summary>
        /// Gets or Sets EventType
        /// </summary>
        [DataMember(Name = "eventType", EmitDefaultValue = false)]
        public TransactionEventType EventType { get; set; }

        /// <summary>
        /// An address on the Cirrus network
        /// </summary>
        /// <value>An address on the Cirrus network</value>
        [DataMember(Name = "contract", EmitDefaultValue = false)]
        public string Contract { get; set; }

        /// <summary>
        /// Index to sort event order
        /// </summary>
        /// <value>Index to sort event order</value>
        [DataMember(Name = "sortOrder", EmitDefaultValue = false)]
        public int SortOrder { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateMarketEvent {\n");
            sb.Append("  Market: ").Append(Market).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  Router: ").Append(Router).Append("\n");
            sb.Append("  AuthPoolCreators: ").Append(AuthPoolCreators).Append("\n");
            sb.Append("  AuthProviders: ").Append(AuthProviders).Append("\n");
            sb.Append("  AuthTraders: ").Append(AuthTraders).Append("\n");
            sb.Append("  TransactionFeePercent: ").Append(TransactionFeePercent).Append("\n");
            sb.Append("  StakingToken: ").Append(StakingToken).Append("\n");
            sb.Append("  EnableMarketFee: ").Append(EnableMarketFee).Append("\n");
            sb.Append("  EventType: ").Append(EventType).Append("\n");
            sb.Append("  Contract: ").Append(Contract).Append("\n");
            sb.Append("  SortOrder: ").Append(SortOrder).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateMarketEvent);
        }

        /// <summary>
        /// Returns true if CreateMarketEvent instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateMarketEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateMarketEvent input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Market == input.Market ||
                    (this.Market != null &&
                    this.Market.Equals(input.Market))
                ) && 
                (
                    this.Owner == input.Owner ||
                    (this.Owner != null &&
                    this.Owner.Equals(input.Owner))
                ) && 
                (
                    this.Router == input.Router ||
                    (this.Router != null &&
                    this.Router.Equals(input.Router))
                ) && 
                (
                    this.AuthPoolCreators == input.AuthPoolCreators ||
                    this.AuthPoolCreators.Equals(input.AuthPoolCreators)
                ) && 
                (
                    this.AuthProviders == input.AuthProviders ||
                    this.AuthProviders.Equals(input.AuthProviders)
                ) && 
                (
                    this.AuthTraders == input.AuthTraders ||
                    this.AuthTraders.Equals(input.AuthTraders)
                ) && 
                (
                    this.TransactionFeePercent == input.TransactionFeePercent ||
                    this.TransactionFeePercent.Equals(input.TransactionFeePercent)
                ) && 
                (
                    this.StakingToken == input.StakingToken ||
                    (this.StakingToken != null &&
                    this.StakingToken.Equals(input.StakingToken))
                ) && 
                (
                    this.EnableMarketFee == input.EnableMarketFee ||
                    this.EnableMarketFee.Equals(input.EnableMarketFee)
                ) && 
                (
                    this.EventType == input.EventType ||
                    (this.EventType != null &&
                    this.EventType.Equals(input.EventType))
                ) && 
                (
                    this.Contract == input.Contract ||
                    (this.Contract != null &&
                    this.Contract.Equals(input.Contract))
                ) && 
                (
                    this.SortOrder == input.SortOrder ||
                    this.SortOrder.Equals(input.SortOrder)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Market != null)
                {
                    hashCode = (hashCode * 59) + this.Market.GetHashCode();
                }
                if (this.Owner != null)
                {
                    hashCode = (hashCode * 59) + this.Owner.GetHashCode();
                }
                if (this.Router != null)
                {
                    hashCode = (hashCode * 59) + this.Router.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AuthPoolCreators.GetHashCode();
                hashCode = (hashCode * 59) + this.AuthProviders.GetHashCode();
                hashCode = (hashCode * 59) + this.AuthTraders.GetHashCode();
                hashCode = (hashCode * 59) + this.TransactionFeePercent.GetHashCode();
                if (this.StakingToken != null)
                {
                    hashCode = (hashCode * 59) + this.StakingToken.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EnableMarketFee.GetHashCode();
                if (this.EventType != null)
                {
                    hashCode = (hashCode * 59) + this.EventType.GetHashCode();
                }
                if (this.Contract != null)
                {
                    hashCode = (hashCode * 59) + this.Contract.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SortOrder.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Market (string) maxLength
            if (this.Market != null && this.Market.Length > 42)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Market, length must be less than 42.", new [] { "Market" });
            }

            // Market (string) minLength
            if (this.Market != null && this.Market.Length < 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Market, length must be greater than 30.", new [] { "Market" });
            }

            // Market (string) pattern
            Regex regexMarket = new Regex(@"^[a-km-zA-HJ-NP-Z1-9]$", RegexOptions.CultureInvariant);
            if (false == regexMarket.Match(this.Market).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Market, must match a pattern of " + regexMarket, new [] { "Market" });
            }

            // Owner (string) maxLength
            if (this.Owner != null && this.Owner.Length > 42)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Owner, length must be less than 42.", new [] { "Owner" });
            }

            // Owner (string) minLength
            if (this.Owner != null && this.Owner.Length < 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Owner, length must be greater than 30.", new [] { "Owner" });
            }

            // Owner (string) pattern
            Regex regexOwner = new Regex(@"^[a-km-zA-HJ-NP-Z1-9]$", RegexOptions.CultureInvariant);
            if (false == regexOwner.Match(this.Owner).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Owner, must match a pattern of " + regexOwner, new [] { "Owner" });
            }

            // Router (string) maxLength
            if (this.Router != null && this.Router.Length > 42)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Router, length must be less than 42.", new [] { "Router" });
            }

            // Router (string) minLength
            if (this.Router != null && this.Router.Length < 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Router, length must be greater than 30.", new [] { "Router" });
            }

            // Router (string) pattern
            Regex regexRouter = new Regex(@"^[a-km-zA-HJ-NP-Z1-9]$", RegexOptions.CultureInvariant);
            if (false == regexRouter.Match(this.Router).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Router, must match a pattern of " + regexRouter, new [] { "Router" });
            }

            // TransactionFeePercent (decimal) maximum
            if (this.TransactionFeePercent > (decimal)0.1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransactionFeePercent, must be a value less than or equal to 0.1.", new [] { "TransactionFeePercent" });
            }

            // TransactionFeePercent (decimal) minimum
            if (this.TransactionFeePercent < (decimal)0.0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransactionFeePercent, must be a value greater than or equal to 0.0.", new [] { "TransactionFeePercent" });
            }

            // StakingToken (string) maxLength
            if (this.StakingToken != null && this.StakingToken.Length > 42)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StakingToken, length must be less than 42.", new [] { "StakingToken" });
            }

            // StakingToken (string) minLength
            if (this.StakingToken != null && this.StakingToken.Length < 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StakingToken, length must be greater than 30.", new [] { "StakingToken" });
            }

            // StakingToken (string) pattern
            Regex regexStakingToken = new Regex(@"^[a-km-zA-HJ-NP-Z1-9]$", RegexOptions.CultureInvariant);
            if (false == regexStakingToken.Match(this.StakingToken).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StakingToken, must match a pattern of " + regexStakingToken, new [] { "StakingToken" });
            }

            // Contract (string) maxLength
            if (this.Contract != null && this.Contract.Length > 42)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Contract, length must be less than 42.", new [] { "Contract" });
            }

            // Contract (string) minLength
            if (this.Contract != null && this.Contract.Length < 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Contract, length must be greater than 30.", new [] { "Contract" });
            }

            // Contract (string) pattern
            Regex regexContract = new Regex(@"^[a-km-zA-HJ-NP-Z1-9]$", RegexOptions.CultureInvariant);
            if (false == regexContract.Match(this.Contract).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Contract, must match a pattern of " + regexContract, new [] { "Contract" });
            }

            // SortOrder (int) minimum
            if (this.SortOrder < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SortOrder, must be a value greater than or equal to 0.", new [] { "SortOrder" });
            }

            yield break;
        }
    }

}
