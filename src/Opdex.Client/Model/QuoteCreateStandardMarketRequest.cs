/*
 * Opdex Platform API
 *
 * The Opdex Platform Web API is an interface for querying information from the Opdex contract indexer and quoting Opdex smart contract transactions. The Opdex contract indexer is a job that continually runs and stores relevant broadcast transaction data, in a way that represents the current known state of the Opdex protocol at the present time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Opdex.Client.Client.FileParameter;
using OpenAPIDateConverter = Opdex.Client.Client.OpenAPIDateConverter;

namespace Opdex.Client.Model
{
    /// <summary>
    /// Request to retrieve a create standard market call quote
    /// </summary>
    [DataContract(Name = "quoteCreateStandardMarketRequest")]
    public partial class QuoteCreateStandardMarketRequest : IEquatable<QuoteCreateStandardMarketRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QuoteCreateStandardMarketRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected QuoteCreateStandardMarketRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="QuoteCreateStandardMarketRequest" /> class.
        /// </summary>
        /// <param name="owner">An address on the Cirrus network (required).</param>
        /// <param name="transactionFeePercent">Decimal value with uncapped precision and size (required).</param>
        /// <param name="authPoolCreators">If true, requires permissions to be assigned to create liquidity pools; or if false anyone can create a liquidity pool (required).</param>
        /// <param name="authLiquidityProviders">If true, requires permissions to be assigned to provide liquidity; or if false anyone can provide liquidity (required).</param>
        /// <param name="authTraders">If true, requires permissions to be assigned to swap; or if false anyone can swap (required).</param>
        /// <param name="enableMarketFee">If true, enables the market fee; note this must be false if transaction fee is zero (required).</param>
        public QuoteCreateStandardMarketRequest(string owner = default(string), string transactionFeePercent = default(string), bool authPoolCreators = default(bool), bool authLiquidityProviders = default(bool), bool authTraders = default(bool), bool enableMarketFee = default(bool))
        {
            // to ensure "owner" is required (not null)
            if (owner == null) {
                throw new ArgumentNullException("owner is a required property for QuoteCreateStandardMarketRequest and cannot be null");
            }
            this.Owner = owner;
            // to ensure "transactionFeePercent" is required (not null)
            if (transactionFeePercent == null) {
                throw new ArgumentNullException("transactionFeePercent is a required property for QuoteCreateStandardMarketRequest and cannot be null");
            }
            this.TransactionFeePercent = transactionFeePercent;
            this.AuthPoolCreators = authPoolCreators;
            this.AuthLiquidityProviders = authLiquidityProviders;
            this.AuthTraders = authTraders;
            this.EnableMarketFee = enableMarketFee;
        }

        /// <summary>
        /// An address on the Cirrus network
        /// </summary>
        /// <value>An address on the Cirrus network</value>
        [DataMember(Name = "owner", IsRequired = true, EmitDefaultValue = false)]
        public string Owner { get; set; }

        /// <summary>
        /// Decimal value with uncapped precision and size
        /// </summary>
        /// <value>Decimal value with uncapped precision and size</value>
        [DataMember(Name = "transactionFeePercent", IsRequired = true, EmitDefaultValue = false)]
        public string TransactionFeePercent { get; set; }

        /// <summary>
        /// If true, requires permissions to be assigned to create liquidity pools; or if false anyone can create a liquidity pool
        /// </summary>
        /// <value>If true, requires permissions to be assigned to create liquidity pools; or if false anyone can create a liquidity pool</value>
        [DataMember(Name = "authPoolCreators", IsRequired = true, EmitDefaultValue = true)]
        public bool AuthPoolCreators { get; set; }

        /// <summary>
        /// If true, requires permissions to be assigned to provide liquidity; or if false anyone can provide liquidity
        /// </summary>
        /// <value>If true, requires permissions to be assigned to provide liquidity; or if false anyone can provide liquidity</value>
        [DataMember(Name = "authLiquidityProviders", IsRequired = true, EmitDefaultValue = true)]
        public bool AuthLiquidityProviders { get; set; }

        /// <summary>
        /// If true, requires permissions to be assigned to swap; or if false anyone can swap
        /// </summary>
        /// <value>If true, requires permissions to be assigned to swap; or if false anyone can swap</value>
        [DataMember(Name = "authTraders", IsRequired = true, EmitDefaultValue = true)]
        public bool AuthTraders { get; set; }

        /// <summary>
        /// If true, enables the market fee; note this must be false if transaction fee is zero
        /// </summary>
        /// <value>If true, enables the market fee; note this must be false if transaction fee is zero</value>
        [DataMember(Name = "enableMarketFee", IsRequired = true, EmitDefaultValue = true)]
        public bool EnableMarketFee { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class QuoteCreateStandardMarketRequest {\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  TransactionFeePercent: ").Append(TransactionFeePercent).Append("\n");
            sb.Append("  AuthPoolCreators: ").Append(AuthPoolCreators).Append("\n");
            sb.Append("  AuthLiquidityProviders: ").Append(AuthLiquidityProviders).Append("\n");
            sb.Append("  AuthTraders: ").Append(AuthTraders).Append("\n");
            sb.Append("  EnableMarketFee: ").Append(EnableMarketFee).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QuoteCreateStandardMarketRequest);
        }

        /// <summary>
        /// Returns true if QuoteCreateStandardMarketRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of QuoteCreateStandardMarketRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QuoteCreateStandardMarketRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Owner == input.Owner ||
                    (this.Owner != null &&
                    this.Owner.Equals(input.Owner))
                ) && 
                (
                    this.TransactionFeePercent == input.TransactionFeePercent ||
                    (this.TransactionFeePercent != null &&
                    this.TransactionFeePercent.Equals(input.TransactionFeePercent))
                ) && 
                (
                    this.AuthPoolCreators == input.AuthPoolCreators ||
                    this.AuthPoolCreators.Equals(input.AuthPoolCreators)
                ) && 
                (
                    this.AuthLiquidityProviders == input.AuthLiquidityProviders ||
                    this.AuthLiquidityProviders.Equals(input.AuthLiquidityProviders)
                ) && 
                (
                    this.AuthTraders == input.AuthTraders ||
                    this.AuthTraders.Equals(input.AuthTraders)
                ) && 
                (
                    this.EnableMarketFee == input.EnableMarketFee ||
                    this.EnableMarketFee.Equals(input.EnableMarketFee)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Owner != null)
                {
                    hashCode = (hashCode * 59) + this.Owner.GetHashCode();
                }
                if (this.TransactionFeePercent != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionFeePercent.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AuthPoolCreators.GetHashCode();
                hashCode = (hashCode * 59) + this.AuthLiquidityProviders.GetHashCode();
                hashCode = (hashCode * 59) + this.AuthTraders.GetHashCode();
                hashCode = (hashCode * 59) + this.EnableMarketFee.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Owner (string) maxLength
            if (this.Owner != null && this.Owner.Length > 42)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Owner, length must be less than 42.", new [] { "Owner" });
            }

            // Owner (string) minLength
            if (this.Owner != null && this.Owner.Length < 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Owner, length must be greater than 30.", new [] { "Owner" });
            }

            // Owner (string) pattern
            Regex regexOwner = new Regex(@"^[a-km-zA-HJ-NP-Z1-9]$", RegexOptions.CultureInvariant);
            if (false == regexOwner.Match(this.Owner).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Owner, must match a pattern of " + regexOwner, new [] { "Owner" });
            }

            // TransactionFeePercent (string) pattern
            Regex regexTransactionFeePercent = new Regex(@"^\\d*\\.\\d{1,18}$", RegexOptions.CultureInvariant);
            if (false == regexTransactionFeePercent.Match(this.TransactionFeePercent).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransactionFeePercent, must match a pattern of " + regexTransactionFeePercent, new [] { "TransactionFeePercent" });
            }

            yield break;
        }
    }

}
