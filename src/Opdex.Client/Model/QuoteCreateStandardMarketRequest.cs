/*
 * Opdex Platform API
 *
 * The Opdex Platform Web API is an interface for querying information from the Opdex contract indexer and quoting Opdex smart contract transactions. The Opdex contract indexer is a job that continually runs and stores relevant broadcast transaction data, in a way that represents the current known state of the Opdex protocol at the present time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Opdex.Client.Client.OpenAPIDateConverter;

namespace Opdex.Client.Model
{
    /// <summary>
    /// Request to retrieve a create standard market call quote
    /// </summary>
    [DataContract(Name = "quoteCreateStandardMarketRequest")]
    public partial class QuoteCreateStandardMarketRequest : IEquatable<QuoteCreateStandardMarketRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QuoteCreateStandardMarketRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected QuoteCreateStandardMarketRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="QuoteCreateStandardMarketRequest" /> class.
        /// </summary>
        /// <param name="marketOwner">An address on the Cirrus network (required).</param>
        /// <param name="transactionFee">Swap fee amount equivalent to the percentage fee multiplied by 10 (required).</param>
        /// <param name="authPoolCreators">If true, requires permissions to be assigned to create liquidity pools; or if false anyone can create a liquidity pool (required).</param>
        /// <param name="authLiquidityProviders">If true, requires permissions to be assigned to provide liquidity; or if false anyone can provide liquidity (required).</param>
        /// <param name="authTraders">If true, requires permissions to be assigned to swap; or if false anyone can swap (required).</param>
        /// <param name="enableMarketFee">If true, enables the market fee; note this must be false if transaction fee is zero (required).</param>
        public QuoteCreateStandardMarketRequest(string marketOwner = default(string), int transactionFee = default(int), bool authPoolCreators = default(bool), bool authLiquidityProviders = default(bool), bool authTraders = default(bool), bool enableMarketFee = default(bool))
        {
            // to ensure "marketOwner" is required (not null)
            if (marketOwner == null) {
                throw new ArgumentNullException("marketOwner is a required property for QuoteCreateStandardMarketRequest and cannot be null");
            }
            this.MarketOwner = marketOwner;
            this.TransactionFee = transactionFee;
            this.AuthPoolCreators = authPoolCreators;
            this.AuthLiquidityProviders = authLiquidityProviders;
            this.AuthTraders = authTraders;
            this.EnableMarketFee = enableMarketFee;
        }

        /// <summary>
        /// An address on the Cirrus network
        /// </summary>
        /// <value>An address on the Cirrus network</value>
        [DataMember(Name = "marketOwner", IsRequired = true, EmitDefaultValue = false)]
        public string MarketOwner { get; set; }

        /// <summary>
        /// Swap fee amount equivalent to the percentage fee multiplied by 10
        /// </summary>
        /// <value>Swap fee amount equivalent to the percentage fee multiplied by 10</value>
        [DataMember(Name = "transactionFee", IsRequired = true, EmitDefaultValue = false)]
        public int TransactionFee { get; set; }

        /// <summary>
        /// If true, requires permissions to be assigned to create liquidity pools; or if false anyone can create a liquidity pool
        /// </summary>
        /// <value>If true, requires permissions to be assigned to create liquidity pools; or if false anyone can create a liquidity pool</value>
        [DataMember(Name = "authPoolCreators", IsRequired = true, EmitDefaultValue = true)]
        public bool AuthPoolCreators { get; set; }

        /// <summary>
        /// If true, requires permissions to be assigned to provide liquidity; or if false anyone can provide liquidity
        /// </summary>
        /// <value>If true, requires permissions to be assigned to provide liquidity; or if false anyone can provide liquidity</value>
        [DataMember(Name = "authLiquidityProviders", IsRequired = true, EmitDefaultValue = true)]
        public bool AuthLiquidityProviders { get; set; }

        /// <summary>
        /// If true, requires permissions to be assigned to swap; or if false anyone can swap
        /// </summary>
        /// <value>If true, requires permissions to be assigned to swap; or if false anyone can swap</value>
        [DataMember(Name = "authTraders", IsRequired = true, EmitDefaultValue = true)]
        public bool AuthTraders { get; set; }

        /// <summary>
        /// If true, enables the market fee; note this must be false if transaction fee is zero
        /// </summary>
        /// <value>If true, enables the market fee; note this must be false if transaction fee is zero</value>
        [DataMember(Name = "enableMarketFee", IsRequired = true, EmitDefaultValue = true)]
        public bool EnableMarketFee { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class QuoteCreateStandardMarketRequest {\n");
            sb.Append("  MarketOwner: ").Append(MarketOwner).Append("\n");
            sb.Append("  TransactionFee: ").Append(TransactionFee).Append("\n");
            sb.Append("  AuthPoolCreators: ").Append(AuthPoolCreators).Append("\n");
            sb.Append("  AuthLiquidityProviders: ").Append(AuthLiquidityProviders).Append("\n");
            sb.Append("  AuthTraders: ").Append(AuthTraders).Append("\n");
            sb.Append("  EnableMarketFee: ").Append(EnableMarketFee).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QuoteCreateStandardMarketRequest);
        }

        /// <summary>
        /// Returns true if QuoteCreateStandardMarketRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of QuoteCreateStandardMarketRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QuoteCreateStandardMarketRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MarketOwner == input.MarketOwner ||
                    (this.MarketOwner != null &&
                    this.MarketOwner.Equals(input.MarketOwner))
                ) && 
                (
                    this.TransactionFee == input.TransactionFee ||
                    this.TransactionFee.Equals(input.TransactionFee)
                ) && 
                (
                    this.AuthPoolCreators == input.AuthPoolCreators ||
                    this.AuthPoolCreators.Equals(input.AuthPoolCreators)
                ) && 
                (
                    this.AuthLiquidityProviders == input.AuthLiquidityProviders ||
                    this.AuthLiquidityProviders.Equals(input.AuthLiquidityProviders)
                ) && 
                (
                    this.AuthTraders == input.AuthTraders ||
                    this.AuthTraders.Equals(input.AuthTraders)
                ) && 
                (
                    this.EnableMarketFee == input.EnableMarketFee ||
                    this.EnableMarketFee.Equals(input.EnableMarketFee)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MarketOwner != null)
                {
                    hashCode = (hashCode * 59) + this.MarketOwner.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TransactionFee.GetHashCode();
                hashCode = (hashCode * 59) + this.AuthPoolCreators.GetHashCode();
                hashCode = (hashCode * 59) + this.AuthLiquidityProviders.GetHashCode();
                hashCode = (hashCode * 59) + this.AuthTraders.GetHashCode();
                hashCode = (hashCode * 59) + this.EnableMarketFee.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // MarketOwner (string) maxLength
            if (this.MarketOwner != null && this.MarketOwner.Length > 42)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MarketOwner, length must be less than 42.", new [] { "MarketOwner" });
            }

            // MarketOwner (string) minLength
            if (this.MarketOwner != null && this.MarketOwner.Length < 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MarketOwner, length must be greater than 30.", new [] { "MarketOwner" });
            }

            // MarketOwner (string) pattern
            Regex regexMarketOwner = new Regex(@"^[a-km-zA-HJ-NP-Z1-9]$", RegexOptions.CultureInvariant);
            if (false == regexMarketOwner.Match(this.MarketOwner).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MarketOwner, must match a pattern of " + regexMarketOwner, new [] { "MarketOwner" });
            }

            // TransactionFee (int) maximum
            if (this.TransactionFee > (int)10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransactionFee, must be a value less than or equal to 10.", new [] { "TransactionFee" });
            }

            // TransactionFee (int) minimum
            if (this.TransactionFee < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransactionFee, must be a value greater than or equal to 0.", new [] { "TransactionFee" });
            }

            yield break;
        }
    }

}
