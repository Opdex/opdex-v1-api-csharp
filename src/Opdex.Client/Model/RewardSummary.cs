/*
 * Opdex Platform API
 *
 * The Opdex Platform Web API is an interface for querying information from the Opdex contract indexer and quoting Opdex smart contract transactions. The Opdex contract indexer is a job that continually runs and stores relevant broadcast transaction data, in a way that represents the current known state of the Opdex protocol at the present time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Opdex.Client.Client.FileParameter;
using OpenAPIDateConverter = Opdex.Client.Client.OpenAPIDateConverter;

namespace Opdex.Client.Model
{
    /// <summary>
    /// RewardSummary
    /// </summary>
    [DataContract(Name = "rewardSummary")]
    public partial class RewardSummary : IEquatable<RewardSummary>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RewardSummary" /> class.
        /// </summary>
        /// <param name="providerDailyUsd">Decimal value with uncapped precision and size.</param>
        /// <param name="marketDailyUsd">Decimal value with uncapped precision and size.</param>
        /// <param name="totalDailyUsd">Decimal value with uncapped precision and size.</param>
        public RewardSummary(string providerDailyUsd = default(string), string marketDailyUsd = default(string), string totalDailyUsd = default(string))
        {
            this.ProviderDailyUsd = providerDailyUsd;
            this.MarketDailyUsd = marketDailyUsd;
            this.TotalDailyUsd = totalDailyUsd;
        }

        /// <summary>
        /// Decimal value with uncapped precision and size
        /// </summary>
        /// <value>Decimal value with uncapped precision and size</value>
        [DataMember(Name = "providerDailyUsd", EmitDefaultValue = false)]
        public string ProviderDailyUsd { get; set; }

        /// <summary>
        /// Decimal value with uncapped precision and size
        /// </summary>
        /// <value>Decimal value with uncapped precision and size</value>
        [DataMember(Name = "marketDailyUsd", EmitDefaultValue = false)]
        public string MarketDailyUsd { get; set; }

        /// <summary>
        /// Decimal value with uncapped precision and size
        /// </summary>
        /// <value>Decimal value with uncapped precision and size</value>
        [DataMember(Name = "totalDailyUsd", EmitDefaultValue = false)]
        public string TotalDailyUsd { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RewardSummary {\n");
            sb.Append("  ProviderDailyUsd: ").Append(ProviderDailyUsd).Append("\n");
            sb.Append("  MarketDailyUsd: ").Append(MarketDailyUsd).Append("\n");
            sb.Append("  TotalDailyUsd: ").Append(TotalDailyUsd).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RewardSummary);
        }

        /// <summary>
        /// Returns true if RewardSummary instances are equal
        /// </summary>
        /// <param name="input">Instance of RewardSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RewardSummary input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ProviderDailyUsd == input.ProviderDailyUsd ||
                    (this.ProviderDailyUsd != null &&
                    this.ProviderDailyUsd.Equals(input.ProviderDailyUsd))
                ) && 
                (
                    this.MarketDailyUsd == input.MarketDailyUsd ||
                    (this.MarketDailyUsd != null &&
                    this.MarketDailyUsd.Equals(input.MarketDailyUsd))
                ) && 
                (
                    this.TotalDailyUsd == input.TotalDailyUsd ||
                    (this.TotalDailyUsd != null &&
                    this.TotalDailyUsd.Equals(input.TotalDailyUsd))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ProviderDailyUsd != null)
                {
                    hashCode = (hashCode * 59) + this.ProviderDailyUsd.GetHashCode();
                }
                if (this.MarketDailyUsd != null)
                {
                    hashCode = (hashCode * 59) + this.MarketDailyUsd.GetHashCode();
                }
                if (this.TotalDailyUsd != null)
                {
                    hashCode = (hashCode * 59) + this.TotalDailyUsd.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // ProviderDailyUsd (string) pattern
            Regex regexProviderDailyUsd = new Regex(@"^\\d*\\.\\d{1,18}$", RegexOptions.CultureInvariant);
            if (false == regexProviderDailyUsd.Match(this.ProviderDailyUsd).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProviderDailyUsd, must match a pattern of " + regexProviderDailyUsd, new [] { "ProviderDailyUsd" });
            }

            // MarketDailyUsd (string) pattern
            Regex regexMarketDailyUsd = new Regex(@"^\\d*\\.\\d{1,18}$", RegexOptions.CultureInvariant);
            if (false == regexMarketDailyUsd.Match(this.MarketDailyUsd).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MarketDailyUsd, must match a pattern of " + regexMarketDailyUsd, new [] { "MarketDailyUsd" });
            }

            // TotalDailyUsd (string) pattern
            Regex regexTotalDailyUsd = new Regex(@"^\\d*\\.\\d{1,18}$", RegexOptions.CultureInvariant);
            if (false == regexTotalDailyUsd.Match(this.TotalDailyUsd).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TotalDailyUsd, must match a pattern of " + regexTotalDailyUsd, new [] { "TotalDailyUsd" });
            }

            yield break;
        }
    }

}
