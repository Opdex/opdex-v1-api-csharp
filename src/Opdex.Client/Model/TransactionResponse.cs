/*
 * Opdex Platform API
 *
 * The Opdex Platform Web API is an interface for querying information from the Opdex contract indexer and quoting Opdex smart contract transactions. The Opdex contract indexer is a job that continually runs and stores relevant broadcast transaction data, in a way that represents the current known state of the Opdex protocol at the present time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Opdex.Client.Client.FileParameter;
using OpenAPIDateConverter = Opdex.Client.Client.OpenAPIDateConverter;

namespace Opdex.Client.Model
{
    /// <summary>
    /// TransactionResponse
    /// </summary>
    [DataContract(Name = "transactionResponse")]
    public partial class TransactionResponse : IEquatable<TransactionResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionResponse" /> class.
        /// </summary>
        /// <param name="success">Whether the transaction succeeded.</param>
        /// <param name="hash">SHA256 hash value.</param>
        /// <param name="newContractAddress">An address on the Cirrus network.</param>
        /// <param name="block">block.</param>
        /// <param name="gasUsed">Quantity of gas consumed.</param>
        /// <param name="from">An address on the Cirrus network.</param>
        /// <param name="to">An address on the Cirrus network.</param>
        /// <param name="events">events.</param>
        public TransactionResponse(bool success = default(bool), string hash = default(string), string newContractAddress = default(string), BlockResponse block = default(BlockResponse), int gasUsed = default(int), string from = default(string), string to = default(string), List<TransactionEvent> events = default(List<TransactionEvent>))
        {
            this.Success = success;
            this.Hash = hash;
            this.NewContractAddress = newContractAddress;
            this.Block = block;
            this.GasUsed = gasUsed;
            this.From = from;
            this.To = to;
            this.Events = events;
        }

        /// <summary>
        /// Whether the transaction succeeded
        /// </summary>
        /// <value>Whether the transaction succeeded</value>
        [DataMember(Name = "success", EmitDefaultValue = true)]
        public bool Success { get; set; }

        /// <summary>
        /// SHA256 hash value
        /// </summary>
        /// <value>SHA256 hash value</value>
        [DataMember(Name = "hash", EmitDefaultValue = false)]
        public string Hash { get; set; }

        /// <summary>
        /// An address on the Cirrus network
        /// </summary>
        /// <value>An address on the Cirrus network</value>
        [DataMember(Name = "newContractAddress", EmitDefaultValue = false)]
        public string NewContractAddress { get; set; }

        /// <summary>
        /// Gets or Sets Block
        /// </summary>
        [DataMember(Name = "block", EmitDefaultValue = false)]
        public BlockResponse Block { get; set; }

        /// <summary>
        /// Quantity of gas consumed
        /// </summary>
        /// <value>Quantity of gas consumed</value>
        [DataMember(Name = "gasUsed", EmitDefaultValue = false)]
        public int GasUsed { get; set; }

        /// <summary>
        /// An address on the Cirrus network
        /// </summary>
        /// <value>An address on the Cirrus network</value>
        [DataMember(Name = "from", EmitDefaultValue = false)]
        public string From { get; set; }

        /// <summary>
        /// An address on the Cirrus network
        /// </summary>
        /// <value>An address on the Cirrus network</value>
        [DataMember(Name = "to", EmitDefaultValue = false)]
        public string To { get; set; }

        /// <summary>
        /// Gets or Sets Events
        /// </summary>
        [DataMember(Name = "events", EmitDefaultValue = false)]
        public List<TransactionEvent> Events { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransactionResponse {\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("  Hash: ").Append(Hash).Append("\n");
            sb.Append("  NewContractAddress: ").Append(NewContractAddress).Append("\n");
            sb.Append("  Block: ").Append(Block).Append("\n");
            sb.Append("  GasUsed: ").Append(GasUsed).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  Events: ").Append(Events).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionResponse);
        }

        /// <summary>
        /// Returns true if TransactionResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Success == input.Success ||
                    this.Success.Equals(input.Success)
                ) && 
                (
                    this.Hash == input.Hash ||
                    (this.Hash != null &&
                    this.Hash.Equals(input.Hash))
                ) && 
                (
                    this.NewContractAddress == input.NewContractAddress ||
                    (this.NewContractAddress != null &&
                    this.NewContractAddress.Equals(input.NewContractAddress))
                ) && 
                (
                    this.Block == input.Block ||
                    (this.Block != null &&
                    this.Block.Equals(input.Block))
                ) && 
                (
                    this.GasUsed == input.GasUsed ||
                    this.GasUsed.Equals(input.GasUsed)
                ) && 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                ) && 
                (
                    this.Events == input.Events ||
                    this.Events != null &&
                    input.Events != null &&
                    this.Events.SequenceEqual(input.Events)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Success.GetHashCode();
                if (this.Hash != null)
                {
                    hashCode = (hashCode * 59) + this.Hash.GetHashCode();
                }
                if (this.NewContractAddress != null)
                {
                    hashCode = (hashCode * 59) + this.NewContractAddress.GetHashCode();
                }
                if (this.Block != null)
                {
                    hashCode = (hashCode * 59) + this.Block.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.GasUsed.GetHashCode();
                if (this.From != null)
                {
                    hashCode = (hashCode * 59) + this.From.GetHashCode();
                }
                if (this.To != null)
                {
                    hashCode = (hashCode * 59) + this.To.GetHashCode();
                }
                if (this.Events != null)
                {
                    hashCode = (hashCode * 59) + this.Events.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Hash (string) maxLength
            if (this.Hash != null && this.Hash.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Hash, length must be less than 64.", new [] { "Hash" });
            }

            // Hash (string) minLength
            if (this.Hash != null && this.Hash.Length < 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Hash, length must be greater than 64.", new [] { "Hash" });
            }

            // Hash (string) pattern
            Regex regexHash = new Regex(@"^[A-Fa-f0-9]{64}$", RegexOptions.CultureInvariant);
            if (false == regexHash.Match(this.Hash).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Hash, must match a pattern of " + regexHash, new [] { "Hash" });
            }

            // NewContractAddress (string) maxLength
            if (this.NewContractAddress != null && this.NewContractAddress.Length > 42)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NewContractAddress, length must be less than 42.", new [] { "NewContractAddress" });
            }

            // NewContractAddress (string) minLength
            if (this.NewContractAddress != null && this.NewContractAddress.Length < 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NewContractAddress, length must be greater than 30.", new [] { "NewContractAddress" });
            }

            // NewContractAddress (string) pattern
            Regex regexNewContractAddress = new Regex(@"^[a-km-zA-HJ-NP-Z1-9]+$", RegexOptions.CultureInvariant);
            if (false == regexNewContractAddress.Match(this.NewContractAddress).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NewContractAddress, must match a pattern of " + regexNewContractAddress, new [] { "NewContractAddress" });
            }

            // GasUsed (int) maximum
            if (this.GasUsed > (int)250000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GasUsed, must be a value less than or equal to 250000.", new [] { "GasUsed" });
            }

            // GasUsed (int) minimum
            if (this.GasUsed < (int)10000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GasUsed, must be a value greater than or equal to 10000.", new [] { "GasUsed" });
            }

            // From (string) maxLength
            if (this.From != null && this.From.Length > 42)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for From, length must be less than 42.", new [] { "From" });
            }

            // From (string) minLength
            if (this.From != null && this.From.Length < 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for From, length must be greater than 30.", new [] { "From" });
            }

            // From (string) pattern
            Regex regexFrom = new Regex(@"^[a-km-zA-HJ-NP-Z1-9]+$", RegexOptions.CultureInvariant);
            if (false == regexFrom.Match(this.From).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for From, must match a pattern of " + regexFrom, new [] { "From" });
            }

            // To (string) maxLength
            if (this.To != null && this.To.Length > 42)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for To, length must be less than 42.", new [] { "To" });
            }

            // To (string) minLength
            if (this.To != null && this.To.Length < 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for To, length must be greater than 30.", new [] { "To" });
            }

            // To (string) pattern
            Regex regexTo = new Regex(@"^[a-km-zA-HJ-NP-Z1-9]+$", RegexOptions.CultureInvariant);
            if (false == regexTo.Match(this.To).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for To, must match a pattern of " + regexTo, new [] { "To" });
            }

            yield break;
        }
    }

}
