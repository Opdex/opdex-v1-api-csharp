/*
 * Opdex Platform API
 *
 * The Opdex Platform Web API is an interface for querying information from the Opdex contract indexer and quoting Opdex smart contract transactions. The Opdex contract indexer is a job that continually runs and stores relevant broadcast transaction data, in a way that represents the current known state of the Opdex protocol at the present time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Opdex.Client.Client.FileParameter;
using OpenAPIDateConverter = Opdex.Client.Client.OpenAPIDateConverter;

namespace Opdex.Client.Model
{
    /// <summary>
    /// Details the estimated token output for a given swap input
    /// </summary>
    [DataContract(Name = "swapAmountOutQuoteResponse")]
    public partial class SwapAmountOutQuoteResponse : IEquatable<SwapAmountOutQuoteResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SwapAmountOutQuoteResponse" /> class.
        /// </summary>
        /// <param name="amountOut">Decimal value with uncapped precision and size.</param>
        public SwapAmountOutQuoteResponse(string amountOut = default(string))
        {
            this.AmountOut = amountOut;
        }

        /// <summary>
        /// Decimal value with uncapped precision and size
        /// </summary>
        /// <value>Decimal value with uncapped precision and size</value>
        [DataMember(Name = "amountOut", EmitDefaultValue = false)]
        public string AmountOut { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SwapAmountOutQuoteResponse {\n");
            sb.Append("  AmountOut: ").Append(AmountOut).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SwapAmountOutQuoteResponse);
        }

        /// <summary>
        /// Returns true if SwapAmountOutQuoteResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of SwapAmountOutQuoteResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SwapAmountOutQuoteResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AmountOut == input.AmountOut ||
                    (this.AmountOut != null &&
                    this.AmountOut.Equals(input.AmountOut))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AmountOut != null)
                {
                    hashCode = (hashCode * 59) + this.AmountOut.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // AmountOut (string) pattern
            Regex regexAmountOut = new Regex(@"^\\d*\\.\\d{1,18}$", RegexOptions.CultureInvariant);
            if (false == regexAmountOut.Match(this.AmountOut).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AmountOut, must match a pattern of " + regexAmountOut, new [] { "AmountOut" });
            }

            yield break;
        }
    }

}
