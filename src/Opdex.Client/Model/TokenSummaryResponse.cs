/*
 * Opdex Platform API
 *
 * The Opdex Platform Web API is an interface for querying information from the Opdex contract indexer and quoting Opdex smart contract transactions. The Opdex contract indexer is a job that continually runs and stores relevant broadcast transaction data, in a way that represents the current known state of the Opdex protocol at the present time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Opdex.Client.Client.OpenAPIDateConverter;

namespace Opdex.Client.Model
{
    /// <summary>
    /// Point in time pricing summary for a token
    /// </summary>
    [DataContract(Name = "tokenSummaryResponse")]
    public partial class TokenSummaryResponse : IEquatable<TokenSummaryResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TokenSummaryResponse" /> class.
        /// </summary>
        /// <param name="priceUsd">USD token price.</param>
        /// <param name="dailyPriceChangePercent">Price change percentage for the current day, reset at 00:00 UTC.</param>
        /// <param name="modifiedBlock">Block number at which price was last updated.</param>
        public TokenSummaryResponse(decimal priceUsd = default(decimal), decimal dailyPriceChangePercent = default(decimal), int modifiedBlock = default(int))
        {
            this.PriceUsd = priceUsd;
            this.DailyPriceChangePercent = dailyPriceChangePercent;
            this.ModifiedBlock = modifiedBlock;
        }

        /// <summary>
        /// USD token price
        /// </summary>
        /// <value>USD token price</value>
        [DataMember(Name = "priceUsd", EmitDefaultValue = false)]
        public decimal PriceUsd { get; set; }

        /// <summary>
        /// Price change percentage for the current day, reset at 00:00 UTC
        /// </summary>
        /// <value>Price change percentage for the current day, reset at 00:00 UTC</value>
        [DataMember(Name = "dailyPriceChangePercent", EmitDefaultValue = false)]
        public decimal DailyPriceChangePercent { get; set; }

        /// <summary>
        /// Block number at which price was last updated
        /// </summary>
        /// <value>Block number at which price was last updated</value>
        [DataMember(Name = "modifiedBlock", EmitDefaultValue = false)]
        public int ModifiedBlock { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TokenSummaryResponse {\n");
            sb.Append("  PriceUsd: ").Append(PriceUsd).Append("\n");
            sb.Append("  DailyPriceChangePercent: ").Append(DailyPriceChangePercent).Append("\n");
            sb.Append("  ModifiedBlock: ").Append(ModifiedBlock).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TokenSummaryResponse);
        }

        /// <summary>
        /// Returns true if TokenSummaryResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of TokenSummaryResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TokenSummaryResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PriceUsd == input.PriceUsd ||
                    this.PriceUsd.Equals(input.PriceUsd)
                ) && 
                (
                    this.DailyPriceChangePercent == input.DailyPriceChangePercent ||
                    this.DailyPriceChangePercent.Equals(input.DailyPriceChangePercent)
                ) && 
                (
                    this.ModifiedBlock == input.ModifiedBlock ||
                    this.ModifiedBlock.Equals(input.ModifiedBlock)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.PriceUsd.GetHashCode();
                hashCode = (hashCode * 59) + this.DailyPriceChangePercent.GetHashCode();
                hashCode = (hashCode * 59) + this.ModifiedBlock.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // PriceUsd (decimal) minimum
            if (this.PriceUsd < (decimal)0.0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PriceUsd, must be a value greater than or equal to 0.0.", new [] { "PriceUsd" });
            }

            // DailyPriceChangePercent (decimal) minimum
            if (this.DailyPriceChangePercent < (decimal)-100.0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DailyPriceChangePercent, must be a value greater than or equal to -100.0.", new [] { "DailyPriceChangePercent" });
            }

            // ModifiedBlock (int) minimum
            if (this.ModifiedBlock < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ModifiedBlock, must be a value greater than or equal to 1.", new [] { "ModifiedBlock" });
            }

            yield break;
        }
    }

}
