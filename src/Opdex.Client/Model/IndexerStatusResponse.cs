/*
 * Opdex Platform API
 *
 * The Opdex Platform Web API is an interface for querying information from the Opdex contract indexer and quoting Opdex smart contract transactions. The Opdex contract indexer is a job that continually runs and stores relevant broadcast transaction data, in a way that represents the current known state of the Opdex protocol at the present time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Opdex.Client.Client.FileParameter;
using OpenAPIDateConverter = Opdex.Client.Client.OpenAPIDateConverter;

namespace Opdex.Client.Model
{
    /// <summary>
    /// Status of the Opdex transaction indexer
    /// </summary>
    [DataContract(Name = "indexerStatusResponse")]
    public partial class IndexerStatusResponse : IEquatable<IndexerStatusResponse>, IValidatableObject
    {
        /// <summary>
        /// Reason that the indexer process is currently running
        /// </summary>
        /// <value>Reason that the indexer process is currently running</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ReasonEnum
        {
            /// <summary>
            /// Enum Deploying for value: Deploying
            /// </summary>
            [EnumMember(Value = "Deploying")]
            Deploying = 1,

            /// <summary>
            /// Enum Indexing for value: Indexing
            /// </summary>
            [EnumMember(Value = "Indexing")]
            Indexing = 2,

            /// <summary>
            /// Enum Rewinding for value: Rewinding
            /// </summary>
            [EnumMember(Value = "Rewinding")]
            Rewinding = 3

        }


        /// <summary>
        /// Reason that the indexer process is currently running
        /// </summary>
        /// <value>Reason that the indexer process is currently running</value>
        [DataMember(Name = "reason", EmitDefaultValue = false)]
        public ReasonEnum? Reason { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="IndexerStatusResponse" /> class.
        /// </summary>
        /// <param name="latestBlock">latestBlock.</param>
        /// <param name="available">True if the indexer process is active, otherwise false.</param>
        /// <param name="locked">True if the indexer process is currently running, otherwise false.</param>
        /// <param name="instanceId">Unique identifier for the API instance that locked the indexer.</param>
        /// <param name="reason">Reason that the indexer process is currently running.</param>
        /// <param name="modifiedDate">When the indexer status last changed.</param>
        public IndexerStatusResponse(BlockResponse latestBlock = default(BlockResponse), bool available = default(bool), bool locked = default(bool), string instanceId = default(string), ReasonEnum? reason = default(ReasonEnum?), DateTime modifiedDate = default(DateTime))
        {
            this.LatestBlock = latestBlock;
            this.Available = available;
            this.Locked = locked;
            this.InstanceId = instanceId;
            this.Reason = reason;
            this.ModifiedDate = modifiedDate;
        }

        /// <summary>
        /// Gets or Sets LatestBlock
        /// </summary>
        [DataMember(Name = "latestBlock", EmitDefaultValue = false)]
        public BlockResponse LatestBlock { get; set; }

        /// <summary>
        /// True if the indexer process is active, otherwise false
        /// </summary>
        /// <value>True if the indexer process is active, otherwise false</value>
        [DataMember(Name = "available", EmitDefaultValue = true)]
        public bool Available { get; set; }

        /// <summary>
        /// True if the indexer process is currently running, otherwise false
        /// </summary>
        /// <value>True if the indexer process is currently running, otherwise false</value>
        [DataMember(Name = "locked", EmitDefaultValue = true)]
        public bool Locked { get; set; }

        /// <summary>
        /// Unique identifier for the API instance that locked the indexer
        /// </summary>
        /// <value>Unique identifier for the API instance that locked the indexer</value>
        [DataMember(Name = "instanceId", EmitDefaultValue = false)]
        public string InstanceId { get; set; }

        /// <summary>
        /// When the indexer status last changed
        /// </summary>
        /// <value>When the indexer status last changed</value>
        [DataMember(Name = "modifiedDate", EmitDefaultValue = false)]
        public DateTime ModifiedDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IndexerStatusResponse {\n");
            sb.Append("  LatestBlock: ").Append(LatestBlock).Append("\n");
            sb.Append("  Available: ").Append(Available).Append("\n");
            sb.Append("  Locked: ").Append(Locked).Append("\n");
            sb.Append("  InstanceId: ").Append(InstanceId).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  ModifiedDate: ").Append(ModifiedDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IndexerStatusResponse);
        }

        /// <summary>
        /// Returns true if IndexerStatusResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of IndexerStatusResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IndexerStatusResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.LatestBlock == input.LatestBlock ||
                    (this.LatestBlock != null &&
                    this.LatestBlock.Equals(input.LatestBlock))
                ) && 
                (
                    this.Available == input.Available ||
                    this.Available.Equals(input.Available)
                ) && 
                (
                    this.Locked == input.Locked ||
                    this.Locked.Equals(input.Locked)
                ) && 
                (
                    this.InstanceId == input.InstanceId ||
                    (this.InstanceId != null &&
                    this.InstanceId.Equals(input.InstanceId))
                ) && 
                (
                    this.Reason == input.Reason ||
                    this.Reason.Equals(input.Reason)
                ) && 
                (
                    this.ModifiedDate == input.ModifiedDate ||
                    (this.ModifiedDate != null &&
                    this.ModifiedDate.Equals(input.ModifiedDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LatestBlock != null)
                {
                    hashCode = (hashCode * 59) + this.LatestBlock.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Available.GetHashCode();
                hashCode = (hashCode * 59) + this.Locked.GetHashCode();
                if (this.InstanceId != null)
                {
                    hashCode = (hashCode * 59) + this.InstanceId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Reason.GetHashCode();
                if (this.ModifiedDate != null)
                {
                    hashCode = (hashCode * 59) + this.ModifiedDate.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
