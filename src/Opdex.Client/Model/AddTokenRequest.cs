/*
 * Opdex Platform API
 *
 * The Opdex Platform Web API is an interface for querying information from the Opdex contract indexer and quoting Opdex smart contract transactions. The Opdex contract indexer is a job that continually runs and stores relevant broadcast transaction data, in a way that represents the current known state of the Opdex protocol at the present time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Opdex.Client.Client.OpenAPIDateConverter;

namespace Opdex.Client.Model
{
    /// <summary>
    /// Request to add a token to the Opdex indexer so that it can be tracked
    /// </summary>
    [DataContract(Name = "addTokenRequest")]
    public partial class AddTokenRequest : IEquatable<AddTokenRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddTokenRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AddTokenRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AddTokenRequest" /> class.
        /// </summary>
        /// <param name="tokenAddress">An address on the Cirrus network (required).</param>
        public AddTokenRequest(string tokenAddress = default(string))
        {
            // to ensure "tokenAddress" is required (not null)
            if (tokenAddress == null) {
                throw new ArgumentNullException("tokenAddress is a required property for AddTokenRequest and cannot be null");
            }
            this.TokenAddress = tokenAddress;
        }

        /// <summary>
        /// An address on the Cirrus network
        /// </summary>
        /// <value>An address on the Cirrus network</value>
        [DataMember(Name = "tokenAddress", IsRequired = true, EmitDefaultValue = false)]
        public string TokenAddress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AddTokenRequest {\n");
            sb.Append("  TokenAddress: ").Append(TokenAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AddTokenRequest);
        }

        /// <summary>
        /// Returns true if AddTokenRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of AddTokenRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddTokenRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TokenAddress == input.TokenAddress ||
                    (this.TokenAddress != null &&
                    this.TokenAddress.Equals(input.TokenAddress))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TokenAddress != null)
                {
                    hashCode = (hashCode * 59) + this.TokenAddress.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // TokenAddress (string) maxLength
            if (this.TokenAddress != null && this.TokenAddress.Length > 42)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TokenAddress, length must be less than 42.", new [] { "TokenAddress" });
            }

            // TokenAddress (string) minLength
            if (this.TokenAddress != null && this.TokenAddress.Length < 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TokenAddress, length must be greater than 30.", new [] { "TokenAddress" });
            }

            // TokenAddress (string) pattern
            Regex regexTokenAddress = new Regex(@"^[a-km-zA-HJ-NP-Z1-9]$", RegexOptions.CultureInvariant);
            if (false == regexTokenAddress.Match(this.TokenAddress).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TokenAddress, must match a pattern of " + regexTokenAddress, new [] { "TokenAddress" });
            }

            yield break;
        }
    }

}
