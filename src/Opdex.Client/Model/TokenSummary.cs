/*
 * Opdex Platform API
 *
 * The Opdex Platform Web API is an interface for querying information from the Opdex contract indexer and quoting Opdex smart contract transactions. The Opdex contract indexer is a job that continually runs and stores relevant broadcast transaction data, in a way that represents the current known state of the Opdex protocol at the present time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Opdex.Client.Client.FileParameter;
using OpenAPIDateConverter = Opdex.Client.Client.OpenAPIDateConverter;

namespace Opdex.Client.Model
{
    /// <summary>
    /// Point in time pricing summary for a token
    /// </summary>
    [DataContract(Name = "tokenSummary")]
    public partial class TokenSummary : IEquatable<TokenSummary>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TokenSummary" /> class.
        /// </summary>
        /// <param name="priceUsd">Decimal value with uncapped precision and size.</param>
        /// <param name="dailyPriceChangePercent">Decimal value with uncapped precision and size.</param>
        /// <param name="createdBlock">Block number at which price was created.</param>
        /// <param name="modifiedBlock">Block number at which price was last updated.</param>
        public TokenSummary(string priceUsd = default(string), string dailyPriceChangePercent = default(string), int createdBlock = default(int), int modifiedBlock = default(int))
        {
            this.PriceUsd = priceUsd;
            this.DailyPriceChangePercent = dailyPriceChangePercent;
            this.CreatedBlock = createdBlock;
            this.ModifiedBlock = modifiedBlock;
        }

        /// <summary>
        /// Decimal value with uncapped precision and size
        /// </summary>
        /// <value>Decimal value with uncapped precision and size</value>
        [DataMember(Name = "priceUsd", EmitDefaultValue = false)]
        public string PriceUsd { get; set; }

        /// <summary>
        /// Decimal value with uncapped precision and size
        /// </summary>
        /// <value>Decimal value with uncapped precision and size</value>
        [DataMember(Name = "dailyPriceChangePercent", EmitDefaultValue = false)]
        public string DailyPriceChangePercent { get; set; }

        /// <summary>
        /// Block number at which price was created
        /// </summary>
        /// <value>Block number at which price was created</value>
        [DataMember(Name = "createdBlock", EmitDefaultValue = false)]
        public int CreatedBlock { get; set; }

        /// <summary>
        /// Block number at which price was last updated
        /// </summary>
        /// <value>Block number at which price was last updated</value>
        [DataMember(Name = "modifiedBlock", EmitDefaultValue = false)]
        public int ModifiedBlock { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TokenSummary {\n");
            sb.Append("  PriceUsd: ").Append(PriceUsd).Append("\n");
            sb.Append("  DailyPriceChangePercent: ").Append(DailyPriceChangePercent).Append("\n");
            sb.Append("  CreatedBlock: ").Append(CreatedBlock).Append("\n");
            sb.Append("  ModifiedBlock: ").Append(ModifiedBlock).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TokenSummary);
        }

        /// <summary>
        /// Returns true if TokenSummary instances are equal
        /// </summary>
        /// <param name="input">Instance of TokenSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TokenSummary input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PriceUsd == input.PriceUsd ||
                    (this.PriceUsd != null &&
                    this.PriceUsd.Equals(input.PriceUsd))
                ) && 
                (
                    this.DailyPriceChangePercent == input.DailyPriceChangePercent ||
                    (this.DailyPriceChangePercent != null &&
                    this.DailyPriceChangePercent.Equals(input.DailyPriceChangePercent))
                ) && 
                (
                    this.CreatedBlock == input.CreatedBlock ||
                    this.CreatedBlock.Equals(input.CreatedBlock)
                ) && 
                (
                    this.ModifiedBlock == input.ModifiedBlock ||
                    this.ModifiedBlock.Equals(input.ModifiedBlock)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PriceUsd != null)
                {
                    hashCode = (hashCode * 59) + this.PriceUsd.GetHashCode();
                }
                if (this.DailyPriceChangePercent != null)
                {
                    hashCode = (hashCode * 59) + this.DailyPriceChangePercent.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CreatedBlock.GetHashCode();
                hashCode = (hashCode * 59) + this.ModifiedBlock.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // PriceUsd (string) pattern
            Regex regexPriceUsd = new Regex(@"^\\d*\\.\\d{1,18}$", RegexOptions.CultureInvariant);
            if (false == regexPriceUsd.Match(this.PriceUsd).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PriceUsd, must match a pattern of " + regexPriceUsd, new [] { "PriceUsd" });
            }

            // DailyPriceChangePercent (string) pattern
            Regex regexDailyPriceChangePercent = new Regex(@"^\\d*\\.\\d{1,18}$", RegexOptions.CultureInvariant);
            if (false == regexDailyPriceChangePercent.Match(this.DailyPriceChangePercent).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DailyPriceChangePercent, must match a pattern of " + regexDailyPriceChangePercent, new [] { "DailyPriceChangePercent" });
            }

            // CreatedBlock (int) minimum
            if (this.CreatedBlock < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CreatedBlock, must be a value greater than or equal to 1.", new [] { "CreatedBlock" });
            }

            // ModifiedBlock (int) minimum
            if (this.ModifiedBlock < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ModifiedBlock, must be a value greater than or equal to 1.", new [] { "ModifiedBlock" });
            }

            yield break;
        }
    }

}
