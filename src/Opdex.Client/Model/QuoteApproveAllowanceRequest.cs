/*
 * Opdex Platform API
 *
 * The Opdex Platform Web API is an interface for querying information from the Opdex contract indexer and quoting Opdex smart contract transactions. The Opdex contract indexer is a job that continually runs and stores relevant broadcast transaction data, in a way that represents the current known state of the Opdex protocol at the present time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Opdex.Client.Client.OpenAPIDateConverter;

namespace Opdex.Client.Model
{
    /// <summary>
    /// Request to retrieve a approve allowance call quote
    /// </summary>
    [DataContract(Name = "quoteApproveAllowanceRequest")]
    public partial class QuoteApproveAllowanceRequest : IEquatable<QuoteApproveAllowanceRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QuoteApproveAllowanceRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected QuoteApproveAllowanceRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="QuoteApproveAllowanceRequest" /> class.
        /// </summary>
        /// <param name="amount">Decimal value with uncapped precision and size (required).</param>
        /// <param name="spender">An address on the Cirrus network (required).</param>
        public QuoteApproveAllowanceRequest(string amount = default(string), string spender = default(string))
        {
            // to ensure "amount" is required (not null)
            if (amount == null) {
                throw new ArgumentNullException("amount is a required property for QuoteApproveAllowanceRequest and cannot be null");
            }
            this.Amount = amount;
            // to ensure "spender" is required (not null)
            if (spender == null) {
                throw new ArgumentNullException("spender is a required property for QuoteApproveAllowanceRequest and cannot be null");
            }
            this.Spender = spender;
        }

        /// <summary>
        /// Decimal value with uncapped precision and size
        /// </summary>
        /// <value>Decimal value with uncapped precision and size</value>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = false)]
        public string Amount { get; set; }

        /// <summary>
        /// An address on the Cirrus network
        /// </summary>
        /// <value>An address on the Cirrus network</value>
        [DataMember(Name = "spender", IsRequired = true, EmitDefaultValue = false)]
        public string Spender { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class QuoteApproveAllowanceRequest {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Spender: ").Append(Spender).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QuoteApproveAllowanceRequest);
        }

        /// <summary>
        /// Returns true if QuoteApproveAllowanceRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of QuoteApproveAllowanceRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QuoteApproveAllowanceRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Spender == input.Spender ||
                    (this.Spender != null &&
                    this.Spender.Equals(input.Spender))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Amount != null)
                {
                    hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                }
                if (this.Spender != null)
                {
                    hashCode = (hashCode * 59) + this.Spender.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Amount (string) pattern
            Regex regexAmount = new Regex(@"^\\d*\\.\\d{1,18}$", RegexOptions.CultureInvariant);
            if (false == regexAmount.Match(this.Amount).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Amount, must match a pattern of " + regexAmount, new [] { "Amount" });
            }

            // Spender (string) maxLength
            if (this.Spender != null && this.Spender.Length > 42)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Spender, length must be less than 42.", new [] { "Spender" });
            }

            // Spender (string) minLength
            if (this.Spender != null && this.Spender.Length < 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Spender, length must be greater than 30.", new [] { "Spender" });
            }

            // Spender (string) pattern
            Regex regexSpender = new Regex(@"^[a-km-zA-HJ-NP-Z1-9]$", RegexOptions.CultureInvariant);
            if (false == regexSpender.Match(this.Spender).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Spender, must match a pattern of " + regexSpender, new [] { "Spender" });
            }

            yield break;
        }
    }

}
