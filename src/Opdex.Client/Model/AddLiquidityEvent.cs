/*
 * Opdex Platform API
 *
 * The Opdex Platform Web API is an interface for querying information from the Opdex contract indexer and quoting Opdex smart contract transactions. The Opdex contract indexer is a job that continually runs and stores relevant broadcast transaction data, in a way that represents the current known state of the Opdex protocol at the present time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Opdex.Client.Client.FileParameter;
using OpenAPIDateConverter = Opdex.Client.Client.OpenAPIDateConverter;

namespace Opdex.Client.Model
{
    /// <summary>
    /// Indicates liquidity was provided to a pool
    /// </summary>
    [DataContract(Name = "addLiquidityEvent")]
    public partial class AddLiquidityEvent : IEquatable<AddLiquidityEvent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddLiquidityEvent" /> class.
        /// </summary>
        /// <param name="amountCrs">Decimal value with uncapped precision and size.</param>
        /// <param name="amountSrc">Decimal value with uncapped precision and size.</param>
        /// <param name="amountLpt">Decimal value with uncapped precision and size.</param>
        /// <param name="tokenSrc">An address on the Cirrus network.</param>
        /// <param name="tokenLp">An address on the Cirrus network.</param>
        /// <param name="tokenLpTotalSupply">Decimal value with uncapped precision and size.</param>
        /// <param name="eventType">eventType.</param>
        /// <param name="contract">An address on the Cirrus network.</param>
        /// <param name="sortOrder">Index to sort event order.</param>
        public AddLiquidityEvent(string amountCrs = default(string), string amountSrc = default(string), string amountLpt = default(string), string tokenSrc = default(string), string tokenLp = default(string), string tokenLpTotalSupply = default(string), TransactionEventType eventType = default(TransactionEventType), string contract = default(string), int sortOrder = default(int))
        {
            this.AmountCrs = amountCrs;
            this.AmountSrc = amountSrc;
            this.AmountLpt = amountLpt;
            this.TokenSrc = tokenSrc;
            this.TokenLp = tokenLp;
            this.TokenLpTotalSupply = tokenLpTotalSupply;
            this.EventType = eventType;
            this.Contract = contract;
            this.SortOrder = sortOrder;
        }

        /// <summary>
        /// Decimal value with uncapped precision and size
        /// </summary>
        /// <value>Decimal value with uncapped precision and size</value>
        [DataMember(Name = "amountCrs", EmitDefaultValue = false)]
        public string AmountCrs { get; set; }

        /// <summary>
        /// Decimal value with uncapped precision and size
        /// </summary>
        /// <value>Decimal value with uncapped precision and size</value>
        [DataMember(Name = "amountSrc", EmitDefaultValue = false)]
        public string AmountSrc { get; set; }

        /// <summary>
        /// Decimal value with uncapped precision and size
        /// </summary>
        /// <value>Decimal value with uncapped precision and size</value>
        [DataMember(Name = "amountLpt", EmitDefaultValue = false)]
        public string AmountLpt { get; set; }

        /// <summary>
        /// An address on the Cirrus network
        /// </summary>
        /// <value>An address on the Cirrus network</value>
        [DataMember(Name = "tokenSrc", EmitDefaultValue = false)]
        public string TokenSrc { get; set; }

        /// <summary>
        /// An address on the Cirrus network
        /// </summary>
        /// <value>An address on the Cirrus network</value>
        [DataMember(Name = "tokenLp", EmitDefaultValue = false)]
        public string TokenLp { get; set; }

        /// <summary>
        /// Decimal value with uncapped precision and size
        /// </summary>
        /// <value>Decimal value with uncapped precision and size</value>
        [DataMember(Name = "tokenLpTotalSupply", EmitDefaultValue = false)]
        public string TokenLpTotalSupply { get; set; }

        /// <summary>
        /// Gets or Sets EventType
        /// </summary>
        [DataMember(Name = "eventType", EmitDefaultValue = false)]
        public TransactionEventType EventType { get; set; }

        /// <summary>
        /// An address on the Cirrus network
        /// </summary>
        /// <value>An address on the Cirrus network</value>
        [DataMember(Name = "contract", EmitDefaultValue = false)]
        public string Contract { get; set; }

        /// <summary>
        /// Index to sort event order
        /// </summary>
        /// <value>Index to sort event order</value>
        [DataMember(Name = "sortOrder", EmitDefaultValue = false)]
        public int SortOrder { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AddLiquidityEvent {\n");
            sb.Append("  AmountCrs: ").Append(AmountCrs).Append("\n");
            sb.Append("  AmountSrc: ").Append(AmountSrc).Append("\n");
            sb.Append("  AmountLpt: ").Append(AmountLpt).Append("\n");
            sb.Append("  TokenSrc: ").Append(TokenSrc).Append("\n");
            sb.Append("  TokenLp: ").Append(TokenLp).Append("\n");
            sb.Append("  TokenLpTotalSupply: ").Append(TokenLpTotalSupply).Append("\n");
            sb.Append("  EventType: ").Append(EventType).Append("\n");
            sb.Append("  Contract: ").Append(Contract).Append("\n");
            sb.Append("  SortOrder: ").Append(SortOrder).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AddLiquidityEvent);
        }

        /// <summary>
        /// Returns true if AddLiquidityEvent instances are equal
        /// </summary>
        /// <param name="input">Instance of AddLiquidityEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddLiquidityEvent input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AmountCrs == input.AmountCrs ||
                    (this.AmountCrs != null &&
                    this.AmountCrs.Equals(input.AmountCrs))
                ) && 
                (
                    this.AmountSrc == input.AmountSrc ||
                    (this.AmountSrc != null &&
                    this.AmountSrc.Equals(input.AmountSrc))
                ) && 
                (
                    this.AmountLpt == input.AmountLpt ||
                    (this.AmountLpt != null &&
                    this.AmountLpt.Equals(input.AmountLpt))
                ) && 
                (
                    this.TokenSrc == input.TokenSrc ||
                    (this.TokenSrc != null &&
                    this.TokenSrc.Equals(input.TokenSrc))
                ) && 
                (
                    this.TokenLp == input.TokenLp ||
                    (this.TokenLp != null &&
                    this.TokenLp.Equals(input.TokenLp))
                ) && 
                (
                    this.TokenLpTotalSupply == input.TokenLpTotalSupply ||
                    (this.TokenLpTotalSupply != null &&
                    this.TokenLpTotalSupply.Equals(input.TokenLpTotalSupply))
                ) && 
                (
                    this.EventType == input.EventType ||
                    (this.EventType != null &&
                    this.EventType.Equals(input.EventType))
                ) && 
                (
                    this.Contract == input.Contract ||
                    (this.Contract != null &&
                    this.Contract.Equals(input.Contract))
                ) && 
                (
                    this.SortOrder == input.SortOrder ||
                    this.SortOrder.Equals(input.SortOrder)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AmountCrs != null)
                {
                    hashCode = (hashCode * 59) + this.AmountCrs.GetHashCode();
                }
                if (this.AmountSrc != null)
                {
                    hashCode = (hashCode * 59) + this.AmountSrc.GetHashCode();
                }
                if (this.AmountLpt != null)
                {
                    hashCode = (hashCode * 59) + this.AmountLpt.GetHashCode();
                }
                if (this.TokenSrc != null)
                {
                    hashCode = (hashCode * 59) + this.TokenSrc.GetHashCode();
                }
                if (this.TokenLp != null)
                {
                    hashCode = (hashCode * 59) + this.TokenLp.GetHashCode();
                }
                if (this.TokenLpTotalSupply != null)
                {
                    hashCode = (hashCode * 59) + this.TokenLpTotalSupply.GetHashCode();
                }
                if (this.EventType != null)
                {
                    hashCode = (hashCode * 59) + this.EventType.GetHashCode();
                }
                if (this.Contract != null)
                {
                    hashCode = (hashCode * 59) + this.Contract.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SortOrder.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // AmountCrs (string) pattern
            Regex regexAmountCrs = new Regex(@"^\\d*\\.\\d{1,18}$", RegexOptions.CultureInvariant);
            if (false == regexAmountCrs.Match(this.AmountCrs).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AmountCrs, must match a pattern of " + regexAmountCrs, new [] { "AmountCrs" });
            }

            // AmountSrc (string) pattern
            Regex regexAmountSrc = new Regex(@"^\\d*\\.\\d{1,18}$", RegexOptions.CultureInvariant);
            if (false == regexAmountSrc.Match(this.AmountSrc).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AmountSrc, must match a pattern of " + regexAmountSrc, new [] { "AmountSrc" });
            }

            // AmountLpt (string) pattern
            Regex regexAmountLpt = new Regex(@"^\\d*\\.\\d{1,18}$", RegexOptions.CultureInvariant);
            if (false == regexAmountLpt.Match(this.AmountLpt).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AmountLpt, must match a pattern of " + regexAmountLpt, new [] { "AmountLpt" });
            }

            // TokenSrc (string) maxLength
            if (this.TokenSrc != null && this.TokenSrc.Length > 42)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TokenSrc, length must be less than 42.", new [] { "TokenSrc" });
            }

            // TokenSrc (string) minLength
            if (this.TokenSrc != null && this.TokenSrc.Length < 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TokenSrc, length must be greater than 30.", new [] { "TokenSrc" });
            }

            // TokenSrc (string) pattern
            Regex regexTokenSrc = new Regex(@"^[a-km-zA-HJ-NP-Z1-9]+$", RegexOptions.CultureInvariant);
            if (false == regexTokenSrc.Match(this.TokenSrc).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TokenSrc, must match a pattern of " + regexTokenSrc, new [] { "TokenSrc" });
            }

            // TokenLp (string) maxLength
            if (this.TokenLp != null && this.TokenLp.Length > 42)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TokenLp, length must be less than 42.", new [] { "TokenLp" });
            }

            // TokenLp (string) minLength
            if (this.TokenLp != null && this.TokenLp.Length < 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TokenLp, length must be greater than 30.", new [] { "TokenLp" });
            }

            // TokenLp (string) pattern
            Regex regexTokenLp = new Regex(@"^[a-km-zA-HJ-NP-Z1-9]+$", RegexOptions.CultureInvariant);
            if (false == regexTokenLp.Match(this.TokenLp).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TokenLp, must match a pattern of " + regexTokenLp, new [] { "TokenLp" });
            }

            // TokenLpTotalSupply (string) pattern
            Regex regexTokenLpTotalSupply = new Regex(@"^\\d*\\.\\d{1,18}$", RegexOptions.CultureInvariant);
            if (false == regexTokenLpTotalSupply.Match(this.TokenLpTotalSupply).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TokenLpTotalSupply, must match a pattern of " + regexTokenLpTotalSupply, new [] { "TokenLpTotalSupply" });
            }

            // Contract (string) maxLength
            if (this.Contract != null && this.Contract.Length > 42)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Contract, length must be less than 42.", new [] { "Contract" });
            }

            // Contract (string) minLength
            if (this.Contract != null && this.Contract.Length < 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Contract, length must be greater than 30.", new [] { "Contract" });
            }

            // Contract (string) pattern
            Regex regexContract = new Regex(@"^[a-km-zA-HJ-NP-Z1-9]+$", RegexOptions.CultureInvariant);
            if (false == regexContract.Match(this.Contract).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Contract, must match a pattern of " + regexContract, new [] { "Contract" });
            }

            // SortOrder (int) minimum
            if (this.SortOrder < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SortOrder, must be a value greater than or equal to 0.", new [] { "SortOrder" });
            }

            yield break;
        }
    }

}
