/*
 * Opdex Platform API
 *
 * The Opdex Platform Web API is an interface for querying information from the Opdex contract indexer and quoting Opdex smart contract transactions. The Opdex contract indexer is a job that continually runs and stores relevant broadcast transaction data, in a way that represents the current known state of the Opdex protocol at the present time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Opdex.Client.Client.FileParameter;
using OpenAPIDateConverter = Opdex.Client.Client.OpenAPIDateConverter;

namespace Opdex.Client.Model
{
    /// <summary>
    /// Details of tokens that are tied to a market
    /// </summary>
    [DataContract(Name = "marketTokenBreakdown")]
    public partial class MarketTokenBreakdown : IEquatable<MarketTokenBreakdown>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MarketTokenBreakdown" /> class.
        /// </summary>
        /// <param name="crs">crs.</param>
        /// <param name="staking">staking.</param>
        public MarketTokenBreakdown(TokenResponse crs = default(TokenResponse), TokenResponse staking = default(TokenResponse))
        {
            this.Crs = crs;
            this.Staking = staking;
        }

        /// <summary>
        /// Gets or Sets Crs
        /// </summary>
        [DataMember(Name = "crs", EmitDefaultValue = false)]
        public TokenResponse Crs { get; set; }

        /// <summary>
        /// Gets or Sets Staking
        /// </summary>
        [DataMember(Name = "staking", EmitDefaultValue = false)]
        public TokenResponse Staking { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MarketTokenBreakdown {\n");
            sb.Append("  Crs: ").Append(Crs).Append("\n");
            sb.Append("  Staking: ").Append(Staking).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MarketTokenBreakdown);
        }

        /// <summary>
        /// Returns true if MarketTokenBreakdown instances are equal
        /// </summary>
        /// <param name="input">Instance of MarketTokenBreakdown to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MarketTokenBreakdown input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Crs == input.Crs ||
                    (this.Crs != null &&
                    this.Crs.Equals(input.Crs))
                ) && 
                (
                    this.Staking == input.Staking ||
                    (this.Staking != null &&
                    this.Staking.Equals(input.Staking))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Crs != null)
                {
                    hashCode = (hashCode * 59) + this.Crs.GetHashCode();
                }
                if (this.Staking != null)
                {
                    hashCode = (hashCode * 59) + this.Staking.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
