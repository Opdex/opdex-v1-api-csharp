/*
 * Opdex Platform API
 *
 * The Opdex Platform Web API is an interface for querying information from the Opdex contract indexer and quoting Opdex smart contract transactions. The Opdex contract indexer is a job that continually runs and stores relevant broadcast transaction data, in a way that represents the current known state of the Opdex protocol at the present time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Opdex.Client.Client.FileParameter;
using OpenAPIDateConverter = Opdex.Client.Client.OpenAPIDateConverter;

namespace Opdex.Client.Model
{
    /// <summary>
    /// VoteResponse
    /// </summary>
    [DataContract(Name = "voteResponse")]
    public partial class VoteResponse : IEquatable<VoteResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VoteResponse" /> class.
        /// </summary>
        /// <param name="vault">An address on the Cirrus network.</param>
        /// <param name="proposalId">Id of the proposal stored by the vault.</param>
        /// <param name="voter">An address on the Cirrus network.</param>
        /// <param name="vote">Decimal value with uncapped precision and size.</param>
        /// <param name="balance">Decimal value with uncapped precision and size.</param>
        /// <param name="inFavor">Whether the vote is in favor of the proposal.</param>
        public VoteResponse(string vault = default(string), int proposalId = default(int), string voter = default(string), string vote = default(string), string balance = default(string), bool inFavor = default(bool))
        {
            this.Vault = vault;
            this.ProposalId = proposalId;
            this.Voter = voter;
            this.Vote = vote;
            this.Balance = balance;
            this.InFavor = inFavor;
        }

        /// <summary>
        /// An address on the Cirrus network
        /// </summary>
        /// <value>An address on the Cirrus network</value>
        [DataMember(Name = "vault", EmitDefaultValue = false)]
        public string Vault { get; set; }

        /// <summary>
        /// Id of the proposal stored by the vault
        /// </summary>
        /// <value>Id of the proposal stored by the vault</value>
        [DataMember(Name = "proposalId", EmitDefaultValue = false)]
        public int ProposalId { get; set; }

        /// <summary>
        /// An address on the Cirrus network
        /// </summary>
        /// <value>An address on the Cirrus network</value>
        [DataMember(Name = "voter", EmitDefaultValue = false)]
        public string Voter { get; set; }

        /// <summary>
        /// Decimal value with uncapped precision and size
        /// </summary>
        /// <value>Decimal value with uncapped precision and size</value>
        [DataMember(Name = "vote", EmitDefaultValue = false)]
        public string Vote { get; set; }

        /// <summary>
        /// Decimal value with uncapped precision and size
        /// </summary>
        /// <value>Decimal value with uncapped precision and size</value>
        [DataMember(Name = "balance", EmitDefaultValue = false)]
        public string Balance { get; set; }

        /// <summary>
        /// Whether the vote is in favor of the proposal
        /// </summary>
        /// <value>Whether the vote is in favor of the proposal</value>
        [DataMember(Name = "inFavor", EmitDefaultValue = true)]
        public bool InFavor { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VoteResponse {\n");
            sb.Append("  Vault: ").Append(Vault).Append("\n");
            sb.Append("  ProposalId: ").Append(ProposalId).Append("\n");
            sb.Append("  Voter: ").Append(Voter).Append("\n");
            sb.Append("  Vote: ").Append(Vote).Append("\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("  InFavor: ").Append(InFavor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VoteResponse);
        }

        /// <summary>
        /// Returns true if VoteResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of VoteResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VoteResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Vault == input.Vault ||
                    (this.Vault != null &&
                    this.Vault.Equals(input.Vault))
                ) && 
                (
                    this.ProposalId == input.ProposalId ||
                    this.ProposalId.Equals(input.ProposalId)
                ) && 
                (
                    this.Voter == input.Voter ||
                    (this.Voter != null &&
                    this.Voter.Equals(input.Voter))
                ) && 
                (
                    this.Vote == input.Vote ||
                    (this.Vote != null &&
                    this.Vote.Equals(input.Vote))
                ) && 
                (
                    this.Balance == input.Balance ||
                    (this.Balance != null &&
                    this.Balance.Equals(input.Balance))
                ) && 
                (
                    this.InFavor == input.InFavor ||
                    this.InFavor.Equals(input.InFavor)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Vault != null)
                {
                    hashCode = (hashCode * 59) + this.Vault.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ProposalId.GetHashCode();
                if (this.Voter != null)
                {
                    hashCode = (hashCode * 59) + this.Voter.GetHashCode();
                }
                if (this.Vote != null)
                {
                    hashCode = (hashCode * 59) + this.Vote.GetHashCode();
                }
                if (this.Balance != null)
                {
                    hashCode = (hashCode * 59) + this.Balance.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.InFavor.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Vault (string) maxLength
            if (this.Vault != null && this.Vault.Length > 42)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Vault, length must be less than 42.", new [] { "Vault" });
            }

            // Vault (string) minLength
            if (this.Vault != null && this.Vault.Length < 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Vault, length must be greater than 30.", new [] { "Vault" });
            }

            // Vault (string) pattern
            Regex regexVault = new Regex(@"^[a-km-zA-HJ-NP-Z1-9]$", RegexOptions.CultureInvariant);
            if (false == regexVault.Match(this.Vault).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Vault, must match a pattern of " + regexVault, new [] { "Vault" });
            }

            // ProposalId (int) minimum
            if (this.ProposalId < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProposalId, must be a value greater than or equal to 1.", new [] { "ProposalId" });
            }

            // Voter (string) maxLength
            if (this.Voter != null && this.Voter.Length > 42)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Voter, length must be less than 42.", new [] { "Voter" });
            }

            // Voter (string) minLength
            if (this.Voter != null && this.Voter.Length < 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Voter, length must be greater than 30.", new [] { "Voter" });
            }

            // Voter (string) pattern
            Regex regexVoter = new Regex(@"^[a-km-zA-HJ-NP-Z1-9]$", RegexOptions.CultureInvariant);
            if (false == regexVoter.Match(this.Voter).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Voter, must match a pattern of " + regexVoter, new [] { "Voter" });
            }

            // Vote (string) pattern
            Regex regexVote = new Regex(@"^\\d*\\.\\d{1,18}$", RegexOptions.CultureInvariant);
            if (false == regexVote.Match(this.Vote).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Vote, must match a pattern of " + regexVote, new [] { "Vote" });
            }

            // Balance (string) pattern
            Regex regexBalance = new Regex(@"^\\d*\\.\\d{1,18}$", RegexOptions.CultureInvariant);
            if (false == regexBalance.Match(this.Balance).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Balance, must match a pattern of " + regexBalance, new [] { "Balance" });
            }

            yield break;
        }
    }

}
