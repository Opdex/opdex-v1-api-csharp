/*
 * Opdex Platform API
 *
 * The Opdex Platform Web API is an interface for querying information from the Opdex contract indexer and quoting Opdex smart contract transactions. The Opdex contract indexer is a job that continually runs and stores relevant broadcast transaction data, in a way that represents the current known state of the Opdex protocol at the present time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Opdex.Client.Client.FileParameter;
using OpenAPIDateConverter = Opdex.Client.Client.OpenAPIDateConverter;

namespace Opdex.Client.Model
{
    /// <summary>
    /// LiquidityPoolResponse
    /// </summary>
    [DataContract(Name = "liquidityPoolResponse")]
    public partial class LiquidityPoolResponse : IEquatable<LiquidityPoolResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LiquidityPoolResponse" /> class.
        /// </summary>
        /// <param name="address">An address on the Cirrus network.</param>
        /// <param name="name">Name of the liquidity pool.</param>
        /// <param name="transactionFeePercent">Decimal value with uncapped precision and size.</param>
        /// <param name="market">An address on the Cirrus network.</param>
        /// <param name="miningPool">miningPool.</param>
        /// <param name="tokens">tokens.</param>
        /// <param name="createdBlock">Block number at which the entity was created.</param>
        /// <param name="modifiedBlock">Block number at which the entity state was last modified.</param>
        /// <param name="summary">summary.</param>
        public LiquidityPoolResponse(string address = default(string), string name = default(string), string transactionFeePercent = default(string), string market = default(string), MiningPoolResponse miningPool = default(MiningPoolResponse), LiquidityPoolTokenBreakdown tokens = default(LiquidityPoolTokenBreakdown), int createdBlock = default(int), int modifiedBlock = default(int), LiquidityPoolSummary summary = default(LiquidityPoolSummary))
        {
            this.Address = address;
            this.Name = name;
            this.TransactionFeePercent = transactionFeePercent;
            this.Market = market;
            this.MiningPool = miningPool;
            this.Tokens = tokens;
            this.CreatedBlock = createdBlock;
            this.ModifiedBlock = modifiedBlock;
            this.Summary = summary;
        }

        /// <summary>
        /// An address on the Cirrus network
        /// </summary>
        /// <value>An address on the Cirrus network</value>
        [DataMember(Name = "address", EmitDefaultValue = false)]
        public string Address { get; set; }

        /// <summary>
        /// Name of the liquidity pool
        /// </summary>
        /// <value>Name of the liquidity pool</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Decimal value with uncapped precision and size
        /// </summary>
        /// <value>Decimal value with uncapped precision and size</value>
        [DataMember(Name = "transactionFeePercent", EmitDefaultValue = false)]
        public string TransactionFeePercent { get; set; }

        /// <summary>
        /// An address on the Cirrus network
        /// </summary>
        /// <value>An address on the Cirrus network</value>
        [DataMember(Name = "market", EmitDefaultValue = false)]
        public string Market { get; set; }

        /// <summary>
        /// Gets or Sets MiningPool
        /// </summary>
        [DataMember(Name = "miningPool", EmitDefaultValue = false)]
        public MiningPoolResponse MiningPool { get; set; }

        /// <summary>
        /// Gets or Sets Tokens
        /// </summary>
        [DataMember(Name = "tokens", EmitDefaultValue = false)]
        public LiquidityPoolTokenBreakdown Tokens { get; set; }

        /// <summary>
        /// Block number at which the entity was created
        /// </summary>
        /// <value>Block number at which the entity was created</value>
        [DataMember(Name = "createdBlock", EmitDefaultValue = false)]
        public int CreatedBlock { get; set; }

        /// <summary>
        /// Block number at which the entity state was last modified
        /// </summary>
        /// <value>Block number at which the entity state was last modified</value>
        [DataMember(Name = "modifiedBlock", EmitDefaultValue = false)]
        public int ModifiedBlock { get; set; }

        /// <summary>
        /// Gets or Sets Summary
        /// </summary>
        [DataMember(Name = "summary", EmitDefaultValue = false)]
        public LiquidityPoolSummary Summary { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LiquidityPoolResponse {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  TransactionFeePercent: ").Append(TransactionFeePercent).Append("\n");
            sb.Append("  Market: ").Append(Market).Append("\n");
            sb.Append("  MiningPool: ").Append(MiningPool).Append("\n");
            sb.Append("  Tokens: ").Append(Tokens).Append("\n");
            sb.Append("  CreatedBlock: ").Append(CreatedBlock).Append("\n");
            sb.Append("  ModifiedBlock: ").Append(ModifiedBlock).Append("\n");
            sb.Append("  Summary: ").Append(Summary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LiquidityPoolResponse);
        }

        /// <summary>
        /// Returns true if LiquidityPoolResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of LiquidityPoolResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LiquidityPoolResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.TransactionFeePercent == input.TransactionFeePercent ||
                    (this.TransactionFeePercent != null &&
                    this.TransactionFeePercent.Equals(input.TransactionFeePercent))
                ) && 
                (
                    this.Market == input.Market ||
                    (this.Market != null &&
                    this.Market.Equals(input.Market))
                ) && 
                (
                    this.MiningPool == input.MiningPool ||
                    (this.MiningPool != null &&
                    this.MiningPool.Equals(input.MiningPool))
                ) && 
                (
                    this.Tokens == input.Tokens ||
                    (this.Tokens != null &&
                    this.Tokens.Equals(input.Tokens))
                ) && 
                (
                    this.CreatedBlock == input.CreatedBlock ||
                    this.CreatedBlock.Equals(input.CreatedBlock)
                ) && 
                (
                    this.ModifiedBlock == input.ModifiedBlock ||
                    this.ModifiedBlock.Equals(input.ModifiedBlock)
                ) && 
                (
                    this.Summary == input.Summary ||
                    (this.Summary != null &&
                    this.Summary.Equals(input.Summary))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Address != null)
                {
                    hashCode = (hashCode * 59) + this.Address.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.TransactionFeePercent != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionFeePercent.GetHashCode();
                }
                if (this.Market != null)
                {
                    hashCode = (hashCode * 59) + this.Market.GetHashCode();
                }
                if (this.MiningPool != null)
                {
                    hashCode = (hashCode * 59) + this.MiningPool.GetHashCode();
                }
                if (this.Tokens != null)
                {
                    hashCode = (hashCode * 59) + this.Tokens.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CreatedBlock.GetHashCode();
                hashCode = (hashCode * 59) + this.ModifiedBlock.GetHashCode();
                if (this.Summary != null)
                {
                    hashCode = (hashCode * 59) + this.Summary.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Address (string) maxLength
            if (this.Address != null && this.Address.Length > 42)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Address, length must be less than 42.", new [] { "Address" });
            }

            // Address (string) minLength
            if (this.Address != null && this.Address.Length < 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Address, length must be greater than 30.", new [] { "Address" });
            }

            // Address (string) pattern
            Regex regexAddress = new Regex(@"^[a-km-zA-HJ-NP-Z1-9]+$", RegexOptions.CultureInvariant);
            if (false == regexAddress.Match(this.Address).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Address, must match a pattern of " + regexAddress, new [] { "Address" });
            }

            // TransactionFeePercent (string) pattern
            Regex regexTransactionFeePercent = new Regex(@"^\\d*\\.\\d{1,18}$", RegexOptions.CultureInvariant);
            if (false == regexTransactionFeePercent.Match(this.TransactionFeePercent).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransactionFeePercent, must match a pattern of " + regexTransactionFeePercent, new [] { "TransactionFeePercent" });
            }

            // Market (string) maxLength
            if (this.Market != null && this.Market.Length > 42)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Market, length must be less than 42.", new [] { "Market" });
            }

            // Market (string) minLength
            if (this.Market != null && this.Market.Length < 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Market, length must be greater than 30.", new [] { "Market" });
            }

            // Market (string) pattern
            Regex regexMarket = new Regex(@"^[a-km-zA-HJ-NP-Z1-9]+$", RegexOptions.CultureInvariant);
            if (false == regexMarket.Match(this.Market).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Market, must match a pattern of " + regexMarket, new [] { "Market" });
            }

            // CreatedBlock (int) minimum
            if (this.CreatedBlock < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CreatedBlock, must be a value greater than or equal to 1.", new [] { "CreatedBlock" });
            }

            // ModifiedBlock (int) minimum
            if (this.ModifiedBlock < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ModifiedBlock, must be a value greater than or equal to 1.", new [] { "ModifiedBlock" });
            }

            yield break;
        }
    }

}
