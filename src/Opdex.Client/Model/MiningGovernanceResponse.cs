/*
 * Opdex Platform API
 *
 * The Opdex Platform Web API is an interface for querying information from the Opdex contract indexer and quoting Opdex smart contract transactions. The Opdex contract indexer is a job that continually runs and stores relevant broadcast transaction data, in a way that represents the current known state of the Opdex protocol at the present time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Opdex.Client.Client.FileParameter;
using OpenAPIDateConverter = Opdex.Client.Client.OpenAPIDateConverter;

namespace Opdex.Client.Model
{
    /// <summary>
    /// Details state of liquidity mining governance
    /// </summary>
    [DataContract(Name = "miningGovernanceResponse")]
    public partial class MiningGovernanceResponse : IEquatable<MiningGovernanceResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MiningGovernanceResponse" /> class.
        /// </summary>
        /// <param name="address">An address on the Cirrus network.</param>
        /// <param name="periodEndBlock">Block number at which the current mining period ends.</param>
        /// <param name="periodRemainingBlocks">Number of blocks left for the current mining period.</param>
        /// <param name="periodBlockDuration">Number of blocks in a full mining period.</param>
        /// <param name="periodsUntilRewardReset">Number of mining periods before reward amounts change.</param>
        /// <param name="miningPoolRewardPerPeriod">Decimal value with uncapped precision and size.</param>
        /// <param name="totalRewardsPerPeriod">Decimal value with uncapped precision and size.</param>
        /// <param name="minedToken">An address on the Cirrus network.</param>
        public MiningGovernanceResponse(string address = default(string), int periodEndBlock = default(int), int periodRemainingBlocks = default(int), int periodBlockDuration = default(int), int periodsUntilRewardReset = default(int), string miningPoolRewardPerPeriod = default(string), string totalRewardsPerPeriod = default(string), string minedToken = default(string))
        {
            this.Address = address;
            this.PeriodEndBlock = periodEndBlock;
            this.PeriodRemainingBlocks = periodRemainingBlocks;
            this.PeriodBlockDuration = periodBlockDuration;
            this.PeriodsUntilRewardReset = periodsUntilRewardReset;
            this.MiningPoolRewardPerPeriod = miningPoolRewardPerPeriod;
            this.TotalRewardsPerPeriod = totalRewardsPerPeriod;
            this.MinedToken = minedToken;
        }

        /// <summary>
        /// An address on the Cirrus network
        /// </summary>
        /// <value>An address on the Cirrus network</value>
        [DataMember(Name = "address", EmitDefaultValue = false)]
        public string Address { get; set; }

        /// <summary>
        /// Block number at which the current mining period ends
        /// </summary>
        /// <value>Block number at which the current mining period ends</value>
        [DataMember(Name = "periodEndBlock", EmitDefaultValue = false)]
        public int PeriodEndBlock { get; set; }

        /// <summary>
        /// Number of blocks left for the current mining period
        /// </summary>
        /// <value>Number of blocks left for the current mining period</value>
        [DataMember(Name = "periodRemainingBlocks", EmitDefaultValue = false)]
        public int PeriodRemainingBlocks { get; set; }

        /// <summary>
        /// Number of blocks in a full mining period
        /// </summary>
        /// <value>Number of blocks in a full mining period</value>
        [DataMember(Name = "periodBlockDuration", EmitDefaultValue = false)]
        public int PeriodBlockDuration { get; set; }

        /// <summary>
        /// Number of mining periods before reward amounts change
        /// </summary>
        /// <value>Number of mining periods before reward amounts change</value>
        [DataMember(Name = "periodsUntilRewardReset", EmitDefaultValue = false)]
        public int PeriodsUntilRewardReset { get; set; }

        /// <summary>
        /// Decimal value with uncapped precision and size
        /// </summary>
        /// <value>Decimal value with uncapped precision and size</value>
        [DataMember(Name = "miningPoolRewardPerPeriod", EmitDefaultValue = false)]
        public string MiningPoolRewardPerPeriod { get; set; }

        /// <summary>
        /// Decimal value with uncapped precision and size
        /// </summary>
        /// <value>Decimal value with uncapped precision and size</value>
        [DataMember(Name = "totalRewardsPerPeriod", EmitDefaultValue = false)]
        public string TotalRewardsPerPeriod { get; set; }

        /// <summary>
        /// An address on the Cirrus network
        /// </summary>
        /// <value>An address on the Cirrus network</value>
        [DataMember(Name = "minedToken", EmitDefaultValue = false)]
        public string MinedToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MiningGovernanceResponse {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  PeriodEndBlock: ").Append(PeriodEndBlock).Append("\n");
            sb.Append("  PeriodRemainingBlocks: ").Append(PeriodRemainingBlocks).Append("\n");
            sb.Append("  PeriodBlockDuration: ").Append(PeriodBlockDuration).Append("\n");
            sb.Append("  PeriodsUntilRewardReset: ").Append(PeriodsUntilRewardReset).Append("\n");
            sb.Append("  MiningPoolRewardPerPeriod: ").Append(MiningPoolRewardPerPeriod).Append("\n");
            sb.Append("  TotalRewardsPerPeriod: ").Append(TotalRewardsPerPeriod).Append("\n");
            sb.Append("  MinedToken: ").Append(MinedToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MiningGovernanceResponse);
        }

        /// <summary>
        /// Returns true if MiningGovernanceResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of MiningGovernanceResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MiningGovernanceResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.PeriodEndBlock == input.PeriodEndBlock ||
                    this.PeriodEndBlock.Equals(input.PeriodEndBlock)
                ) && 
                (
                    this.PeriodRemainingBlocks == input.PeriodRemainingBlocks ||
                    this.PeriodRemainingBlocks.Equals(input.PeriodRemainingBlocks)
                ) && 
                (
                    this.PeriodBlockDuration == input.PeriodBlockDuration ||
                    this.PeriodBlockDuration.Equals(input.PeriodBlockDuration)
                ) && 
                (
                    this.PeriodsUntilRewardReset == input.PeriodsUntilRewardReset ||
                    this.PeriodsUntilRewardReset.Equals(input.PeriodsUntilRewardReset)
                ) && 
                (
                    this.MiningPoolRewardPerPeriod == input.MiningPoolRewardPerPeriod ||
                    (this.MiningPoolRewardPerPeriod != null &&
                    this.MiningPoolRewardPerPeriod.Equals(input.MiningPoolRewardPerPeriod))
                ) && 
                (
                    this.TotalRewardsPerPeriod == input.TotalRewardsPerPeriod ||
                    (this.TotalRewardsPerPeriod != null &&
                    this.TotalRewardsPerPeriod.Equals(input.TotalRewardsPerPeriod))
                ) && 
                (
                    this.MinedToken == input.MinedToken ||
                    (this.MinedToken != null &&
                    this.MinedToken.Equals(input.MinedToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Address != null)
                {
                    hashCode = (hashCode * 59) + this.Address.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PeriodEndBlock.GetHashCode();
                hashCode = (hashCode * 59) + this.PeriodRemainingBlocks.GetHashCode();
                hashCode = (hashCode * 59) + this.PeriodBlockDuration.GetHashCode();
                hashCode = (hashCode * 59) + this.PeriodsUntilRewardReset.GetHashCode();
                if (this.MiningPoolRewardPerPeriod != null)
                {
                    hashCode = (hashCode * 59) + this.MiningPoolRewardPerPeriod.GetHashCode();
                }
                if (this.TotalRewardsPerPeriod != null)
                {
                    hashCode = (hashCode * 59) + this.TotalRewardsPerPeriod.GetHashCode();
                }
                if (this.MinedToken != null)
                {
                    hashCode = (hashCode * 59) + this.MinedToken.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Address (string) maxLength
            if (this.Address != null && this.Address.Length > 42)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Address, length must be less than 42.", new [] { "Address" });
            }

            // Address (string) minLength
            if (this.Address != null && this.Address.Length < 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Address, length must be greater than 30.", new [] { "Address" });
            }

            // Address (string) pattern
            Regex regexAddress = new Regex(@"^[a-km-zA-HJ-NP-Z1-9]$", RegexOptions.CultureInvariant);
            if (false == regexAddress.Match(this.Address).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Address, must match a pattern of " + regexAddress, new [] { "Address" });
            }

            // PeriodEndBlock (int) minimum
            if (this.PeriodEndBlock < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PeriodEndBlock, must be a value greater than or equal to 1.", new [] { "PeriodEndBlock" });
            }

            // PeriodRemainingBlocks (int) minimum
            if (this.PeriodRemainingBlocks < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PeriodRemainingBlocks, must be a value greater than or equal to 0.", new [] { "PeriodRemainingBlocks" });
            }

            // PeriodBlockDuration (int) minimum
            if (this.PeriodBlockDuration < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PeriodBlockDuration, must be a value greater than or equal to 0.", new [] { "PeriodBlockDuration" });
            }

            // PeriodsUntilRewardReset (int) minimum
            if (this.PeriodsUntilRewardReset < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PeriodsUntilRewardReset, must be a value greater than or equal to 0.", new [] { "PeriodsUntilRewardReset" });
            }

            // MiningPoolRewardPerPeriod (string) pattern
            Regex regexMiningPoolRewardPerPeriod = new Regex(@"^\\d*\\.\\d{1,18}$", RegexOptions.CultureInvariant);
            if (false == regexMiningPoolRewardPerPeriod.Match(this.MiningPoolRewardPerPeriod).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MiningPoolRewardPerPeriod, must match a pattern of " + regexMiningPoolRewardPerPeriod, new [] { "MiningPoolRewardPerPeriod" });
            }

            // TotalRewardsPerPeriod (string) pattern
            Regex regexTotalRewardsPerPeriod = new Regex(@"^\\d*\\.\\d{1,18}$", RegexOptions.CultureInvariant);
            if (false == regexTotalRewardsPerPeriod.Match(this.TotalRewardsPerPeriod).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TotalRewardsPerPeriod, must match a pattern of " + regexTotalRewardsPerPeriod, new [] { "TotalRewardsPerPeriod" });
            }

            // MinedToken (string) maxLength
            if (this.MinedToken != null && this.MinedToken.Length > 42)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MinedToken, length must be less than 42.", new [] { "MinedToken" });
            }

            // MinedToken (string) minLength
            if (this.MinedToken != null && this.MinedToken.Length < 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MinedToken, length must be greater than 30.", new [] { "MinedToken" });
            }

            // MinedToken (string) pattern
            Regex regexMinedToken = new Regex(@"^[a-km-zA-HJ-NP-Z1-9]$", RegexOptions.CultureInvariant);
            if (false == regexMinedToken.Match(this.MinedToken).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MinedToken, must match a pattern of " + regexMinedToken, new [] { "MinedToken" });
            }

            yield break;
        }
    }

}
