/*
 * Opdex Platform API
 *
 * The Opdex Platform Web API is an interface for querying information from the Opdex contract indexer and quoting Opdex smart contract transactions. The Opdex contract indexer is a job that continually runs and stores relevant broadcast transaction data, in a way that represents the current known state of the Opdex protocol at the present time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Opdex.Client.Client.FileParameter;
using OpenAPIDateConverter = Opdex.Client.Client.OpenAPIDateConverter;

namespace Opdex.Client.Model
{
    /// <summary>
    /// CertificateResponse
    /// </summary>
    [DataContract(Name = "certificateResponse")]
    public partial class CertificateResponse : IEquatable<CertificateResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CertificateResponse" /> class.
        /// </summary>
        /// <param name="owner">An address on the Cirrus network.</param>
        /// <param name="amount">Decimal value with uncapped precision and size.</param>
        /// <param name="vestingStartBlock">Block that the vesting period starts.</param>
        /// <param name="vestingEndBlock">Block that the vesting period ends.</param>
        /// <param name="redeemed">Whether the certificate has been redeemed by the certificate owner.</param>
        /// <param name="revoked">Whether the certificate was revoked by the vault owner.</param>
        /// <param name="proposals">Create and revoke proposal ids relating to the certificate.</param>
        /// <param name="createdBlock">Block number at which the entity was created.</param>
        /// <param name="modifiedBlock">Block number at which the entity state was last modified.</param>
        public CertificateResponse(string owner = default(string), string amount = default(string), int vestingStartBlock = default(int), int vestingEndBlock = default(int), bool redeemed = default(bool), bool revoked = default(bool), List<int> proposals = default(List<int>), int createdBlock = default(int), int modifiedBlock = default(int))
        {
            this.Owner = owner;
            this.Amount = amount;
            this.VestingStartBlock = vestingStartBlock;
            this.VestingEndBlock = vestingEndBlock;
            this.Redeemed = redeemed;
            this.Revoked = revoked;
            this.Proposals = proposals;
            this.CreatedBlock = createdBlock;
            this.ModifiedBlock = modifiedBlock;
        }

        /// <summary>
        /// An address on the Cirrus network
        /// </summary>
        /// <value>An address on the Cirrus network</value>
        [DataMember(Name = "owner", EmitDefaultValue = false)]
        public string Owner { get; set; }

        /// <summary>
        /// Decimal value with uncapped precision and size
        /// </summary>
        /// <value>Decimal value with uncapped precision and size</value>
        [DataMember(Name = "amount", EmitDefaultValue = false)]
        public string Amount { get; set; }

        /// <summary>
        /// Block that the vesting period starts
        /// </summary>
        /// <value>Block that the vesting period starts</value>
        [DataMember(Name = "vestingStartBlock", EmitDefaultValue = false)]
        public int VestingStartBlock { get; set; }

        /// <summary>
        /// Block that the vesting period ends
        /// </summary>
        /// <value>Block that the vesting period ends</value>
        [DataMember(Name = "vestingEndBlock", EmitDefaultValue = false)]
        public int VestingEndBlock { get; set; }

        /// <summary>
        /// Whether the certificate has been redeemed by the certificate owner
        /// </summary>
        /// <value>Whether the certificate has been redeemed by the certificate owner</value>
        [DataMember(Name = "redeemed", EmitDefaultValue = true)]
        public bool Redeemed { get; set; }

        /// <summary>
        /// Whether the certificate was revoked by the vault owner
        /// </summary>
        /// <value>Whether the certificate was revoked by the vault owner</value>
        [DataMember(Name = "revoked", EmitDefaultValue = true)]
        public bool Revoked { get; set; }

        /// <summary>
        /// Create and revoke proposal ids relating to the certificate
        /// </summary>
        /// <value>Create and revoke proposal ids relating to the certificate</value>
        [DataMember(Name = "proposals", EmitDefaultValue = false)]
        public List<int> Proposals { get; set; }

        /// <summary>
        /// Block number at which the entity was created
        /// </summary>
        /// <value>Block number at which the entity was created</value>
        [DataMember(Name = "createdBlock", EmitDefaultValue = false)]
        public int CreatedBlock { get; set; }

        /// <summary>
        /// Block number at which the entity state was last modified
        /// </summary>
        /// <value>Block number at which the entity state was last modified</value>
        [DataMember(Name = "modifiedBlock", EmitDefaultValue = false)]
        public int ModifiedBlock { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CertificateResponse {\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  VestingStartBlock: ").Append(VestingStartBlock).Append("\n");
            sb.Append("  VestingEndBlock: ").Append(VestingEndBlock).Append("\n");
            sb.Append("  Redeemed: ").Append(Redeemed).Append("\n");
            sb.Append("  Revoked: ").Append(Revoked).Append("\n");
            sb.Append("  Proposals: ").Append(Proposals).Append("\n");
            sb.Append("  CreatedBlock: ").Append(CreatedBlock).Append("\n");
            sb.Append("  ModifiedBlock: ").Append(ModifiedBlock).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CertificateResponse);
        }

        /// <summary>
        /// Returns true if CertificateResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CertificateResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CertificateResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Owner == input.Owner ||
                    (this.Owner != null &&
                    this.Owner.Equals(input.Owner))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.VestingStartBlock == input.VestingStartBlock ||
                    this.VestingStartBlock.Equals(input.VestingStartBlock)
                ) && 
                (
                    this.VestingEndBlock == input.VestingEndBlock ||
                    this.VestingEndBlock.Equals(input.VestingEndBlock)
                ) && 
                (
                    this.Redeemed == input.Redeemed ||
                    this.Redeemed.Equals(input.Redeemed)
                ) && 
                (
                    this.Revoked == input.Revoked ||
                    this.Revoked.Equals(input.Revoked)
                ) && 
                (
                    this.Proposals == input.Proposals ||
                    this.Proposals != null &&
                    input.Proposals != null &&
                    this.Proposals.SequenceEqual(input.Proposals)
                ) && 
                (
                    this.CreatedBlock == input.CreatedBlock ||
                    this.CreatedBlock.Equals(input.CreatedBlock)
                ) && 
                (
                    this.ModifiedBlock == input.ModifiedBlock ||
                    this.ModifiedBlock.Equals(input.ModifiedBlock)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Owner != null)
                {
                    hashCode = (hashCode * 59) + this.Owner.GetHashCode();
                }
                if (this.Amount != null)
                {
                    hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.VestingStartBlock.GetHashCode();
                hashCode = (hashCode * 59) + this.VestingEndBlock.GetHashCode();
                hashCode = (hashCode * 59) + this.Redeemed.GetHashCode();
                hashCode = (hashCode * 59) + this.Revoked.GetHashCode();
                if (this.Proposals != null)
                {
                    hashCode = (hashCode * 59) + this.Proposals.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CreatedBlock.GetHashCode();
                hashCode = (hashCode * 59) + this.ModifiedBlock.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Owner (string) maxLength
            if (this.Owner != null && this.Owner.Length > 42)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Owner, length must be less than 42.", new [] { "Owner" });
            }

            // Owner (string) minLength
            if (this.Owner != null && this.Owner.Length < 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Owner, length must be greater than 30.", new [] { "Owner" });
            }

            // Owner (string) pattern
            Regex regexOwner = new Regex(@"^[a-km-zA-HJ-NP-Z1-9]$", RegexOptions.CultureInvariant);
            if (false == regexOwner.Match(this.Owner).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Owner, must match a pattern of " + regexOwner, new [] { "Owner" });
            }

            // Amount (string) pattern
            Regex regexAmount = new Regex(@"^\\d*\\.\\d{1,18}$", RegexOptions.CultureInvariant);
            if (false == regexAmount.Match(this.Amount).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Amount, must match a pattern of " + regexAmount, new [] { "Amount" });
            }

            // VestingStartBlock (int) minimum
            if (this.VestingStartBlock < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VestingStartBlock, must be a value greater than or equal to 1.", new [] { "VestingStartBlock" });
            }

            // VestingEndBlock (int) minimum
            if (this.VestingEndBlock < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VestingEndBlock, must be a value greater than or equal to 1.", new [] { "VestingEndBlock" });
            }

            // CreatedBlock (int) minimum
            if (this.CreatedBlock < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CreatedBlock, must be a value greater than or equal to 1.", new [] { "CreatedBlock" });
            }

            // ModifiedBlock (int) minimum
            if (this.ModifiedBlock < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ModifiedBlock, must be a value greater than or equal to 1.", new [] { "ModifiedBlock" });
            }

            yield break;
        }
    }

}
