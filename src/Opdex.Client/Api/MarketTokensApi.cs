/*
 * Opdex Platform API
 *
 * The Opdex Platform Web API is an interface for querying information from the Opdex contract indexer and quoting Opdex smart contract transactions. The Opdex contract indexer is a job that continually runs and stores relevant broadcast transaction data, in a way that represents the current known state of the Opdex protocol at the present time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Opdex.Client.Client;
using Opdex.Client.Model;

namespace Opdex.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMarketTokensApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Market Token
        /// </summary>
        /// <remarks>
        /// Retrieves details of a token, that is tracked within a specified market.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">Address of the market</param>
        /// <param name="token">Address of the token</param>
        /// <returns>MarketTokenResponse</returns>
        MarketTokenResponse GetMarketToken(string market, string token);

        /// <summary>
        /// Get Market Token
        /// </summary>
        /// <remarks>
        /// Retrieves details of a token, that is tracked within a specified market.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">Address of the market</param>
        /// <param name="token">Address of the token</param>
        /// <returns>ApiResponse of MarketTokenResponse</returns>
        ApiResponse<MarketTokenResponse> GetMarketTokenWithHttpInfo(string market, string token);
        /// <summary>
        /// Get Market Token History
        /// </summary>
        /// <remarks>
        /// Retrieves historical pricing data for a token tracked within a specified market. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">Address of the market</param>
        /// <param name="token">Address of the token</param>
        /// <param name="startDateTime">Start time for which to retrieve snapshots</param>
        /// <param name="endDateTime">End time for which to retrieve snapshots</param>
        /// <param name="interval">Time range between each snapshot (optional)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page; defaults to 168 for hourly snapshots (1 week), or 28 for daily snapshots (4 weeks) (optional, default to 168)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <returns>TokenSnapshotsResponse</returns>
        TokenSnapshotsResponse GetMarketTokenHistory(string market, string token, DateTime startDateTime, DateTime endDateTime, Interval? interval = default(Interval?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string));

        /// <summary>
        /// Get Market Token History
        /// </summary>
        /// <remarks>
        /// Retrieves historical pricing data for a token tracked within a specified market. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">Address of the market</param>
        /// <param name="token">Address of the token</param>
        /// <param name="startDateTime">Start time for which to retrieve snapshots</param>
        /// <param name="endDateTime">End time for which to retrieve snapshots</param>
        /// <param name="interval">Time range between each snapshot (optional)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page; defaults to 168 for hourly snapshots (1 week), or 28 for daily snapshots (4 weeks) (optional, default to 168)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <returns>ApiResponse of TokenSnapshotsResponse</returns>
        ApiResponse<TokenSnapshotsResponse> GetMarketTokenHistoryWithHttpInfo(string market, string token, DateTime startDateTime, DateTime endDateTime, Interval? interval = default(Interval?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string));
        /// <summary>
        /// Get Market Tokens
        /// </summary>
        /// <remarks>
        /// Retrieves details of tokens tracked within a specified market. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">Address of the market</param>
        /// <param name="tokenAttributes">Token attributes filter (optional)</param>
        /// <param name="nativeChains">Native chain filter (optional)</param>
        /// <param name="tokens">Specific tokens to include (optional)</param>
        /// <param name="keyword">Keyword search against token address, name and ticker symbol (optional)</param>
        /// <param name="orderBy">Property by which to sort results (optional)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <returns>MarketTokensResponse</returns>
        MarketTokensResponse GetMarketTokens(string market, List<TokenAttributeFilter> tokenAttributes = default(List<TokenAttributeFilter>), List<ChainFilter> nativeChains = default(List<ChainFilter>), List<string> tokens = default(List<string>), string keyword = default(string), TokenOrderByType? orderBy = default(TokenOrderByType?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string));

        /// <summary>
        /// Get Market Tokens
        /// </summary>
        /// <remarks>
        /// Retrieves details of tokens tracked within a specified market. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">Address of the market</param>
        /// <param name="tokenAttributes">Token attributes filter (optional)</param>
        /// <param name="nativeChains">Native chain filter (optional)</param>
        /// <param name="tokens">Specific tokens to include (optional)</param>
        /// <param name="keyword">Keyword search against token address, name and ticker symbol (optional)</param>
        /// <param name="orderBy">Property by which to sort results (optional)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <returns>ApiResponse of MarketTokensResponse</returns>
        ApiResponse<MarketTokensResponse> GetMarketTokensWithHttpInfo(string market, List<TokenAttributeFilter> tokenAttributes = default(List<TokenAttributeFilter>), List<ChainFilter> nativeChains = default(List<ChainFilter>), List<string> tokens = default(List<string>), string keyword = default(string), TokenOrderByType? orderBy = default(TokenOrderByType?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string));
        /// <summary>
        /// Swap Amount In Quote
        /// </summary>
        /// <remarks>
        /// Retrieves an estimate for the amount of tokens to be input, given a swap output.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">Address of the market</param>
        /// <param name="token">Address of the input token</param>
        /// <param name="swapAmountInQuoteRequest"></param>
        /// <returns>SwapAmountInQuoteResponse</returns>
        SwapAmountInQuoteResponse GetSwapAmountInQuote(string market, string token, SwapAmountInQuoteRequest swapAmountInQuoteRequest);

        /// <summary>
        /// Swap Amount In Quote
        /// </summary>
        /// <remarks>
        /// Retrieves an estimate for the amount of tokens to be input, given a swap output.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">Address of the market</param>
        /// <param name="token">Address of the input token</param>
        /// <param name="swapAmountInQuoteRequest"></param>
        /// <returns>ApiResponse of SwapAmountInQuoteResponse</returns>
        ApiResponse<SwapAmountInQuoteResponse> GetSwapAmountInQuoteWithHttpInfo(string market, string token, SwapAmountInQuoteRequest swapAmountInQuoteRequest);
        /// <summary>
        /// Swap Amount Out Quote
        /// </summary>
        /// <remarks>
        /// Retrieves an estimate for the amount of tokens output, given a swap input.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">Address of the market</param>
        /// <param name="token">Address of the input token</param>
        /// <param name="swapAmountOutQuoteRequest"></param>
        /// <returns>SwapAmountOutQuoteResponse</returns>
        SwapAmountOutQuoteResponse GetSwapAmountOutQuote(string market, string token, SwapAmountOutQuoteRequest swapAmountOutQuoteRequest);

        /// <summary>
        /// Swap Amount Out Quote
        /// </summary>
        /// <remarks>
        /// Retrieves an estimate for the amount of tokens output, given a swap input.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">Address of the market</param>
        /// <param name="token">Address of the input token</param>
        /// <param name="swapAmountOutQuoteRequest"></param>
        /// <returns>ApiResponse of SwapAmountOutQuoteResponse</returns>
        ApiResponse<SwapAmountOutQuoteResponse> GetSwapAmountOutQuoteWithHttpInfo(string market, string token, SwapAmountOutQuoteRequest swapAmountOutQuoteRequest);
        /// <summary>
        /// Build Swap Tokens Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a token swap transaction. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">Address of the market</param>
        /// <param name="token">Address of the input token</param>
        /// <param name="quoteSwapTransactionRequest"></param>
        /// <returns>TransactionQuoteResponse</returns>
        TransactionQuoteResponse Swap(string market, string token, QuoteSwapTransactionRequest quoteSwapTransactionRequest);

        /// <summary>
        /// Build Swap Tokens Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a token swap transaction. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">Address of the market</param>
        /// <param name="token">Address of the input token</param>
        /// <param name="quoteSwapTransactionRequest"></param>
        /// <returns>ApiResponse of TransactionQuoteResponse</returns>
        ApiResponse<TransactionQuoteResponse> SwapWithHttpInfo(string market, string token, QuoteSwapTransactionRequest quoteSwapTransactionRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMarketTokensApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get Market Token
        /// </summary>
        /// <remarks>
        /// Retrieves details of a token, that is tracked within a specified market.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">Address of the market</param>
        /// <param name="token">Address of the token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MarketTokenResponse</returns>
        System.Threading.Tasks.Task<MarketTokenResponse> GetMarketTokenAsync(string market, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Market Token
        /// </summary>
        /// <remarks>
        /// Retrieves details of a token, that is tracked within a specified market.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">Address of the market</param>
        /// <param name="token">Address of the token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MarketTokenResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MarketTokenResponse>> GetMarketTokenWithHttpInfoAsync(string market, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Market Token History
        /// </summary>
        /// <remarks>
        /// Retrieves historical pricing data for a token tracked within a specified market. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">Address of the market</param>
        /// <param name="token">Address of the token</param>
        /// <param name="startDateTime">Start time for which to retrieve snapshots</param>
        /// <param name="endDateTime">End time for which to retrieve snapshots</param>
        /// <param name="interval">Time range between each snapshot (optional)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page; defaults to 168 for hourly snapshots (1 week), or 28 for daily snapshots (4 weeks) (optional, default to 168)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TokenSnapshotsResponse</returns>
        System.Threading.Tasks.Task<TokenSnapshotsResponse> GetMarketTokenHistoryAsync(string market, string token, DateTime startDateTime, DateTime endDateTime, Interval? interval = default(Interval?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Market Token History
        /// </summary>
        /// <remarks>
        /// Retrieves historical pricing data for a token tracked within a specified market. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">Address of the market</param>
        /// <param name="token">Address of the token</param>
        /// <param name="startDateTime">Start time for which to retrieve snapshots</param>
        /// <param name="endDateTime">End time for which to retrieve snapshots</param>
        /// <param name="interval">Time range between each snapshot (optional)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page; defaults to 168 for hourly snapshots (1 week), or 28 for daily snapshots (4 weeks) (optional, default to 168)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TokenSnapshotsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TokenSnapshotsResponse>> GetMarketTokenHistoryWithHttpInfoAsync(string market, string token, DateTime startDateTime, DateTime endDateTime, Interval? interval = default(Interval?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Market Tokens
        /// </summary>
        /// <remarks>
        /// Retrieves details of tokens tracked within a specified market. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">Address of the market</param>
        /// <param name="tokenAttributes">Token attributes filter (optional)</param>
        /// <param name="nativeChains">Native chain filter (optional)</param>
        /// <param name="tokens">Specific tokens to include (optional)</param>
        /// <param name="keyword">Keyword search against token address, name and ticker symbol (optional)</param>
        /// <param name="orderBy">Property by which to sort results (optional)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MarketTokensResponse</returns>
        System.Threading.Tasks.Task<MarketTokensResponse> GetMarketTokensAsync(string market, List<TokenAttributeFilter> tokenAttributes = default(List<TokenAttributeFilter>), List<ChainFilter> nativeChains = default(List<ChainFilter>), List<string> tokens = default(List<string>), string keyword = default(string), TokenOrderByType? orderBy = default(TokenOrderByType?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Market Tokens
        /// </summary>
        /// <remarks>
        /// Retrieves details of tokens tracked within a specified market. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">Address of the market</param>
        /// <param name="tokenAttributes">Token attributes filter (optional)</param>
        /// <param name="nativeChains">Native chain filter (optional)</param>
        /// <param name="tokens">Specific tokens to include (optional)</param>
        /// <param name="keyword">Keyword search against token address, name and ticker symbol (optional)</param>
        /// <param name="orderBy">Property by which to sort results (optional)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MarketTokensResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MarketTokensResponse>> GetMarketTokensWithHttpInfoAsync(string market, List<TokenAttributeFilter> tokenAttributes = default(List<TokenAttributeFilter>), List<ChainFilter> nativeChains = default(List<ChainFilter>), List<string> tokens = default(List<string>), string keyword = default(string), TokenOrderByType? orderBy = default(TokenOrderByType?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Swap Amount In Quote
        /// </summary>
        /// <remarks>
        /// Retrieves an estimate for the amount of tokens to be input, given a swap output.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">Address of the market</param>
        /// <param name="token">Address of the input token</param>
        /// <param name="swapAmountInQuoteRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SwapAmountInQuoteResponse</returns>
        System.Threading.Tasks.Task<SwapAmountInQuoteResponse> GetSwapAmountInQuoteAsync(string market, string token, SwapAmountInQuoteRequest swapAmountInQuoteRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Swap Amount In Quote
        /// </summary>
        /// <remarks>
        /// Retrieves an estimate for the amount of tokens to be input, given a swap output.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">Address of the market</param>
        /// <param name="token">Address of the input token</param>
        /// <param name="swapAmountInQuoteRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SwapAmountInQuoteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SwapAmountInQuoteResponse>> GetSwapAmountInQuoteWithHttpInfoAsync(string market, string token, SwapAmountInQuoteRequest swapAmountInQuoteRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Swap Amount Out Quote
        /// </summary>
        /// <remarks>
        /// Retrieves an estimate for the amount of tokens output, given a swap input.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">Address of the market</param>
        /// <param name="token">Address of the input token</param>
        /// <param name="swapAmountOutQuoteRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SwapAmountOutQuoteResponse</returns>
        System.Threading.Tasks.Task<SwapAmountOutQuoteResponse> GetSwapAmountOutQuoteAsync(string market, string token, SwapAmountOutQuoteRequest swapAmountOutQuoteRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Swap Amount Out Quote
        /// </summary>
        /// <remarks>
        /// Retrieves an estimate for the amount of tokens output, given a swap input.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">Address of the market</param>
        /// <param name="token">Address of the input token</param>
        /// <param name="swapAmountOutQuoteRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SwapAmountOutQuoteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SwapAmountOutQuoteResponse>> GetSwapAmountOutQuoteWithHttpInfoAsync(string market, string token, SwapAmountOutQuoteRequest swapAmountOutQuoteRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Build Swap Tokens Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a token swap transaction. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">Address of the market</param>
        /// <param name="token">Address of the input token</param>
        /// <param name="quoteSwapTransactionRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionQuoteResponse</returns>
        System.Threading.Tasks.Task<TransactionQuoteResponse> SwapAsync(string market, string token, QuoteSwapTransactionRequest quoteSwapTransactionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Build Swap Tokens Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a token swap transaction. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">Address of the market</param>
        /// <param name="token">Address of the input token</param>
        /// <param name="quoteSwapTransactionRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionQuoteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionQuoteResponse>> SwapWithHttpInfoAsync(string market, string token, QuoteSwapTransactionRequest quoteSwapTransactionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMarketTokensApi : IMarketTokensApiSync, IMarketTokensApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MarketTokensApi : IDisposable, IMarketTokensApi
    {
        private Opdex.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MarketTokensApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public MarketTokensApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MarketTokensApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public MarketTokensApi(string basePath)
        {
            this.Configuration = Opdex.Client.Client.Configuration.MergeConfigurations(
                Opdex.Client.Client.GlobalConfiguration.Instance,
                new Opdex.Client.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Opdex.Client.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Opdex.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MarketTokensApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public MarketTokensApi(Opdex.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Opdex.Client.Client.Configuration.MergeConfigurations(
                Opdex.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Opdex.Client.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Opdex.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MarketTokensApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public MarketTokensApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MarketTokensApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public MarketTokensApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Opdex.Client.Client.Configuration.MergeConfigurations(
                Opdex.Client.Client.GlobalConfiguration.Instance,
                new Opdex.Client.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Opdex.Client.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Opdex.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MarketTokensApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public MarketTokensApi(HttpClient client, Opdex.Client.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Opdex.Client.Client.Configuration.MergeConfigurations(
                Opdex.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Opdex.Client.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Opdex.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MarketTokensApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public MarketTokensApi(Opdex.Client.Client.ISynchronousClient client, Opdex.Client.Client.IAsynchronousClient asyncClient, Opdex.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Opdex.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Opdex.Client.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Opdex.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Opdex.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Opdex.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Opdex.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get Market Token Retrieves details of a token, that is tracked within a specified market.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">Address of the market</param>
        /// <param name="token">Address of the token</param>
        /// <returns>MarketTokenResponse</returns>
        public MarketTokenResponse GetMarketToken(string market, string token)
        {
            Opdex.Client.Client.ApiResponse<MarketTokenResponse> localVarResponse = GetMarketTokenWithHttpInfo(market, token);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Market Token Retrieves details of a token, that is tracked within a specified market.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">Address of the market</param>
        /// <param name="token">Address of the token</param>
        /// <returns>ApiResponse of MarketTokenResponse</returns>
        public Opdex.Client.Client.ApiResponse<MarketTokenResponse> GetMarketTokenWithHttpInfo(string market, string token)
        {
            // verify the required parameter 'market' is set
            if (market == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'market' when calling MarketTokensApi->GetMarketToken");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'token' when calling MarketTokensApi->GetMarketToken");

            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("market", Opdex.Client.Client.ClientUtils.ParameterToString(market)); // path parameter
            localVarRequestOptions.PathParameters.Add("token", Opdex.Client.Client.ClientUtils.ParameterToString(token)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<MarketTokenResponse>("/markets/{market}/tokens/{token}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMarketToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Market Token Retrieves details of a token, that is tracked within a specified market.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">Address of the market</param>
        /// <param name="token">Address of the token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MarketTokenResponse</returns>
        public async System.Threading.Tasks.Task<MarketTokenResponse> GetMarketTokenAsync(string market, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opdex.Client.Client.ApiResponse<MarketTokenResponse> localVarResponse = await GetMarketTokenWithHttpInfoAsync(market, token, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Market Token Retrieves details of a token, that is tracked within a specified market.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">Address of the market</param>
        /// <param name="token">Address of the token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MarketTokenResponse)</returns>
        public async System.Threading.Tasks.Task<Opdex.Client.Client.ApiResponse<MarketTokenResponse>> GetMarketTokenWithHttpInfoAsync(string market, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'market' is set
            if (market == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'market' when calling MarketTokensApi->GetMarketToken");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'token' when calling MarketTokensApi->GetMarketToken");


            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };


            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("market", Opdex.Client.Client.ClientUtils.ParameterToString(market)); // path parameter
            localVarRequestOptions.PathParameters.Add("token", Opdex.Client.Client.ClientUtils.ParameterToString(token)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MarketTokenResponse>("/markets/{market}/tokens/{token}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMarketToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Market Token History Retrieves historical pricing data for a token tracked within a specified market. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">Address of the market</param>
        /// <param name="token">Address of the token</param>
        /// <param name="startDateTime">Start time for which to retrieve snapshots</param>
        /// <param name="endDateTime">End time for which to retrieve snapshots</param>
        /// <param name="interval">Time range between each snapshot (optional)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page; defaults to 168 for hourly snapshots (1 week), or 28 for daily snapshots (4 weeks) (optional, default to 168)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <returns>TokenSnapshotsResponse</returns>
        public TokenSnapshotsResponse GetMarketTokenHistory(string market, string token, DateTime startDateTime, DateTime endDateTime, Interval? interval = default(Interval?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string))
        {
            Opdex.Client.Client.ApiResponse<TokenSnapshotsResponse> localVarResponse = GetMarketTokenHistoryWithHttpInfo(market, token, startDateTime, endDateTime, interval, direction, limit, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Market Token History Retrieves historical pricing data for a token tracked within a specified market. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">Address of the market</param>
        /// <param name="token">Address of the token</param>
        /// <param name="startDateTime">Start time for which to retrieve snapshots</param>
        /// <param name="endDateTime">End time for which to retrieve snapshots</param>
        /// <param name="interval">Time range between each snapshot (optional)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page; defaults to 168 for hourly snapshots (1 week), or 28 for daily snapshots (4 weeks) (optional, default to 168)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <returns>ApiResponse of TokenSnapshotsResponse</returns>
        public Opdex.Client.Client.ApiResponse<TokenSnapshotsResponse> GetMarketTokenHistoryWithHttpInfo(string market, string token, DateTime startDateTime, DateTime endDateTime, Interval? interval = default(Interval?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string))
        {
            // verify the required parameter 'market' is set
            if (market == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'market' when calling MarketTokensApi->GetMarketTokenHistory");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'token' when calling MarketTokensApi->GetMarketTokenHistory");

            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("market", Opdex.Client.Client.ClientUtils.ParameterToString(market)); // path parameter
            localVarRequestOptions.PathParameters.Add("token", Opdex.Client.Client.ClientUtils.ParameterToString(token)); // path parameter
            if (interval != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "interval", interval));
            }
            localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "startDateTime", startDateTime));
            localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "endDateTime", endDateTime));
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<TokenSnapshotsResponse>("/markets/{market}/tokens/{token}/history", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMarketTokenHistory", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Market Token History Retrieves historical pricing data for a token tracked within a specified market. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">Address of the market</param>
        /// <param name="token">Address of the token</param>
        /// <param name="startDateTime">Start time for which to retrieve snapshots</param>
        /// <param name="endDateTime">End time for which to retrieve snapshots</param>
        /// <param name="interval">Time range between each snapshot (optional)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page; defaults to 168 for hourly snapshots (1 week), or 28 for daily snapshots (4 weeks) (optional, default to 168)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TokenSnapshotsResponse</returns>
        public async System.Threading.Tasks.Task<TokenSnapshotsResponse> GetMarketTokenHistoryAsync(string market, string token, DateTime startDateTime, DateTime endDateTime, Interval? interval = default(Interval?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opdex.Client.Client.ApiResponse<TokenSnapshotsResponse> localVarResponse = await GetMarketTokenHistoryWithHttpInfoAsync(market, token, startDateTime, endDateTime, interval, direction, limit, cursor, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Market Token History Retrieves historical pricing data for a token tracked within a specified market. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">Address of the market</param>
        /// <param name="token">Address of the token</param>
        /// <param name="startDateTime">Start time for which to retrieve snapshots</param>
        /// <param name="endDateTime">End time for which to retrieve snapshots</param>
        /// <param name="interval">Time range between each snapshot (optional)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page; defaults to 168 for hourly snapshots (1 week), or 28 for daily snapshots (4 weeks) (optional, default to 168)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TokenSnapshotsResponse)</returns>
        public async System.Threading.Tasks.Task<Opdex.Client.Client.ApiResponse<TokenSnapshotsResponse>> GetMarketTokenHistoryWithHttpInfoAsync(string market, string token, DateTime startDateTime, DateTime endDateTime, Interval? interval = default(Interval?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'market' is set
            if (market == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'market' when calling MarketTokensApi->GetMarketTokenHistory");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'token' when calling MarketTokensApi->GetMarketTokenHistory");


            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };


            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("market", Opdex.Client.Client.ClientUtils.ParameterToString(market)); // path parameter
            localVarRequestOptions.PathParameters.Add("token", Opdex.Client.Client.ClientUtils.ParameterToString(token)); // path parameter
            if (interval != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "interval", interval));
            }
            localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "startDateTime", startDateTime));
            localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "endDateTime", endDateTime));
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TokenSnapshotsResponse>("/markets/{market}/tokens/{token}/history", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMarketTokenHistory", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Market Tokens Retrieves details of tokens tracked within a specified market. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">Address of the market</param>
        /// <param name="tokenAttributes">Token attributes filter (optional)</param>
        /// <param name="nativeChains">Native chain filter (optional)</param>
        /// <param name="tokens">Specific tokens to include (optional)</param>
        /// <param name="keyword">Keyword search against token address, name and ticker symbol (optional)</param>
        /// <param name="orderBy">Property by which to sort results (optional)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <returns>MarketTokensResponse</returns>
        public MarketTokensResponse GetMarketTokens(string market, List<TokenAttributeFilter> tokenAttributes = default(List<TokenAttributeFilter>), List<ChainFilter> nativeChains = default(List<ChainFilter>), List<string> tokens = default(List<string>), string keyword = default(string), TokenOrderByType? orderBy = default(TokenOrderByType?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string))
        {
            Opdex.Client.Client.ApiResponse<MarketTokensResponse> localVarResponse = GetMarketTokensWithHttpInfo(market, tokenAttributes, nativeChains, tokens, keyword, orderBy, direction, limit, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Market Tokens Retrieves details of tokens tracked within a specified market. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">Address of the market</param>
        /// <param name="tokenAttributes">Token attributes filter (optional)</param>
        /// <param name="nativeChains">Native chain filter (optional)</param>
        /// <param name="tokens">Specific tokens to include (optional)</param>
        /// <param name="keyword">Keyword search against token address, name and ticker symbol (optional)</param>
        /// <param name="orderBy">Property by which to sort results (optional)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <returns>ApiResponse of MarketTokensResponse</returns>
        public Opdex.Client.Client.ApiResponse<MarketTokensResponse> GetMarketTokensWithHttpInfo(string market, List<TokenAttributeFilter> tokenAttributes = default(List<TokenAttributeFilter>), List<ChainFilter> nativeChains = default(List<ChainFilter>), List<string> tokens = default(List<string>), string keyword = default(string), TokenOrderByType? orderBy = default(TokenOrderByType?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string))
        {
            // verify the required parameter 'market' is set
            if (market == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'market' when calling MarketTokensApi->GetMarketTokens");

            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("market", Opdex.Client.Client.ClientUtils.ParameterToString(market)); // path parameter
            if (tokenAttributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("multi", "tokenAttributes", tokenAttributes));
            }
            if (nativeChains != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("multi", "nativeChains", nativeChains));
            }
            if (tokens != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("multi", "tokens", tokens));
            }
            if (keyword != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "keyword", keyword));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "orderBy", orderBy));
            }
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<MarketTokensResponse>("/markets/{market}/tokens", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMarketTokens", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Market Tokens Retrieves details of tokens tracked within a specified market. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">Address of the market</param>
        /// <param name="tokenAttributes">Token attributes filter (optional)</param>
        /// <param name="nativeChains">Native chain filter (optional)</param>
        /// <param name="tokens">Specific tokens to include (optional)</param>
        /// <param name="keyword">Keyword search against token address, name and ticker symbol (optional)</param>
        /// <param name="orderBy">Property by which to sort results (optional)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MarketTokensResponse</returns>
        public async System.Threading.Tasks.Task<MarketTokensResponse> GetMarketTokensAsync(string market, List<TokenAttributeFilter> tokenAttributes = default(List<TokenAttributeFilter>), List<ChainFilter> nativeChains = default(List<ChainFilter>), List<string> tokens = default(List<string>), string keyword = default(string), TokenOrderByType? orderBy = default(TokenOrderByType?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opdex.Client.Client.ApiResponse<MarketTokensResponse> localVarResponse = await GetMarketTokensWithHttpInfoAsync(market, tokenAttributes, nativeChains, tokens, keyword, orderBy, direction, limit, cursor, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Market Tokens Retrieves details of tokens tracked within a specified market. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">Address of the market</param>
        /// <param name="tokenAttributes">Token attributes filter (optional)</param>
        /// <param name="nativeChains">Native chain filter (optional)</param>
        /// <param name="tokens">Specific tokens to include (optional)</param>
        /// <param name="keyword">Keyword search against token address, name and ticker symbol (optional)</param>
        /// <param name="orderBy">Property by which to sort results (optional)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MarketTokensResponse)</returns>
        public async System.Threading.Tasks.Task<Opdex.Client.Client.ApiResponse<MarketTokensResponse>> GetMarketTokensWithHttpInfoAsync(string market, List<TokenAttributeFilter> tokenAttributes = default(List<TokenAttributeFilter>), List<ChainFilter> nativeChains = default(List<ChainFilter>), List<string> tokens = default(List<string>), string keyword = default(string), TokenOrderByType? orderBy = default(TokenOrderByType?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'market' is set
            if (market == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'market' when calling MarketTokensApi->GetMarketTokens");


            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };


            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("market", Opdex.Client.Client.ClientUtils.ParameterToString(market)); // path parameter
            if (tokenAttributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("multi", "tokenAttributes", tokenAttributes));
            }
            if (nativeChains != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("multi", "nativeChains", nativeChains));
            }
            if (tokens != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("multi", "tokens", tokens));
            }
            if (keyword != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "keyword", keyword));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "orderBy", orderBy));
            }
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MarketTokensResponse>("/markets/{market}/tokens", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMarketTokens", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Swap Amount In Quote Retrieves an estimate for the amount of tokens to be input, given a swap output.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">Address of the market</param>
        /// <param name="token">Address of the input token</param>
        /// <param name="swapAmountInQuoteRequest"></param>
        /// <returns>SwapAmountInQuoteResponse</returns>
        public SwapAmountInQuoteResponse GetSwapAmountInQuote(string market, string token, SwapAmountInQuoteRequest swapAmountInQuoteRequest)
        {
            Opdex.Client.Client.ApiResponse<SwapAmountInQuoteResponse> localVarResponse = GetSwapAmountInQuoteWithHttpInfo(market, token, swapAmountInQuoteRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Swap Amount In Quote Retrieves an estimate for the amount of tokens to be input, given a swap output.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">Address of the market</param>
        /// <param name="token">Address of the input token</param>
        /// <param name="swapAmountInQuoteRequest"></param>
        /// <returns>ApiResponse of SwapAmountInQuoteResponse</returns>
        public Opdex.Client.Client.ApiResponse<SwapAmountInQuoteResponse> GetSwapAmountInQuoteWithHttpInfo(string market, string token, SwapAmountInQuoteRequest swapAmountInQuoteRequest)
        {
            // verify the required parameter 'market' is set
            if (market == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'market' when calling MarketTokensApi->GetSwapAmountInQuote");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'token' when calling MarketTokensApi->GetSwapAmountInQuote");

            // verify the required parameter 'swapAmountInQuoteRequest' is set
            if (swapAmountInQuoteRequest == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'swapAmountInQuoteRequest' when calling MarketTokensApi->GetSwapAmountInQuote");

            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("market", Opdex.Client.Client.ClientUtils.ParameterToString(market)); // path parameter
            localVarRequestOptions.PathParameters.Add("token", Opdex.Client.Client.ClientUtils.ParameterToString(token)); // path parameter
            localVarRequestOptions.Data = swapAmountInQuoteRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<SwapAmountInQuoteResponse>("/markets/{market}/tokens/{token}/swap/amount-in", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSwapAmountInQuote", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Swap Amount In Quote Retrieves an estimate for the amount of tokens to be input, given a swap output.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">Address of the market</param>
        /// <param name="token">Address of the input token</param>
        /// <param name="swapAmountInQuoteRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SwapAmountInQuoteResponse</returns>
        public async System.Threading.Tasks.Task<SwapAmountInQuoteResponse> GetSwapAmountInQuoteAsync(string market, string token, SwapAmountInQuoteRequest swapAmountInQuoteRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opdex.Client.Client.ApiResponse<SwapAmountInQuoteResponse> localVarResponse = await GetSwapAmountInQuoteWithHttpInfoAsync(market, token, swapAmountInQuoteRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Swap Amount In Quote Retrieves an estimate for the amount of tokens to be input, given a swap output.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">Address of the market</param>
        /// <param name="token">Address of the input token</param>
        /// <param name="swapAmountInQuoteRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SwapAmountInQuoteResponse)</returns>
        public async System.Threading.Tasks.Task<Opdex.Client.Client.ApiResponse<SwapAmountInQuoteResponse>> GetSwapAmountInQuoteWithHttpInfoAsync(string market, string token, SwapAmountInQuoteRequest swapAmountInQuoteRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'market' is set
            if (market == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'market' when calling MarketTokensApi->GetSwapAmountInQuote");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'token' when calling MarketTokensApi->GetSwapAmountInQuote");

            // verify the required parameter 'swapAmountInQuoteRequest' is set
            if (swapAmountInQuoteRequest == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'swapAmountInQuoteRequest' when calling MarketTokensApi->GetSwapAmountInQuote");


            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };


            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("market", Opdex.Client.Client.ClientUtils.ParameterToString(market)); // path parameter
            localVarRequestOptions.PathParameters.Add("token", Opdex.Client.Client.ClientUtils.ParameterToString(token)); // path parameter
            localVarRequestOptions.Data = swapAmountInQuoteRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SwapAmountInQuoteResponse>("/markets/{market}/tokens/{token}/swap/amount-in", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSwapAmountInQuote", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Swap Amount Out Quote Retrieves an estimate for the amount of tokens output, given a swap input.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">Address of the market</param>
        /// <param name="token">Address of the input token</param>
        /// <param name="swapAmountOutQuoteRequest"></param>
        /// <returns>SwapAmountOutQuoteResponse</returns>
        public SwapAmountOutQuoteResponse GetSwapAmountOutQuote(string market, string token, SwapAmountOutQuoteRequest swapAmountOutQuoteRequest)
        {
            Opdex.Client.Client.ApiResponse<SwapAmountOutQuoteResponse> localVarResponse = GetSwapAmountOutQuoteWithHttpInfo(market, token, swapAmountOutQuoteRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Swap Amount Out Quote Retrieves an estimate for the amount of tokens output, given a swap input.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">Address of the market</param>
        /// <param name="token">Address of the input token</param>
        /// <param name="swapAmountOutQuoteRequest"></param>
        /// <returns>ApiResponse of SwapAmountOutQuoteResponse</returns>
        public Opdex.Client.Client.ApiResponse<SwapAmountOutQuoteResponse> GetSwapAmountOutQuoteWithHttpInfo(string market, string token, SwapAmountOutQuoteRequest swapAmountOutQuoteRequest)
        {
            // verify the required parameter 'market' is set
            if (market == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'market' when calling MarketTokensApi->GetSwapAmountOutQuote");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'token' when calling MarketTokensApi->GetSwapAmountOutQuote");

            // verify the required parameter 'swapAmountOutQuoteRequest' is set
            if (swapAmountOutQuoteRequest == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'swapAmountOutQuoteRequest' when calling MarketTokensApi->GetSwapAmountOutQuote");

            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("market", Opdex.Client.Client.ClientUtils.ParameterToString(market)); // path parameter
            localVarRequestOptions.PathParameters.Add("token", Opdex.Client.Client.ClientUtils.ParameterToString(token)); // path parameter
            localVarRequestOptions.Data = swapAmountOutQuoteRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<SwapAmountOutQuoteResponse>("/markets/{market}/tokens/{token}/swap/amount-out", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSwapAmountOutQuote", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Swap Amount Out Quote Retrieves an estimate for the amount of tokens output, given a swap input.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">Address of the market</param>
        /// <param name="token">Address of the input token</param>
        /// <param name="swapAmountOutQuoteRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SwapAmountOutQuoteResponse</returns>
        public async System.Threading.Tasks.Task<SwapAmountOutQuoteResponse> GetSwapAmountOutQuoteAsync(string market, string token, SwapAmountOutQuoteRequest swapAmountOutQuoteRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opdex.Client.Client.ApiResponse<SwapAmountOutQuoteResponse> localVarResponse = await GetSwapAmountOutQuoteWithHttpInfoAsync(market, token, swapAmountOutQuoteRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Swap Amount Out Quote Retrieves an estimate for the amount of tokens output, given a swap input.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">Address of the market</param>
        /// <param name="token">Address of the input token</param>
        /// <param name="swapAmountOutQuoteRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SwapAmountOutQuoteResponse)</returns>
        public async System.Threading.Tasks.Task<Opdex.Client.Client.ApiResponse<SwapAmountOutQuoteResponse>> GetSwapAmountOutQuoteWithHttpInfoAsync(string market, string token, SwapAmountOutQuoteRequest swapAmountOutQuoteRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'market' is set
            if (market == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'market' when calling MarketTokensApi->GetSwapAmountOutQuote");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'token' when calling MarketTokensApi->GetSwapAmountOutQuote");

            // verify the required parameter 'swapAmountOutQuoteRequest' is set
            if (swapAmountOutQuoteRequest == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'swapAmountOutQuoteRequest' when calling MarketTokensApi->GetSwapAmountOutQuote");


            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };


            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("market", Opdex.Client.Client.ClientUtils.ParameterToString(market)); // path parameter
            localVarRequestOptions.PathParameters.Add("token", Opdex.Client.Client.ClientUtils.ParameterToString(token)); // path parameter
            localVarRequestOptions.Data = swapAmountOutQuoteRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SwapAmountOutQuoteResponse>("/markets/{market}/tokens/{token}/swap/amount-out", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSwapAmountOutQuote", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Build Swap Tokens Transaction Quote Builds a quote for a token swap transaction. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">Address of the market</param>
        /// <param name="token">Address of the input token</param>
        /// <param name="quoteSwapTransactionRequest"></param>
        /// <returns>TransactionQuoteResponse</returns>
        public TransactionQuoteResponse Swap(string market, string token, QuoteSwapTransactionRequest quoteSwapTransactionRequest)
        {
            Opdex.Client.Client.ApiResponse<TransactionQuoteResponse> localVarResponse = SwapWithHttpInfo(market, token, quoteSwapTransactionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Build Swap Tokens Transaction Quote Builds a quote for a token swap transaction. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">Address of the market</param>
        /// <param name="token">Address of the input token</param>
        /// <param name="quoteSwapTransactionRequest"></param>
        /// <returns>ApiResponse of TransactionQuoteResponse</returns>
        public Opdex.Client.Client.ApiResponse<TransactionQuoteResponse> SwapWithHttpInfo(string market, string token, QuoteSwapTransactionRequest quoteSwapTransactionRequest)
        {
            // verify the required parameter 'market' is set
            if (market == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'market' when calling MarketTokensApi->Swap");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'token' when calling MarketTokensApi->Swap");

            // verify the required parameter 'quoteSwapTransactionRequest' is set
            if (quoteSwapTransactionRequest == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'quoteSwapTransactionRequest' when calling MarketTokensApi->Swap");

            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("market", Opdex.Client.Client.ClientUtils.ParameterToString(market)); // path parameter
            localVarRequestOptions.PathParameters.Add("token", Opdex.Client.Client.ClientUtils.ParameterToString(token)); // path parameter
            localVarRequestOptions.Data = quoteSwapTransactionRequest;

            // authentication (opdexAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TransactionQuoteResponse>("/markets/{market}/tokens/{token}/swap", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Swap", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Build Swap Tokens Transaction Quote Builds a quote for a token swap transaction. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">Address of the market</param>
        /// <param name="token">Address of the input token</param>
        /// <param name="quoteSwapTransactionRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionQuoteResponse</returns>
        public async System.Threading.Tasks.Task<TransactionQuoteResponse> SwapAsync(string market, string token, QuoteSwapTransactionRequest quoteSwapTransactionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opdex.Client.Client.ApiResponse<TransactionQuoteResponse> localVarResponse = await SwapWithHttpInfoAsync(market, token, quoteSwapTransactionRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Build Swap Tokens Transaction Quote Builds a quote for a token swap transaction. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="market">Address of the market</param>
        /// <param name="token">Address of the input token</param>
        /// <param name="quoteSwapTransactionRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionQuoteResponse)</returns>
        public async System.Threading.Tasks.Task<Opdex.Client.Client.ApiResponse<TransactionQuoteResponse>> SwapWithHttpInfoAsync(string market, string token, QuoteSwapTransactionRequest quoteSwapTransactionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'market' is set
            if (market == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'market' when calling MarketTokensApi->Swap");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'token' when calling MarketTokensApi->Swap");

            // verify the required parameter 'quoteSwapTransactionRequest' is set
            if (quoteSwapTransactionRequest == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'quoteSwapTransactionRequest' when calling MarketTokensApi->Swap");


            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };


            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("market", Opdex.Client.Client.ClientUtils.ParameterToString(market)); // path parameter
            localVarRequestOptions.PathParameters.Add("token", Opdex.Client.Client.ClientUtils.ParameterToString(token)); // path parameter
            localVarRequestOptions.Data = quoteSwapTransactionRequest;

            // authentication (opdexAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TransactionQuoteResponse>("/markets/{market}/tokens/{token}/swap", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Swap", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
