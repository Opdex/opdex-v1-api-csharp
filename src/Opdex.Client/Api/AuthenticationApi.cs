/*
 * Opdex Platform API
 *
 * The Opdex Platform Web API is an interface for querying information from the Opdex contract indexer and quoting Opdex smart contract transactions. The Opdex contract indexer is a job that continually runs and stores relevant broadcast transaction data, in a way that represents the current known state of the Opdex protocol at the present time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Opdex.Client.Client;
using Opdex.Client.Model;

namespace Opdex.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthenticationApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Stratis Signature Auth
        /// </summary>
        /// <remarks>
        /// Responds to a request from a Stratis Signature Auth Signer. See the [specification](https://github.com/Opdex/SSAS) for futher detail. 
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">Unique identifier for the Stratis ID</param>
        /// <param name="stratisSignatureAuthRequest">The Stratis Signature Auth body</param>
        /// <param name="exp">Unix timestamp indicating when the signature expires (optional)</param>
        /// <returns></returns>
        void AuthPost(string uid, StratisSignatureAuthRequest stratisSignatureAuthRequest, long? exp = default(long?));

        /// <summary>
        /// Stratis Signature Auth
        /// </summary>
        /// <remarks>
        /// Responds to a request from a Stratis Signature Auth Signer. See the [specification](https://github.com/Opdex/SSAS) for futher detail. 
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">Unique identifier for the Stratis ID</param>
        /// <param name="stratisSignatureAuthRequest">The Stratis Signature Auth body</param>
        /// <param name="exp">Unix timestamp indicating when the signature expires (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AuthPostWithHttpInfo(string uid, StratisSignatureAuthRequest stratisSignatureAuthRequest, long? exp = default(long?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthenticationApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Stratis Signature Auth
        /// </summary>
        /// <remarks>
        /// Responds to a request from a Stratis Signature Auth Signer. See the [specification](https://github.com/Opdex/SSAS) for futher detail. 
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">Unique identifier for the Stratis ID</param>
        /// <param name="stratisSignatureAuthRequest">The Stratis Signature Auth body</param>
        /// <param name="exp">Unix timestamp indicating when the signature expires (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AuthPostAsync(string uid, StratisSignatureAuthRequest stratisSignatureAuthRequest, long? exp = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Stratis Signature Auth
        /// </summary>
        /// <remarks>
        /// Responds to a request from a Stratis Signature Auth Signer. See the [specification](https://github.com/Opdex/SSAS) for futher detail. 
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">Unique identifier for the Stratis ID</param>
        /// <param name="stratisSignatureAuthRequest">The Stratis Signature Auth body</param>
        /// <param name="exp">Unix timestamp indicating when the signature expires (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AuthPostWithHttpInfoAsync(string uid, StratisSignatureAuthRequest stratisSignatureAuthRequest, long? exp = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthenticationApi : IAuthenticationApiSync, IAuthenticationApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AuthenticationApi : IAuthenticationApi
    {
        private Opdex.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuthenticationApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuthenticationApi(string basePath)
        {
            this.Configuration = Opdex.Client.Client.Configuration.MergeConfigurations(
                Opdex.Client.Client.GlobalConfiguration.Instance,
                new Opdex.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Opdex.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Opdex.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Opdex.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AuthenticationApi(Opdex.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Opdex.Client.Client.Configuration.MergeConfigurations(
                Opdex.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Opdex.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Opdex.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Opdex.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AuthenticationApi(Opdex.Client.Client.ISynchronousClient client, Opdex.Client.Client.IAsynchronousClient asyncClient, Opdex.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Opdex.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Opdex.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Opdex.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Opdex.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Opdex.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Stratis Signature Auth Responds to a request from a Stratis Signature Auth Signer. See the [specification](https://github.com/Opdex/SSAS) for futher detail. 
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">Unique identifier for the Stratis ID</param>
        /// <param name="stratisSignatureAuthRequest">The Stratis Signature Auth body</param>
        /// <param name="exp">Unix timestamp indicating when the signature expires (optional)</param>
        /// <returns></returns>
        public void AuthPost(string uid, StratisSignatureAuthRequest stratisSignatureAuthRequest, long? exp = default(long?))
        {
            AuthPostWithHttpInfo(uid, stratisSignatureAuthRequest, exp);
        }

        /// <summary>
        /// Stratis Signature Auth Responds to a request from a Stratis Signature Auth Signer. See the [specification](https://github.com/Opdex/SSAS) for futher detail. 
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">Unique identifier for the Stratis ID</param>
        /// <param name="stratisSignatureAuthRequest">The Stratis Signature Auth body</param>
        /// <param name="exp">Unix timestamp indicating when the signature expires (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Opdex.Client.Client.ApiResponse<Object> AuthPostWithHttpInfo(string uid, StratisSignatureAuthRequest stratisSignatureAuthRequest, long? exp = default(long?))
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
            {
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'uid' when calling AuthenticationApi->AuthPost");
            }

            // verify the required parameter 'stratisSignatureAuthRequest' is set
            if (stratisSignatureAuthRequest == null)
            {
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'stratisSignatureAuthRequest' when calling AuthenticationApi->AuthPost");
            }

            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/problem+json"
            };

            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "uid", uid));
            if (exp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "exp", exp));
            }
            localVarRequestOptions.Data = stratisSignatureAuthRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Stratis Signature Auth Responds to a request from a Stratis Signature Auth Signer. See the [specification](https://github.com/Opdex/SSAS) for futher detail. 
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">Unique identifier for the Stratis ID</param>
        /// <param name="stratisSignatureAuthRequest">The Stratis Signature Auth body</param>
        /// <param name="exp">Unix timestamp indicating when the signature expires (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AuthPostAsync(string uid, StratisSignatureAuthRequest stratisSignatureAuthRequest, long? exp = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await AuthPostWithHttpInfoAsync(uid, stratisSignatureAuthRequest, exp, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Stratis Signature Auth Responds to a request from a Stratis Signature Auth Signer. See the [specification](https://github.com/Opdex/SSAS) for futher detail. 
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">Unique identifier for the Stratis ID</param>
        /// <param name="stratisSignatureAuthRequest">The Stratis Signature Auth body</param>
        /// <param name="exp">Unix timestamp indicating when the signature expires (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Opdex.Client.Client.ApiResponse<Object>> AuthPostWithHttpInfoAsync(string uid, StratisSignatureAuthRequest stratisSignatureAuthRequest, long? exp = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
            {
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'uid' when calling AuthenticationApi->AuthPost");
            }

            // verify the required parameter 'stratisSignatureAuthRequest' is set
            if (stratisSignatureAuthRequest == null)
            {
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'stratisSignatureAuthRequest' when calling AuthenticationApi->AuthPost");
            }


            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/problem+json"
            };

            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "uid", uid));
            if (exp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "exp", exp));
            }
            localVarRequestOptions.Data = stratisSignatureAuthRequest;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
