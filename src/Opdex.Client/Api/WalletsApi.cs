/*
 * Opdex Platform API
 *
 * The Opdex Platform Web API is an interface for querying information from the Opdex contract indexer and quoting Opdex smart contract transactions. The Opdex contract indexer is a job that continually runs and stores relevant broadcast transaction data, in a way that represents the current known state of the Opdex protocol at the present time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Opdex.Client.Client;
using Opdex.Client.Model;

namespace Opdex.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWalletsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Approved Allowance
        /// </summary>
        /// <remarks>
        /// Retrieves the allowance of a spender for SRC tokens owned by another address.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address holding the position</param>
        /// <param name="token">Address of the SRC token</param>
        /// <param name="spender">Address approved to spend the token</param>
        /// <returns>ApprovedAllowanceResponse</returns>
        ApprovedAllowanceResponse GetApprovedAllowance(string address, string token, string spender);

        /// <summary>
        /// Get Approved Allowance
        /// </summary>
        /// <remarks>
        /// Retrieves the allowance of a spender for SRC tokens owned by another address.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address holding the position</param>
        /// <param name="token">Address of the SRC token</param>
        /// <param name="spender">Address approved to spend the token</param>
        /// <returns>ApiResponse of ApprovedAllowanceResponse</returns>
        ApiResponse<ApprovedAllowanceResponse> GetApprovedAllowanceWithHttpInfo(string address, string token, string spender);
        /// <summary>
        /// Get Balance
        /// </summary>
        /// <remarks>
        /// Retrieves the indexed balance of a tracked SRC token for an address. If you are retrieving the balance of an SRC token for a new address, or want to forcefully reload a balance, use &#x60;POST /wallets/{address}/balance/{token}&#x60; instead.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address holding the position</param>
        /// <param name="token">Address of the SRC token</param>
        /// <returns>AddressBalanceResponse</returns>
        AddressBalanceResponse GetBalance(string address, string token);

        /// <summary>
        /// Get Balance
        /// </summary>
        /// <remarks>
        /// Retrieves the indexed balance of a tracked SRC token for an address. If you are retrieving the balance of an SRC token for a new address, or want to forcefully reload a balance, use &#x60;POST /wallets/{address}/balance/{token}&#x60; instead.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address holding the position</param>
        /// <param name="token">Address of the SRC token</param>
        /// <returns>ApiResponse of AddressBalanceResponse</returns>
        ApiResponse<AddressBalanceResponse> GetBalanceWithHttpInfo(string address, string token);
        /// <summary>
        /// Get Balances
        /// </summary>
        /// <remarks>
        /// Retrieves details of all indexed token balances for an address. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address holding the position</param>
        /// <param name="tokens">Tokens to retrieve balances for (optional)</param>
        /// <param name="tokenAttributes">Types of tokens to retrieve balances for (optional)</param>
        /// <param name="includeZeroBalances">Include zero balances if true, otherwise zero balances are excluded if false (optional, default to false)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <returns>AddressBalancesResponse</returns>
        AddressBalancesResponse GetBalances(string address, List<string> tokens = default(List<string>), List<TokenAttributeFilter> tokenAttributes = default(List<TokenAttributeFilter>), bool? includeZeroBalances = default(bool?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string));

        /// <summary>
        /// Get Balances
        /// </summary>
        /// <remarks>
        /// Retrieves details of all indexed token balances for an address. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address holding the position</param>
        /// <param name="tokens">Tokens to retrieve balances for (optional)</param>
        /// <param name="tokenAttributes">Types of tokens to retrieve balances for (optional)</param>
        /// <param name="includeZeroBalances">Include zero balances if true, otherwise zero balances are excluded if false (optional, default to false)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <returns>ApiResponse of AddressBalancesResponse</returns>
        ApiResponse<AddressBalancesResponse> GetBalancesWithHttpInfo(string address, List<string> tokens = default(List<string>), List<TokenAttributeFilter> tokenAttributes = default(List<TokenAttributeFilter>), bool? includeZeroBalances = default(bool?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string));
        /// <summary>
        /// Get Mining Position
        /// </summary>
        /// <remarks>
        /// Retrieves details of an Opdex mining position that has been indexed.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address holding the position</param>
        /// <param name="pool">Address of the mining pool</param>
        /// <returns>MiningPositionsResponse</returns>
        MiningPositionsResponse GetMiningPosition(string address, string pool);

        /// <summary>
        /// Get Mining Position
        /// </summary>
        /// <remarks>
        /// Retrieves details of an Opdex mining position that has been indexed.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address holding the position</param>
        /// <param name="pool">Address of the mining pool</param>
        /// <returns>ApiResponse of MiningPositionsResponse</returns>
        ApiResponse<MiningPositionsResponse> GetMiningPositionWithHttpInfo(string address, string pool);
        /// <summary>
        /// Get Mining Positions
        /// </summary>
        /// <remarks>
        /// Retrieves details of all indexed Opdex mining positions for an address. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address holding the position</param>
        /// <param name="miningPools">Mining pools to retrieve positions for (optional)</param>
        /// <param name="liquidityPools">Related liquidity pools to retrieve positions for (optional)</param>
        /// <param name="includeZeroAmounts">Include zero amounts if true, otherwise zero amounts are excluded (optional, default to false)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <returns>MiningPositionsResponse</returns>
        MiningPositionsResponse GetMiningPositions(string address, List<string> miningPools = default(List<string>), List<string> liquidityPools = default(List<string>), bool? includeZeroAmounts = default(bool?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string));

        /// <summary>
        /// Get Mining Positions
        /// </summary>
        /// <remarks>
        /// Retrieves details of all indexed Opdex mining positions for an address. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address holding the position</param>
        /// <param name="miningPools">Mining pools to retrieve positions for (optional)</param>
        /// <param name="liquidityPools">Related liquidity pools to retrieve positions for (optional)</param>
        /// <param name="includeZeroAmounts">Include zero amounts if true, otherwise zero amounts are excluded (optional, default to false)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <returns>ApiResponse of MiningPositionsResponse</returns>
        ApiResponse<MiningPositionsResponse> GetMiningPositionsWithHttpInfo(string address, List<string> miningPools = default(List<string>), List<string> liquidityPools = default(List<string>), bool? includeZeroAmounts = default(bool?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string));
        /// <summary>
        /// Get Staking Position
        /// </summary>
        /// <remarks>
        /// Retrieves details of an Opdex staking position that has been indexed.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address holding the position</param>
        /// <param name="pool">Address of the liquidity pool</param>
        /// <returns>MiningPositionsResponse</returns>
        MiningPositionsResponse GetStakingPosition(string address, string pool);

        /// <summary>
        /// Get Staking Position
        /// </summary>
        /// <remarks>
        /// Retrieves details of an Opdex staking position that has been indexed.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address holding the position</param>
        /// <param name="pool">Address of the liquidity pool</param>
        /// <returns>ApiResponse of MiningPositionsResponse</returns>
        ApiResponse<MiningPositionsResponse> GetStakingPositionWithHttpInfo(string address, string pool);
        /// <summary>
        /// Get Staking Positions
        /// </summary>
        /// <remarks>
        /// Retrieves details of all indexed Opdex staking positions for an address. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address holding the position</param>
        /// <param name="liquidityPools">Liquidity pools to retrieve positions for (optional)</param>
        /// <param name="includeZeroAmounts">Include zero amounts if true, otherwise zero amounts are excluded if false (optional, default to false)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <returns>MiningPositionsResponse</returns>
        MiningPositionsResponse GetStakingPositions(string address, List<string> liquidityPools = default(List<string>), bool? includeZeroAmounts = default(bool?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string));

        /// <summary>
        /// Get Staking Positions
        /// </summary>
        /// <remarks>
        /// Retrieves details of all indexed Opdex staking positions for an address. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address holding the position</param>
        /// <param name="liquidityPools">Liquidity pools to retrieve positions for (optional)</param>
        /// <param name="includeZeroAmounts">Include zero amounts if true, otherwise zero amounts are excluded if false (optional, default to false)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <returns>ApiResponse of MiningPositionsResponse</returns>
        ApiResponse<MiningPositionsResponse> GetStakingPositionsWithHttpInfo(string address, List<string> liquidityPools = default(List<string>), bool? includeZeroAmounts = default(bool?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string));
        /// <summary>
        /// Refresh Balance
        /// </summary>
        /// <remarks>
        /// Retrieves and indexes the latest balance of a tracked SRC token for an address.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address holding the position</param>
        /// <param name="token">Address of the SRC token</param>
        /// <returns>AddressBalanceResponse</returns>
        AddressBalanceResponse RefreshBalance(string address, string token);

        /// <summary>
        /// Refresh Balance
        /// </summary>
        /// <remarks>
        /// Retrieves and indexes the latest balance of a tracked SRC token for an address.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address holding the position</param>
        /// <param name="token">Address of the SRC token</param>
        /// <returns>ApiResponse of AddressBalanceResponse</returns>
        ApiResponse<AddressBalanceResponse> RefreshBalanceWithHttpInfo(string address, string token);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWalletsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get Approved Allowance
        /// </summary>
        /// <remarks>
        /// Retrieves the allowance of a spender for SRC tokens owned by another address.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address holding the position</param>
        /// <param name="token">Address of the SRC token</param>
        /// <param name="spender">Address approved to spend the token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApprovedAllowanceResponse</returns>
        System.Threading.Tasks.Task<ApprovedAllowanceResponse> GetApprovedAllowanceAsync(string address, string token, string spender, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Approved Allowance
        /// </summary>
        /// <remarks>
        /// Retrieves the allowance of a spender for SRC tokens owned by another address.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address holding the position</param>
        /// <param name="token">Address of the SRC token</param>
        /// <param name="spender">Address approved to spend the token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApprovedAllowanceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApprovedAllowanceResponse>> GetApprovedAllowanceWithHttpInfoAsync(string address, string token, string spender, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Balance
        /// </summary>
        /// <remarks>
        /// Retrieves the indexed balance of a tracked SRC token for an address. If you are retrieving the balance of an SRC token for a new address, or want to forcefully reload a balance, use &#x60;POST /wallets/{address}/balance/{token}&#x60; instead.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address holding the position</param>
        /// <param name="token">Address of the SRC token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddressBalanceResponse</returns>
        System.Threading.Tasks.Task<AddressBalanceResponse> GetBalanceAsync(string address, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Balance
        /// </summary>
        /// <remarks>
        /// Retrieves the indexed balance of a tracked SRC token for an address. If you are retrieving the balance of an SRC token for a new address, or want to forcefully reload a balance, use &#x60;POST /wallets/{address}/balance/{token}&#x60; instead.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address holding the position</param>
        /// <param name="token">Address of the SRC token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddressBalanceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddressBalanceResponse>> GetBalanceWithHttpInfoAsync(string address, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Balances
        /// </summary>
        /// <remarks>
        /// Retrieves details of all indexed token balances for an address. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address holding the position</param>
        /// <param name="tokens">Tokens to retrieve balances for (optional)</param>
        /// <param name="tokenAttributes">Types of tokens to retrieve balances for (optional)</param>
        /// <param name="includeZeroBalances">Include zero balances if true, otherwise zero balances are excluded if false (optional, default to false)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddressBalancesResponse</returns>
        System.Threading.Tasks.Task<AddressBalancesResponse> GetBalancesAsync(string address, List<string> tokens = default(List<string>), List<TokenAttributeFilter> tokenAttributes = default(List<TokenAttributeFilter>), bool? includeZeroBalances = default(bool?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Balances
        /// </summary>
        /// <remarks>
        /// Retrieves details of all indexed token balances for an address. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address holding the position</param>
        /// <param name="tokens">Tokens to retrieve balances for (optional)</param>
        /// <param name="tokenAttributes">Types of tokens to retrieve balances for (optional)</param>
        /// <param name="includeZeroBalances">Include zero balances if true, otherwise zero balances are excluded if false (optional, default to false)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddressBalancesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddressBalancesResponse>> GetBalancesWithHttpInfoAsync(string address, List<string> tokens = default(List<string>), List<TokenAttributeFilter> tokenAttributes = default(List<TokenAttributeFilter>), bool? includeZeroBalances = default(bool?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Mining Position
        /// </summary>
        /// <remarks>
        /// Retrieves details of an Opdex mining position that has been indexed.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address holding the position</param>
        /// <param name="pool">Address of the mining pool</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MiningPositionsResponse</returns>
        System.Threading.Tasks.Task<MiningPositionsResponse> GetMiningPositionAsync(string address, string pool, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Mining Position
        /// </summary>
        /// <remarks>
        /// Retrieves details of an Opdex mining position that has been indexed.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address holding the position</param>
        /// <param name="pool">Address of the mining pool</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MiningPositionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MiningPositionsResponse>> GetMiningPositionWithHttpInfoAsync(string address, string pool, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Mining Positions
        /// </summary>
        /// <remarks>
        /// Retrieves details of all indexed Opdex mining positions for an address. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address holding the position</param>
        /// <param name="miningPools">Mining pools to retrieve positions for (optional)</param>
        /// <param name="liquidityPools">Related liquidity pools to retrieve positions for (optional)</param>
        /// <param name="includeZeroAmounts">Include zero amounts if true, otherwise zero amounts are excluded (optional, default to false)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MiningPositionsResponse</returns>
        System.Threading.Tasks.Task<MiningPositionsResponse> GetMiningPositionsAsync(string address, List<string> miningPools = default(List<string>), List<string> liquidityPools = default(List<string>), bool? includeZeroAmounts = default(bool?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Mining Positions
        /// </summary>
        /// <remarks>
        /// Retrieves details of all indexed Opdex mining positions for an address. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address holding the position</param>
        /// <param name="miningPools">Mining pools to retrieve positions for (optional)</param>
        /// <param name="liquidityPools">Related liquidity pools to retrieve positions for (optional)</param>
        /// <param name="includeZeroAmounts">Include zero amounts if true, otherwise zero amounts are excluded (optional, default to false)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MiningPositionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MiningPositionsResponse>> GetMiningPositionsWithHttpInfoAsync(string address, List<string> miningPools = default(List<string>), List<string> liquidityPools = default(List<string>), bool? includeZeroAmounts = default(bool?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Staking Position
        /// </summary>
        /// <remarks>
        /// Retrieves details of an Opdex staking position that has been indexed.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address holding the position</param>
        /// <param name="pool">Address of the liquidity pool</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MiningPositionsResponse</returns>
        System.Threading.Tasks.Task<MiningPositionsResponse> GetStakingPositionAsync(string address, string pool, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Staking Position
        /// </summary>
        /// <remarks>
        /// Retrieves details of an Opdex staking position that has been indexed.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address holding the position</param>
        /// <param name="pool">Address of the liquidity pool</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MiningPositionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MiningPositionsResponse>> GetStakingPositionWithHttpInfoAsync(string address, string pool, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Staking Positions
        /// </summary>
        /// <remarks>
        /// Retrieves details of all indexed Opdex staking positions for an address. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address holding the position</param>
        /// <param name="liquidityPools">Liquidity pools to retrieve positions for (optional)</param>
        /// <param name="includeZeroAmounts">Include zero amounts if true, otherwise zero amounts are excluded if false (optional, default to false)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MiningPositionsResponse</returns>
        System.Threading.Tasks.Task<MiningPositionsResponse> GetStakingPositionsAsync(string address, List<string> liquidityPools = default(List<string>), bool? includeZeroAmounts = default(bool?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Staking Positions
        /// </summary>
        /// <remarks>
        /// Retrieves details of all indexed Opdex staking positions for an address. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address holding the position</param>
        /// <param name="liquidityPools">Liquidity pools to retrieve positions for (optional)</param>
        /// <param name="includeZeroAmounts">Include zero amounts if true, otherwise zero amounts are excluded if false (optional, default to false)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MiningPositionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MiningPositionsResponse>> GetStakingPositionsWithHttpInfoAsync(string address, List<string> liquidityPools = default(List<string>), bool? includeZeroAmounts = default(bool?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Refresh Balance
        /// </summary>
        /// <remarks>
        /// Retrieves and indexes the latest balance of a tracked SRC token for an address.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address holding the position</param>
        /// <param name="token">Address of the SRC token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddressBalanceResponse</returns>
        System.Threading.Tasks.Task<AddressBalanceResponse> RefreshBalanceAsync(string address, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Refresh Balance
        /// </summary>
        /// <remarks>
        /// Retrieves and indexes the latest balance of a tracked SRC token for an address.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address holding the position</param>
        /// <param name="token">Address of the SRC token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddressBalanceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddressBalanceResponse>> RefreshBalanceWithHttpInfoAsync(string address, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWalletsApi : IWalletsApiSync, IWalletsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WalletsApi : IDisposable, IWalletsApi
    {
        private Opdex.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WalletsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public WalletsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WalletsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public WalletsApi(string basePath)
        {
            this.Configuration = Opdex.Client.Client.Configuration.MergeConfigurations(
                Opdex.Client.Client.GlobalConfiguration.Instance,
                new Opdex.Client.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Opdex.Client.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Opdex.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WalletsApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public WalletsApi(Opdex.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Opdex.Client.Client.Configuration.MergeConfigurations(
                Opdex.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Opdex.Client.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Opdex.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WalletsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public WalletsApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WalletsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public WalletsApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Opdex.Client.Client.Configuration.MergeConfigurations(
                Opdex.Client.Client.GlobalConfiguration.Instance,
                new Opdex.Client.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Opdex.Client.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Opdex.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WalletsApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public WalletsApi(HttpClient client, Opdex.Client.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Opdex.Client.Client.Configuration.MergeConfigurations(
                Opdex.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Opdex.Client.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Opdex.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WalletsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public WalletsApi(Opdex.Client.Client.ISynchronousClient client, Opdex.Client.Client.IAsynchronousClient asyncClient, Opdex.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Opdex.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Opdex.Client.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Opdex.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Opdex.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Opdex.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Opdex.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get Approved Allowance Retrieves the allowance of a spender for SRC tokens owned by another address.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address holding the position</param>
        /// <param name="token">Address of the SRC token</param>
        /// <param name="spender">Address approved to spend the token</param>
        /// <returns>ApprovedAllowanceResponse</returns>
        public ApprovedAllowanceResponse GetApprovedAllowance(string address, string token, string spender)
        {
            Opdex.Client.Client.ApiResponse<ApprovedAllowanceResponse> localVarResponse = GetApprovedAllowanceWithHttpInfo(address, token, spender);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Approved Allowance Retrieves the allowance of a spender for SRC tokens owned by another address.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address holding the position</param>
        /// <param name="token">Address of the SRC token</param>
        /// <param name="spender">Address approved to spend the token</param>
        /// <returns>ApiResponse of ApprovedAllowanceResponse</returns>
        public Opdex.Client.Client.ApiResponse<ApprovedAllowanceResponse> GetApprovedAllowanceWithHttpInfo(string address, string token, string spender)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'address' when calling WalletsApi->GetApprovedAllowance");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'token' when calling WalletsApi->GetApprovedAllowance");

            // verify the required parameter 'spender' is set
            if (spender == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'spender' when calling WalletsApi->GetApprovedAllowance");

            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Opdex.Client.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.PathParameters.Add("token", Opdex.Client.Client.ClientUtils.ParameterToString(token)); // path parameter
            localVarRequestOptions.PathParameters.Add("spender", Opdex.Client.Client.ClientUtils.ParameterToString(spender)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<ApprovedAllowanceResponse>("/wallets/{address}/allowance/{token}/approved/{spender}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApprovedAllowance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Approved Allowance Retrieves the allowance of a spender for SRC tokens owned by another address.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address holding the position</param>
        /// <param name="token">Address of the SRC token</param>
        /// <param name="spender">Address approved to spend the token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApprovedAllowanceResponse</returns>
        public async System.Threading.Tasks.Task<ApprovedAllowanceResponse> GetApprovedAllowanceAsync(string address, string token, string spender, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opdex.Client.Client.ApiResponse<ApprovedAllowanceResponse> localVarResponse = await GetApprovedAllowanceWithHttpInfoAsync(address, token, spender, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Approved Allowance Retrieves the allowance of a spender for SRC tokens owned by another address.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address holding the position</param>
        /// <param name="token">Address of the SRC token</param>
        /// <param name="spender">Address approved to spend the token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApprovedAllowanceResponse)</returns>
        public async System.Threading.Tasks.Task<Opdex.Client.Client.ApiResponse<ApprovedAllowanceResponse>> GetApprovedAllowanceWithHttpInfoAsync(string address, string token, string spender, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'address' when calling WalletsApi->GetApprovedAllowance");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'token' when calling WalletsApi->GetApprovedAllowance");

            // verify the required parameter 'spender' is set
            if (spender == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'spender' when calling WalletsApi->GetApprovedAllowance");


            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };


            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Opdex.Client.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.PathParameters.Add("token", Opdex.Client.Client.ClientUtils.ParameterToString(token)); // path parameter
            localVarRequestOptions.PathParameters.Add("spender", Opdex.Client.Client.ClientUtils.ParameterToString(spender)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ApprovedAllowanceResponse>("/wallets/{address}/allowance/{token}/approved/{spender}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApprovedAllowance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Balance Retrieves the indexed balance of a tracked SRC token for an address. If you are retrieving the balance of an SRC token for a new address, or want to forcefully reload a balance, use &#x60;POST /wallets/{address}/balance/{token}&#x60; instead.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address holding the position</param>
        /// <param name="token">Address of the SRC token</param>
        /// <returns>AddressBalanceResponse</returns>
        public AddressBalanceResponse GetBalance(string address, string token)
        {
            Opdex.Client.Client.ApiResponse<AddressBalanceResponse> localVarResponse = GetBalanceWithHttpInfo(address, token);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Balance Retrieves the indexed balance of a tracked SRC token for an address. If you are retrieving the balance of an SRC token for a new address, or want to forcefully reload a balance, use &#x60;POST /wallets/{address}/balance/{token}&#x60; instead.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address holding the position</param>
        /// <param name="token">Address of the SRC token</param>
        /// <returns>ApiResponse of AddressBalanceResponse</returns>
        public Opdex.Client.Client.ApiResponse<AddressBalanceResponse> GetBalanceWithHttpInfo(string address, string token)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'address' when calling WalletsApi->GetBalance");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'token' when calling WalletsApi->GetBalance");

            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Opdex.Client.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.PathParameters.Add("token", Opdex.Client.Client.ClientUtils.ParameterToString(token)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<AddressBalanceResponse>("/wallets/{address}/balance/{token}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBalance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Balance Retrieves the indexed balance of a tracked SRC token for an address. If you are retrieving the balance of an SRC token for a new address, or want to forcefully reload a balance, use &#x60;POST /wallets/{address}/balance/{token}&#x60; instead.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address holding the position</param>
        /// <param name="token">Address of the SRC token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddressBalanceResponse</returns>
        public async System.Threading.Tasks.Task<AddressBalanceResponse> GetBalanceAsync(string address, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opdex.Client.Client.ApiResponse<AddressBalanceResponse> localVarResponse = await GetBalanceWithHttpInfoAsync(address, token, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Balance Retrieves the indexed balance of a tracked SRC token for an address. If you are retrieving the balance of an SRC token for a new address, or want to forcefully reload a balance, use &#x60;POST /wallets/{address}/balance/{token}&#x60; instead.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address holding the position</param>
        /// <param name="token">Address of the SRC token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddressBalanceResponse)</returns>
        public async System.Threading.Tasks.Task<Opdex.Client.Client.ApiResponse<AddressBalanceResponse>> GetBalanceWithHttpInfoAsync(string address, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'address' when calling WalletsApi->GetBalance");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'token' when calling WalletsApi->GetBalance");


            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };


            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Opdex.Client.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.PathParameters.Add("token", Opdex.Client.Client.ClientUtils.ParameterToString(token)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AddressBalanceResponse>("/wallets/{address}/balance/{token}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBalance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Balances Retrieves details of all indexed token balances for an address. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address holding the position</param>
        /// <param name="tokens">Tokens to retrieve balances for (optional)</param>
        /// <param name="tokenAttributes">Types of tokens to retrieve balances for (optional)</param>
        /// <param name="includeZeroBalances">Include zero balances if true, otherwise zero balances are excluded if false (optional, default to false)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <returns>AddressBalancesResponse</returns>
        public AddressBalancesResponse GetBalances(string address, List<string> tokens = default(List<string>), List<TokenAttributeFilter> tokenAttributes = default(List<TokenAttributeFilter>), bool? includeZeroBalances = default(bool?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string))
        {
            Opdex.Client.Client.ApiResponse<AddressBalancesResponse> localVarResponse = GetBalancesWithHttpInfo(address, tokens, tokenAttributes, includeZeroBalances, direction, limit, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Balances Retrieves details of all indexed token balances for an address. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address holding the position</param>
        /// <param name="tokens">Tokens to retrieve balances for (optional)</param>
        /// <param name="tokenAttributes">Types of tokens to retrieve balances for (optional)</param>
        /// <param name="includeZeroBalances">Include zero balances if true, otherwise zero balances are excluded if false (optional, default to false)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <returns>ApiResponse of AddressBalancesResponse</returns>
        public Opdex.Client.Client.ApiResponse<AddressBalancesResponse> GetBalancesWithHttpInfo(string address, List<string> tokens = default(List<string>), List<TokenAttributeFilter> tokenAttributes = default(List<TokenAttributeFilter>), bool? includeZeroBalances = default(bool?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'address' when calling WalletsApi->GetBalances");

            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Opdex.Client.Client.ClientUtils.ParameterToString(address)); // path parameter
            if (tokens != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("multi", "tokens", tokens));
            }
            if (tokenAttributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("multi", "tokenAttributes", tokenAttributes));
            }
            if (includeZeroBalances != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "includeZeroBalances", includeZeroBalances));
            }
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<AddressBalancesResponse>("/wallets/{address}/balance", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBalances", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Balances Retrieves details of all indexed token balances for an address. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address holding the position</param>
        /// <param name="tokens">Tokens to retrieve balances for (optional)</param>
        /// <param name="tokenAttributes">Types of tokens to retrieve balances for (optional)</param>
        /// <param name="includeZeroBalances">Include zero balances if true, otherwise zero balances are excluded if false (optional, default to false)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddressBalancesResponse</returns>
        public async System.Threading.Tasks.Task<AddressBalancesResponse> GetBalancesAsync(string address, List<string> tokens = default(List<string>), List<TokenAttributeFilter> tokenAttributes = default(List<TokenAttributeFilter>), bool? includeZeroBalances = default(bool?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opdex.Client.Client.ApiResponse<AddressBalancesResponse> localVarResponse = await GetBalancesWithHttpInfoAsync(address, tokens, tokenAttributes, includeZeroBalances, direction, limit, cursor, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Balances Retrieves details of all indexed token balances for an address. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address holding the position</param>
        /// <param name="tokens">Tokens to retrieve balances for (optional)</param>
        /// <param name="tokenAttributes">Types of tokens to retrieve balances for (optional)</param>
        /// <param name="includeZeroBalances">Include zero balances if true, otherwise zero balances are excluded if false (optional, default to false)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddressBalancesResponse)</returns>
        public async System.Threading.Tasks.Task<Opdex.Client.Client.ApiResponse<AddressBalancesResponse>> GetBalancesWithHttpInfoAsync(string address, List<string> tokens = default(List<string>), List<TokenAttributeFilter> tokenAttributes = default(List<TokenAttributeFilter>), bool? includeZeroBalances = default(bool?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'address' when calling WalletsApi->GetBalances");


            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };


            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Opdex.Client.Client.ClientUtils.ParameterToString(address)); // path parameter
            if (tokens != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("multi", "tokens", tokens));
            }
            if (tokenAttributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("multi", "tokenAttributes", tokenAttributes));
            }
            if (includeZeroBalances != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "includeZeroBalances", includeZeroBalances));
            }
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AddressBalancesResponse>("/wallets/{address}/balance", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBalances", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Mining Position Retrieves details of an Opdex mining position that has been indexed.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address holding the position</param>
        /// <param name="pool">Address of the mining pool</param>
        /// <returns>MiningPositionsResponse</returns>
        public MiningPositionsResponse GetMiningPosition(string address, string pool)
        {
            Opdex.Client.Client.ApiResponse<MiningPositionsResponse> localVarResponse = GetMiningPositionWithHttpInfo(address, pool);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Mining Position Retrieves details of an Opdex mining position that has been indexed.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address holding the position</param>
        /// <param name="pool">Address of the mining pool</param>
        /// <returns>ApiResponse of MiningPositionsResponse</returns>
        public Opdex.Client.Client.ApiResponse<MiningPositionsResponse> GetMiningPositionWithHttpInfo(string address, string pool)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'address' when calling WalletsApi->GetMiningPosition");

            // verify the required parameter 'pool' is set
            if (pool == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'pool' when calling WalletsApi->GetMiningPosition");

            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Opdex.Client.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.PathParameters.Add("pool", Opdex.Client.Client.ClientUtils.ParameterToString(pool)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<MiningPositionsResponse>("/wallets/{address}/mining/{pool}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMiningPosition", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Mining Position Retrieves details of an Opdex mining position that has been indexed.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address holding the position</param>
        /// <param name="pool">Address of the mining pool</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MiningPositionsResponse</returns>
        public async System.Threading.Tasks.Task<MiningPositionsResponse> GetMiningPositionAsync(string address, string pool, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opdex.Client.Client.ApiResponse<MiningPositionsResponse> localVarResponse = await GetMiningPositionWithHttpInfoAsync(address, pool, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Mining Position Retrieves details of an Opdex mining position that has been indexed.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address holding the position</param>
        /// <param name="pool">Address of the mining pool</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MiningPositionsResponse)</returns>
        public async System.Threading.Tasks.Task<Opdex.Client.Client.ApiResponse<MiningPositionsResponse>> GetMiningPositionWithHttpInfoAsync(string address, string pool, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'address' when calling WalletsApi->GetMiningPosition");

            // verify the required parameter 'pool' is set
            if (pool == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'pool' when calling WalletsApi->GetMiningPosition");


            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };


            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Opdex.Client.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.PathParameters.Add("pool", Opdex.Client.Client.ClientUtils.ParameterToString(pool)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MiningPositionsResponse>("/wallets/{address}/mining/{pool}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMiningPosition", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Mining Positions Retrieves details of all indexed Opdex mining positions for an address. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address holding the position</param>
        /// <param name="miningPools">Mining pools to retrieve positions for (optional)</param>
        /// <param name="liquidityPools">Related liquidity pools to retrieve positions for (optional)</param>
        /// <param name="includeZeroAmounts">Include zero amounts if true, otherwise zero amounts are excluded (optional, default to false)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <returns>MiningPositionsResponse</returns>
        public MiningPositionsResponse GetMiningPositions(string address, List<string> miningPools = default(List<string>), List<string> liquidityPools = default(List<string>), bool? includeZeroAmounts = default(bool?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string))
        {
            Opdex.Client.Client.ApiResponse<MiningPositionsResponse> localVarResponse = GetMiningPositionsWithHttpInfo(address, miningPools, liquidityPools, includeZeroAmounts, direction, limit, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Mining Positions Retrieves details of all indexed Opdex mining positions for an address. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address holding the position</param>
        /// <param name="miningPools">Mining pools to retrieve positions for (optional)</param>
        /// <param name="liquidityPools">Related liquidity pools to retrieve positions for (optional)</param>
        /// <param name="includeZeroAmounts">Include zero amounts if true, otherwise zero amounts are excluded (optional, default to false)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <returns>ApiResponse of MiningPositionsResponse</returns>
        public Opdex.Client.Client.ApiResponse<MiningPositionsResponse> GetMiningPositionsWithHttpInfo(string address, List<string> miningPools = default(List<string>), List<string> liquidityPools = default(List<string>), bool? includeZeroAmounts = default(bool?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'address' when calling WalletsApi->GetMiningPositions");

            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Opdex.Client.Client.ClientUtils.ParameterToString(address)); // path parameter
            if (miningPools != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("multi", "miningPools", miningPools));
            }
            if (liquidityPools != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("multi", "liquidityPools", liquidityPools));
            }
            if (includeZeroAmounts != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "includeZeroAmounts", includeZeroAmounts));
            }
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<MiningPositionsResponse>("/wallets/{address}/mining", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMiningPositions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Mining Positions Retrieves details of all indexed Opdex mining positions for an address. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address holding the position</param>
        /// <param name="miningPools">Mining pools to retrieve positions for (optional)</param>
        /// <param name="liquidityPools">Related liquidity pools to retrieve positions for (optional)</param>
        /// <param name="includeZeroAmounts">Include zero amounts if true, otherwise zero amounts are excluded (optional, default to false)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MiningPositionsResponse</returns>
        public async System.Threading.Tasks.Task<MiningPositionsResponse> GetMiningPositionsAsync(string address, List<string> miningPools = default(List<string>), List<string> liquidityPools = default(List<string>), bool? includeZeroAmounts = default(bool?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opdex.Client.Client.ApiResponse<MiningPositionsResponse> localVarResponse = await GetMiningPositionsWithHttpInfoAsync(address, miningPools, liquidityPools, includeZeroAmounts, direction, limit, cursor, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Mining Positions Retrieves details of all indexed Opdex mining positions for an address. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address holding the position</param>
        /// <param name="miningPools">Mining pools to retrieve positions for (optional)</param>
        /// <param name="liquidityPools">Related liquidity pools to retrieve positions for (optional)</param>
        /// <param name="includeZeroAmounts">Include zero amounts if true, otherwise zero amounts are excluded (optional, default to false)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MiningPositionsResponse)</returns>
        public async System.Threading.Tasks.Task<Opdex.Client.Client.ApiResponse<MiningPositionsResponse>> GetMiningPositionsWithHttpInfoAsync(string address, List<string> miningPools = default(List<string>), List<string> liquidityPools = default(List<string>), bool? includeZeroAmounts = default(bool?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'address' when calling WalletsApi->GetMiningPositions");


            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };


            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Opdex.Client.Client.ClientUtils.ParameterToString(address)); // path parameter
            if (miningPools != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("multi", "miningPools", miningPools));
            }
            if (liquidityPools != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("multi", "liquidityPools", liquidityPools));
            }
            if (includeZeroAmounts != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "includeZeroAmounts", includeZeroAmounts));
            }
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MiningPositionsResponse>("/wallets/{address}/mining", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMiningPositions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Staking Position Retrieves details of an Opdex staking position that has been indexed.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address holding the position</param>
        /// <param name="pool">Address of the liquidity pool</param>
        /// <returns>MiningPositionsResponse</returns>
        public MiningPositionsResponse GetStakingPosition(string address, string pool)
        {
            Opdex.Client.Client.ApiResponse<MiningPositionsResponse> localVarResponse = GetStakingPositionWithHttpInfo(address, pool);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Staking Position Retrieves details of an Opdex staking position that has been indexed.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address holding the position</param>
        /// <param name="pool">Address of the liquidity pool</param>
        /// <returns>ApiResponse of MiningPositionsResponse</returns>
        public Opdex.Client.Client.ApiResponse<MiningPositionsResponse> GetStakingPositionWithHttpInfo(string address, string pool)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'address' when calling WalletsApi->GetStakingPosition");

            // verify the required parameter 'pool' is set
            if (pool == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'pool' when calling WalletsApi->GetStakingPosition");

            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Opdex.Client.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.PathParameters.Add("pool", Opdex.Client.Client.ClientUtils.ParameterToString(pool)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<MiningPositionsResponse>("/wallets/{address}/staking/{pool}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStakingPosition", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Staking Position Retrieves details of an Opdex staking position that has been indexed.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address holding the position</param>
        /// <param name="pool">Address of the liquidity pool</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MiningPositionsResponse</returns>
        public async System.Threading.Tasks.Task<MiningPositionsResponse> GetStakingPositionAsync(string address, string pool, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opdex.Client.Client.ApiResponse<MiningPositionsResponse> localVarResponse = await GetStakingPositionWithHttpInfoAsync(address, pool, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Staking Position Retrieves details of an Opdex staking position that has been indexed.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address holding the position</param>
        /// <param name="pool">Address of the liquidity pool</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MiningPositionsResponse)</returns>
        public async System.Threading.Tasks.Task<Opdex.Client.Client.ApiResponse<MiningPositionsResponse>> GetStakingPositionWithHttpInfoAsync(string address, string pool, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'address' when calling WalletsApi->GetStakingPosition");

            // verify the required parameter 'pool' is set
            if (pool == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'pool' when calling WalletsApi->GetStakingPosition");


            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };


            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Opdex.Client.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.PathParameters.Add("pool", Opdex.Client.Client.ClientUtils.ParameterToString(pool)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MiningPositionsResponse>("/wallets/{address}/staking/{pool}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStakingPosition", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Staking Positions Retrieves details of all indexed Opdex staking positions for an address. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address holding the position</param>
        /// <param name="liquidityPools">Liquidity pools to retrieve positions for (optional)</param>
        /// <param name="includeZeroAmounts">Include zero amounts if true, otherwise zero amounts are excluded if false (optional, default to false)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <returns>MiningPositionsResponse</returns>
        public MiningPositionsResponse GetStakingPositions(string address, List<string> liquidityPools = default(List<string>), bool? includeZeroAmounts = default(bool?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string))
        {
            Opdex.Client.Client.ApiResponse<MiningPositionsResponse> localVarResponse = GetStakingPositionsWithHttpInfo(address, liquidityPools, includeZeroAmounts, direction, limit, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Staking Positions Retrieves details of all indexed Opdex staking positions for an address. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address holding the position</param>
        /// <param name="liquidityPools">Liquidity pools to retrieve positions for (optional)</param>
        /// <param name="includeZeroAmounts">Include zero amounts if true, otherwise zero amounts are excluded if false (optional, default to false)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <returns>ApiResponse of MiningPositionsResponse</returns>
        public Opdex.Client.Client.ApiResponse<MiningPositionsResponse> GetStakingPositionsWithHttpInfo(string address, List<string> liquidityPools = default(List<string>), bool? includeZeroAmounts = default(bool?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'address' when calling WalletsApi->GetStakingPositions");

            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Opdex.Client.Client.ClientUtils.ParameterToString(address)); // path parameter
            if (liquidityPools != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("multi", "liquidityPools", liquidityPools));
            }
            if (includeZeroAmounts != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "includeZeroAmounts", includeZeroAmounts));
            }
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<MiningPositionsResponse>("/wallets/{address}/staking", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStakingPositions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Staking Positions Retrieves details of all indexed Opdex staking positions for an address. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address holding the position</param>
        /// <param name="liquidityPools">Liquidity pools to retrieve positions for (optional)</param>
        /// <param name="includeZeroAmounts">Include zero amounts if true, otherwise zero amounts are excluded if false (optional, default to false)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MiningPositionsResponse</returns>
        public async System.Threading.Tasks.Task<MiningPositionsResponse> GetStakingPositionsAsync(string address, List<string> liquidityPools = default(List<string>), bool? includeZeroAmounts = default(bool?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opdex.Client.Client.ApiResponse<MiningPositionsResponse> localVarResponse = await GetStakingPositionsWithHttpInfoAsync(address, liquidityPools, includeZeroAmounts, direction, limit, cursor, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Staking Positions Retrieves details of all indexed Opdex staking positions for an address. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address holding the position</param>
        /// <param name="liquidityPools">Liquidity pools to retrieve positions for (optional)</param>
        /// <param name="includeZeroAmounts">Include zero amounts if true, otherwise zero amounts are excluded if false (optional, default to false)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MiningPositionsResponse)</returns>
        public async System.Threading.Tasks.Task<Opdex.Client.Client.ApiResponse<MiningPositionsResponse>> GetStakingPositionsWithHttpInfoAsync(string address, List<string> liquidityPools = default(List<string>), bool? includeZeroAmounts = default(bool?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'address' when calling WalletsApi->GetStakingPositions");


            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };


            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Opdex.Client.Client.ClientUtils.ParameterToString(address)); // path parameter
            if (liquidityPools != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("multi", "liquidityPools", liquidityPools));
            }
            if (includeZeroAmounts != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "includeZeroAmounts", includeZeroAmounts));
            }
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MiningPositionsResponse>("/wallets/{address}/staking", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStakingPositions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Refresh Balance Retrieves and indexes the latest balance of a tracked SRC token for an address.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address holding the position</param>
        /// <param name="token">Address of the SRC token</param>
        /// <returns>AddressBalanceResponse</returns>
        public AddressBalanceResponse RefreshBalance(string address, string token)
        {
            Opdex.Client.Client.ApiResponse<AddressBalanceResponse> localVarResponse = RefreshBalanceWithHttpInfo(address, token);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Refresh Balance Retrieves and indexes the latest balance of a tracked SRC token for an address.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address holding the position</param>
        /// <param name="token">Address of the SRC token</param>
        /// <returns>ApiResponse of AddressBalanceResponse</returns>
        public Opdex.Client.Client.ApiResponse<AddressBalanceResponse> RefreshBalanceWithHttpInfo(string address, string token)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'address' when calling WalletsApi->RefreshBalance");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'token' when calling WalletsApi->RefreshBalance");

            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Opdex.Client.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.PathParameters.Add("token", Opdex.Client.Client.ClientUtils.ParameterToString(token)); // path parameter

            // authentication (opdexAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AddressBalanceResponse>("/wallets/{address}/balance/{token}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RefreshBalance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Refresh Balance Retrieves and indexes the latest balance of a tracked SRC token for an address.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address holding the position</param>
        /// <param name="token">Address of the SRC token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddressBalanceResponse</returns>
        public async System.Threading.Tasks.Task<AddressBalanceResponse> RefreshBalanceAsync(string address, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opdex.Client.Client.ApiResponse<AddressBalanceResponse> localVarResponse = await RefreshBalanceWithHttpInfoAsync(address, token, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Refresh Balance Retrieves and indexes the latest balance of a tracked SRC token for an address.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address holding the position</param>
        /// <param name="token">Address of the SRC token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddressBalanceResponse)</returns>
        public async System.Threading.Tasks.Task<Opdex.Client.Client.ApiResponse<AddressBalanceResponse>> RefreshBalanceWithHttpInfoAsync(string address, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'address' when calling WalletsApi->RefreshBalance");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'token' when calling WalletsApi->RefreshBalance");


            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };


            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Opdex.Client.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.PathParameters.Add("token", Opdex.Client.Client.ClientUtils.ParameterToString(token)); // path parameter

            // authentication (opdexAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<AddressBalanceResponse>("/wallets/{address}/balance/{token}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RefreshBalance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
