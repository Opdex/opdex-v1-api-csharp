/*
 * Opdex Platform API
 *
 * The Opdex Platform Web API is an interface for querying information from the Opdex contract indexer and quoting Opdex smart contract transactions. The Opdex contract indexer is a job that continually runs and stores relevant broadcast transaction data, in a way that represents the current known state of the Opdex protocol at the present time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Opdex.Client.Client;
using Opdex.Client.Model;

namespace Opdex.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMiningPoolsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Build Collect Mining Rewards Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a collect mining rewards transaction. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a mining pool</param>
        /// <returns>TransactionQuoteResponse</returns>
        TransactionQuoteResponse BuildCollectMiningRewardsQuote(string pool);

        /// <summary>
        /// Build Collect Mining Rewards Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a collect mining rewards transaction. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a mining pool</param>
        /// <returns>ApiResponse of TransactionQuoteResponse</returns>
        ApiResponse<TransactionQuoteResponse> BuildCollectMiningRewardsQuoteWithHttpInfo(string pool);
        /// <summary>
        /// Build Start Mining Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a start mining transaction. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a mining pool</param>
        /// <param name="quoteStartMiningRequest">Details for a start mining transaction request</param>
        /// <returns>TransactionQuoteResponse</returns>
        TransactionQuoteResponse BuildStartMiningQuote(string pool, QuoteStartMiningRequest quoteStartMiningRequest);

        /// <summary>
        /// Build Start Mining Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a start mining transaction. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a mining pool</param>
        /// <param name="quoteStartMiningRequest">Details for a start mining transaction request</param>
        /// <returns>ApiResponse of TransactionQuoteResponse</returns>
        ApiResponse<TransactionQuoteResponse> BuildStartMiningQuoteWithHttpInfo(string pool, QuoteStartMiningRequest quoteStartMiningRequest);
        /// <summary>
        /// Build Stop Mining Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a stop mining transaction. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a mining pool</param>
        /// <param name="quoteStopMiningRequest">Details for a stop mining transaction request</param>
        /// <returns>TransactionQuoteResponse</returns>
        TransactionQuoteResponse BuildStopMiningQuote(string pool, QuoteStopMiningRequest quoteStopMiningRequest);

        /// <summary>
        /// Build Stop Mining Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a stop mining transaction. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a mining pool</param>
        /// <param name="quoteStopMiningRequest">Details for a stop mining transaction request</param>
        /// <returns>ApiResponse of TransactionQuoteResponse</returns>
        ApiResponse<TransactionQuoteResponse> BuildStopMiningQuoteWithHttpInfo(string pool, QuoteStopMiningRequest quoteStopMiningRequest);
        /// <summary>
        /// Get Mining Pool
        /// </summary>
        /// <remarks>
        /// Retrieves details of a tracked mining pool by its contract address.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a mining pool</param>
        /// <returns>MiningPoolResponse</returns>
        MiningPoolResponse GetMiningPool(string pool);

        /// <summary>
        /// Get Mining Pool
        /// </summary>
        /// <remarks>
        /// Retrieves details of a tracked mining pool by its contract address.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a mining pool</param>
        /// <returns>ApiResponse of MiningPoolResponse</returns>
        ApiResponse<MiningPoolResponse> GetMiningPoolWithHttpInfo(string pool);
        /// <summary>
        /// Get Mining Pools
        /// </summary>
        /// <remarks>
        /// Retrieves details of all tracked mining pools across staking markets. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="liquidityPools">Liquidity pools used for mining (optional)</param>
        /// <param name="miningStatus">Mining pool activity status (optional)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <returns>MiningPoolsResponse</returns>
        MiningPoolsResponse GetMiningPools(List<string> liquidityPools = default(List<string>), MiningActivityStatus? miningStatus = default(MiningActivityStatus?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string));

        /// <summary>
        /// Get Mining Pools
        /// </summary>
        /// <remarks>
        /// Retrieves details of all tracked mining pools across staking markets. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="liquidityPools">Liquidity pools used for mining (optional)</param>
        /// <param name="miningStatus">Mining pool activity status (optional)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <returns>ApiResponse of MiningPoolsResponse</returns>
        ApiResponse<MiningPoolsResponse> GetMiningPoolsWithHttpInfo(List<string> liquidityPools = default(List<string>), MiningActivityStatus? miningStatus = default(MiningActivityStatus?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMiningPoolsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Build Collect Mining Rewards Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a collect mining rewards transaction. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a mining pool</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionQuoteResponse</returns>
        System.Threading.Tasks.Task<TransactionQuoteResponse> BuildCollectMiningRewardsQuoteAsync(string pool, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Build Collect Mining Rewards Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a collect mining rewards transaction. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a mining pool</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionQuoteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionQuoteResponse>> BuildCollectMiningRewardsQuoteWithHttpInfoAsync(string pool, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Build Start Mining Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a start mining transaction. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a mining pool</param>
        /// <param name="quoteStartMiningRequest">Details for a start mining transaction request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionQuoteResponse</returns>
        System.Threading.Tasks.Task<TransactionQuoteResponse> BuildStartMiningQuoteAsync(string pool, QuoteStartMiningRequest quoteStartMiningRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Build Start Mining Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a start mining transaction. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a mining pool</param>
        /// <param name="quoteStartMiningRequest">Details for a start mining transaction request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionQuoteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionQuoteResponse>> BuildStartMiningQuoteWithHttpInfoAsync(string pool, QuoteStartMiningRequest quoteStartMiningRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Build Stop Mining Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a stop mining transaction. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a mining pool</param>
        /// <param name="quoteStopMiningRequest">Details for a stop mining transaction request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionQuoteResponse</returns>
        System.Threading.Tasks.Task<TransactionQuoteResponse> BuildStopMiningQuoteAsync(string pool, QuoteStopMiningRequest quoteStopMiningRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Build Stop Mining Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a stop mining transaction. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a mining pool</param>
        /// <param name="quoteStopMiningRequest">Details for a stop mining transaction request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionQuoteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionQuoteResponse>> BuildStopMiningQuoteWithHttpInfoAsync(string pool, QuoteStopMiningRequest quoteStopMiningRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Mining Pool
        /// </summary>
        /// <remarks>
        /// Retrieves details of a tracked mining pool by its contract address.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a mining pool</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MiningPoolResponse</returns>
        System.Threading.Tasks.Task<MiningPoolResponse> GetMiningPoolAsync(string pool, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Mining Pool
        /// </summary>
        /// <remarks>
        /// Retrieves details of a tracked mining pool by its contract address.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a mining pool</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MiningPoolResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MiningPoolResponse>> GetMiningPoolWithHttpInfoAsync(string pool, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Mining Pools
        /// </summary>
        /// <remarks>
        /// Retrieves details of all tracked mining pools across staking markets. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="liquidityPools">Liquidity pools used for mining (optional)</param>
        /// <param name="miningStatus">Mining pool activity status (optional)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MiningPoolsResponse</returns>
        System.Threading.Tasks.Task<MiningPoolsResponse> GetMiningPoolsAsync(List<string> liquidityPools = default(List<string>), MiningActivityStatus? miningStatus = default(MiningActivityStatus?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Mining Pools
        /// </summary>
        /// <remarks>
        /// Retrieves details of all tracked mining pools across staking markets. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="liquidityPools">Liquidity pools used for mining (optional)</param>
        /// <param name="miningStatus">Mining pool activity status (optional)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MiningPoolsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MiningPoolsResponse>> GetMiningPoolsWithHttpInfoAsync(List<string> liquidityPools = default(List<string>), MiningActivityStatus? miningStatus = default(MiningActivityStatus?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMiningPoolsApi : IMiningPoolsApiSync, IMiningPoolsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MiningPoolsApi : IDisposable, IMiningPoolsApi
    {
        private Opdex.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MiningPoolsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public MiningPoolsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MiningPoolsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public MiningPoolsApi(string basePath)
        {
            this.Configuration = Opdex.Client.Client.Configuration.MergeConfigurations(
                Opdex.Client.Client.GlobalConfiguration.Instance,
                new Opdex.Client.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Opdex.Client.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Opdex.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MiningPoolsApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public MiningPoolsApi(Opdex.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Opdex.Client.Client.Configuration.MergeConfigurations(
                Opdex.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Opdex.Client.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Opdex.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MiningPoolsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public MiningPoolsApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MiningPoolsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public MiningPoolsApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Opdex.Client.Client.Configuration.MergeConfigurations(
                Opdex.Client.Client.GlobalConfiguration.Instance,
                new Opdex.Client.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Opdex.Client.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Opdex.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MiningPoolsApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public MiningPoolsApi(HttpClient client, Opdex.Client.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Opdex.Client.Client.Configuration.MergeConfigurations(
                Opdex.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Opdex.Client.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Opdex.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MiningPoolsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public MiningPoolsApi(Opdex.Client.Client.ISynchronousClient client, Opdex.Client.Client.IAsynchronousClient asyncClient, Opdex.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Opdex.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Opdex.Client.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Opdex.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Opdex.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Opdex.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Opdex.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Build Collect Mining Rewards Transaction Quote Builds a quote for a collect mining rewards transaction. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a mining pool</param>
        /// <returns>TransactionQuoteResponse</returns>
        public TransactionQuoteResponse BuildCollectMiningRewardsQuote(string pool)
        {
            Opdex.Client.Client.ApiResponse<TransactionQuoteResponse> localVarResponse = BuildCollectMiningRewardsQuoteWithHttpInfo(pool);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Build Collect Mining Rewards Transaction Quote Builds a quote for a collect mining rewards transaction. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a mining pool</param>
        /// <returns>ApiResponse of TransactionQuoteResponse</returns>
        public Opdex.Client.Client.ApiResponse<TransactionQuoteResponse> BuildCollectMiningRewardsQuoteWithHttpInfo(string pool)
        {
            // verify the required parameter 'pool' is set
            if (pool == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'pool' when calling MiningPoolsApi->BuildCollectMiningRewardsQuote");

            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("pool", Opdex.Client.Client.ClientUtils.ParameterToString(pool)); // path parameter

            // authentication (opdexAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TransactionQuoteResponse>("/mining-pools/{pool}/collect", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildCollectMiningRewardsQuote", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Build Collect Mining Rewards Transaction Quote Builds a quote for a collect mining rewards transaction. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a mining pool</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionQuoteResponse</returns>
        public async System.Threading.Tasks.Task<TransactionQuoteResponse> BuildCollectMiningRewardsQuoteAsync(string pool, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opdex.Client.Client.ApiResponse<TransactionQuoteResponse> localVarResponse = await BuildCollectMiningRewardsQuoteWithHttpInfoAsync(pool, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Build Collect Mining Rewards Transaction Quote Builds a quote for a collect mining rewards transaction. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a mining pool</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionQuoteResponse)</returns>
        public async System.Threading.Tasks.Task<Opdex.Client.Client.ApiResponse<TransactionQuoteResponse>> BuildCollectMiningRewardsQuoteWithHttpInfoAsync(string pool, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'pool' is set
            if (pool == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'pool' when calling MiningPoolsApi->BuildCollectMiningRewardsQuote");


            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };


            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("pool", Opdex.Client.Client.ClientUtils.ParameterToString(pool)); // path parameter

            // authentication (opdexAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TransactionQuoteResponse>("/mining-pools/{pool}/collect", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildCollectMiningRewardsQuote", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Build Start Mining Transaction Quote Builds a quote for a start mining transaction. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a mining pool</param>
        /// <param name="quoteStartMiningRequest">Details for a start mining transaction request</param>
        /// <returns>TransactionQuoteResponse</returns>
        public TransactionQuoteResponse BuildStartMiningQuote(string pool, QuoteStartMiningRequest quoteStartMiningRequest)
        {
            Opdex.Client.Client.ApiResponse<TransactionQuoteResponse> localVarResponse = BuildStartMiningQuoteWithHttpInfo(pool, quoteStartMiningRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Build Start Mining Transaction Quote Builds a quote for a start mining transaction. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a mining pool</param>
        /// <param name="quoteStartMiningRequest">Details for a start mining transaction request</param>
        /// <returns>ApiResponse of TransactionQuoteResponse</returns>
        public Opdex.Client.Client.ApiResponse<TransactionQuoteResponse> BuildStartMiningQuoteWithHttpInfo(string pool, QuoteStartMiningRequest quoteStartMiningRequest)
        {
            // verify the required parameter 'pool' is set
            if (pool == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'pool' when calling MiningPoolsApi->BuildStartMiningQuote");

            // verify the required parameter 'quoteStartMiningRequest' is set
            if (quoteStartMiningRequest == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'quoteStartMiningRequest' when calling MiningPoolsApi->BuildStartMiningQuote");

            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("pool", Opdex.Client.Client.ClientUtils.ParameterToString(pool)); // path parameter
            localVarRequestOptions.Data = quoteStartMiningRequest;

            // authentication (opdexAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TransactionQuoteResponse>("/mining-pools/{pool}/start", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildStartMiningQuote", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Build Start Mining Transaction Quote Builds a quote for a start mining transaction. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a mining pool</param>
        /// <param name="quoteStartMiningRequest">Details for a start mining transaction request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionQuoteResponse</returns>
        public async System.Threading.Tasks.Task<TransactionQuoteResponse> BuildStartMiningQuoteAsync(string pool, QuoteStartMiningRequest quoteStartMiningRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opdex.Client.Client.ApiResponse<TransactionQuoteResponse> localVarResponse = await BuildStartMiningQuoteWithHttpInfoAsync(pool, quoteStartMiningRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Build Start Mining Transaction Quote Builds a quote for a start mining transaction. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a mining pool</param>
        /// <param name="quoteStartMiningRequest">Details for a start mining transaction request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionQuoteResponse)</returns>
        public async System.Threading.Tasks.Task<Opdex.Client.Client.ApiResponse<TransactionQuoteResponse>> BuildStartMiningQuoteWithHttpInfoAsync(string pool, QuoteStartMiningRequest quoteStartMiningRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'pool' is set
            if (pool == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'pool' when calling MiningPoolsApi->BuildStartMiningQuote");

            // verify the required parameter 'quoteStartMiningRequest' is set
            if (quoteStartMiningRequest == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'quoteStartMiningRequest' when calling MiningPoolsApi->BuildStartMiningQuote");


            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };


            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("pool", Opdex.Client.Client.ClientUtils.ParameterToString(pool)); // path parameter
            localVarRequestOptions.Data = quoteStartMiningRequest;

            // authentication (opdexAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TransactionQuoteResponse>("/mining-pools/{pool}/start", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildStartMiningQuote", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Build Stop Mining Transaction Quote Builds a quote for a stop mining transaction. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a mining pool</param>
        /// <param name="quoteStopMiningRequest">Details for a stop mining transaction request</param>
        /// <returns>TransactionQuoteResponse</returns>
        public TransactionQuoteResponse BuildStopMiningQuote(string pool, QuoteStopMiningRequest quoteStopMiningRequest)
        {
            Opdex.Client.Client.ApiResponse<TransactionQuoteResponse> localVarResponse = BuildStopMiningQuoteWithHttpInfo(pool, quoteStopMiningRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Build Stop Mining Transaction Quote Builds a quote for a stop mining transaction. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a mining pool</param>
        /// <param name="quoteStopMiningRequest">Details for a stop mining transaction request</param>
        /// <returns>ApiResponse of TransactionQuoteResponse</returns>
        public Opdex.Client.Client.ApiResponse<TransactionQuoteResponse> BuildStopMiningQuoteWithHttpInfo(string pool, QuoteStopMiningRequest quoteStopMiningRequest)
        {
            // verify the required parameter 'pool' is set
            if (pool == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'pool' when calling MiningPoolsApi->BuildStopMiningQuote");

            // verify the required parameter 'quoteStopMiningRequest' is set
            if (quoteStopMiningRequest == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'quoteStopMiningRequest' when calling MiningPoolsApi->BuildStopMiningQuote");

            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("pool", Opdex.Client.Client.ClientUtils.ParameterToString(pool)); // path parameter
            localVarRequestOptions.Data = quoteStopMiningRequest;

            // authentication (opdexAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TransactionQuoteResponse>("/mining-pools/{pool}/stop", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildStopMiningQuote", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Build Stop Mining Transaction Quote Builds a quote for a stop mining transaction. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a mining pool</param>
        /// <param name="quoteStopMiningRequest">Details for a stop mining transaction request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionQuoteResponse</returns>
        public async System.Threading.Tasks.Task<TransactionQuoteResponse> BuildStopMiningQuoteAsync(string pool, QuoteStopMiningRequest quoteStopMiningRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opdex.Client.Client.ApiResponse<TransactionQuoteResponse> localVarResponse = await BuildStopMiningQuoteWithHttpInfoAsync(pool, quoteStopMiningRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Build Stop Mining Transaction Quote Builds a quote for a stop mining transaction. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a mining pool</param>
        /// <param name="quoteStopMiningRequest">Details for a stop mining transaction request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionQuoteResponse)</returns>
        public async System.Threading.Tasks.Task<Opdex.Client.Client.ApiResponse<TransactionQuoteResponse>> BuildStopMiningQuoteWithHttpInfoAsync(string pool, QuoteStopMiningRequest quoteStopMiningRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'pool' is set
            if (pool == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'pool' when calling MiningPoolsApi->BuildStopMiningQuote");

            // verify the required parameter 'quoteStopMiningRequest' is set
            if (quoteStopMiningRequest == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'quoteStopMiningRequest' when calling MiningPoolsApi->BuildStopMiningQuote");


            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };


            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("pool", Opdex.Client.Client.ClientUtils.ParameterToString(pool)); // path parameter
            localVarRequestOptions.Data = quoteStopMiningRequest;

            // authentication (opdexAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TransactionQuoteResponse>("/mining-pools/{pool}/stop", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildStopMiningQuote", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Mining Pool Retrieves details of a tracked mining pool by its contract address.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a mining pool</param>
        /// <returns>MiningPoolResponse</returns>
        public MiningPoolResponse GetMiningPool(string pool)
        {
            Opdex.Client.Client.ApiResponse<MiningPoolResponse> localVarResponse = GetMiningPoolWithHttpInfo(pool);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Mining Pool Retrieves details of a tracked mining pool by its contract address.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a mining pool</param>
        /// <returns>ApiResponse of MiningPoolResponse</returns>
        public Opdex.Client.Client.ApiResponse<MiningPoolResponse> GetMiningPoolWithHttpInfo(string pool)
        {
            // verify the required parameter 'pool' is set
            if (pool == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'pool' when calling MiningPoolsApi->GetMiningPool");

            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("pool", Opdex.Client.Client.ClientUtils.ParameterToString(pool)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<MiningPoolResponse>("/mining-pools/{pool}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMiningPool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Mining Pool Retrieves details of a tracked mining pool by its contract address.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a mining pool</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MiningPoolResponse</returns>
        public async System.Threading.Tasks.Task<MiningPoolResponse> GetMiningPoolAsync(string pool, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opdex.Client.Client.ApiResponse<MiningPoolResponse> localVarResponse = await GetMiningPoolWithHttpInfoAsync(pool, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Mining Pool Retrieves details of a tracked mining pool by its contract address.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a mining pool</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MiningPoolResponse)</returns>
        public async System.Threading.Tasks.Task<Opdex.Client.Client.ApiResponse<MiningPoolResponse>> GetMiningPoolWithHttpInfoAsync(string pool, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'pool' is set
            if (pool == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'pool' when calling MiningPoolsApi->GetMiningPool");


            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };


            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("pool", Opdex.Client.Client.ClientUtils.ParameterToString(pool)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MiningPoolResponse>("/mining-pools/{pool}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMiningPool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Mining Pools Retrieves details of all tracked mining pools across staking markets. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="liquidityPools">Liquidity pools used for mining (optional)</param>
        /// <param name="miningStatus">Mining pool activity status (optional)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <returns>MiningPoolsResponse</returns>
        public MiningPoolsResponse GetMiningPools(List<string> liquidityPools = default(List<string>), MiningActivityStatus? miningStatus = default(MiningActivityStatus?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string))
        {
            Opdex.Client.Client.ApiResponse<MiningPoolsResponse> localVarResponse = GetMiningPoolsWithHttpInfo(liquidityPools, miningStatus, direction, limit, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Mining Pools Retrieves details of all tracked mining pools across staking markets. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="liquidityPools">Liquidity pools used for mining (optional)</param>
        /// <param name="miningStatus">Mining pool activity status (optional)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <returns>ApiResponse of MiningPoolsResponse</returns>
        public Opdex.Client.Client.ApiResponse<MiningPoolsResponse> GetMiningPoolsWithHttpInfo(List<string> liquidityPools = default(List<string>), MiningActivityStatus? miningStatus = default(MiningActivityStatus?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string))
        {
            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (liquidityPools != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("multi", "liquidityPools", liquidityPools));
            }
            if (miningStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "miningStatus", miningStatus));
            }
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<MiningPoolsResponse>("/mining-pools", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMiningPools", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Mining Pools Retrieves details of all tracked mining pools across staking markets. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="liquidityPools">Liquidity pools used for mining (optional)</param>
        /// <param name="miningStatus">Mining pool activity status (optional)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MiningPoolsResponse</returns>
        public async System.Threading.Tasks.Task<MiningPoolsResponse> GetMiningPoolsAsync(List<string> liquidityPools = default(List<string>), MiningActivityStatus? miningStatus = default(MiningActivityStatus?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opdex.Client.Client.ApiResponse<MiningPoolsResponse> localVarResponse = await GetMiningPoolsWithHttpInfoAsync(liquidityPools, miningStatus, direction, limit, cursor, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Mining Pools Retrieves details of all tracked mining pools across staking markets. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="liquidityPools">Liquidity pools used for mining (optional)</param>
        /// <param name="miningStatus">Mining pool activity status (optional)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MiningPoolsResponse)</returns>
        public async System.Threading.Tasks.Task<Opdex.Client.Client.ApiResponse<MiningPoolsResponse>> GetMiningPoolsWithHttpInfoAsync(List<string> liquidityPools = default(List<string>), MiningActivityStatus? miningStatus = default(MiningActivityStatus?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };


            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (liquidityPools != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("multi", "liquidityPools", liquidityPools));
            }
            if (miningStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "miningStatus", miningStatus));
            }
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MiningPoolsResponse>("/mining-pools", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMiningPools", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
