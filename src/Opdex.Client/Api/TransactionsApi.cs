/*
 * Opdex Platform API
 *
 * The Opdex Platform Web API is an interface for querying information from the Opdex contract indexer and quoting Opdex smart contract transactions. The Opdex contract indexer is a job that continually runs and stores relevant broadcast transaction data, in a way that represents the current known state of the Opdex protocol at the present time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Opdex.Client.Client;
using Opdex.Client.Model;

namespace Opdex.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITransactionsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Transaction
        /// </summary>
        /// <remarks>
        /// Retrieves details for a tracked Opdex transaction with the supplied hash.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">The SHA256 hash of the transaction to look up</param>
        /// <returns>TransactionResponse</returns>
        TransactionResponse GetTransaction(string hash);

        /// <summary>
        /// Get Transaction
        /// </summary>
        /// <remarks>
        /// Retrieves details for a tracked Opdex transaction with the supplied hash.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">The SHA256 hash of the transaction to look up</param>
        /// <returns>ApiResponse of TransactionResponse</returns>
        ApiResponse<TransactionResponse> GetTransactionWithHttpInfo(string hash);
        /// <summary>
        /// Get Transactions
        /// </summary>
        /// <remarks>
        /// Retrieves details for tracked Opdex transactions. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wallet">Filter transactions by wallet address (optional)</param>
        /// <param name="contracts">Smart contract addresses to include (optional)</param>
        /// <param name="eventTypes">Filter to include transactions with event types (optional)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <returns>TransactionsResponse</returns>
        TransactionsResponse GetTransactions(string wallet = default(string), List<string> contracts = default(List<string>), List<TransactionEventType> eventTypes = default(List<TransactionEventType>), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string));

        /// <summary>
        /// Get Transactions
        /// </summary>
        /// <remarks>
        /// Retrieves details for tracked Opdex transactions. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wallet">Filter transactions by wallet address (optional)</param>
        /// <param name="contracts">Smart contract addresses to include (optional)</param>
        /// <param name="eventTypes">Filter to include transactions with event types (optional)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <returns>ApiResponse of TransactionsResponse</returns>
        ApiResponse<TransactionsResponse> GetTransactionsWithHttpInfo(string wallet = default(string), List<string> contracts = default(List<string>), List<TransactionEventType> eventTypes = default(List<TransactionEventType>), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string));
        /// <summary>
        /// Notify Broadcast
        /// </summary>
        /// <remarks>
        /// Sends notifications to a user about broadcast transactions. This endpoint is intended to be called by a Stratis Transaction Handoff Broadcastor, as a way to notify a user that their transaction has been broadcast. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notifyBroadcastRequest"></param>
        /// <returns></returns>
        void NotifyTransactionBroadcast(NotifyBroadcastRequest notifyBroadcastRequest);

        /// <summary>
        /// Notify Broadcast
        /// </summary>
        /// <remarks>
        /// Sends notifications to a user about broadcast transactions. This endpoint is intended to be called by a Stratis Transaction Handoff Broadcastor, as a way to notify a user that their transaction has been broadcast. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notifyBroadcastRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> NotifyTransactionBroadcastWithHttpInfo(NotifyBroadcastRequest notifyBroadcastRequest);
        /// <summary>
        /// Replay Transaction Quote
        /// </summary>
        /// <remarks>
        /// Replays a previous transaction quote at the current point in time. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replayQuoteRequest"></param>
        /// <returns>TransactionQuoteResponse</returns>
        TransactionQuoteResponse ReplayQuote(ReplayQuoteRequest replayQuoteRequest);

        /// <summary>
        /// Replay Transaction Quote
        /// </summary>
        /// <remarks>
        /// Replays a previous transaction quote at the current point in time. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replayQuoteRequest"></param>
        /// <returns>ApiResponse of TransactionQuoteResponse</returns>
        ApiResponse<TransactionQuoteResponse> ReplayQuoteWithHttpInfo(ReplayQuoteRequest replayQuoteRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITransactionsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get Transaction
        /// </summary>
        /// <remarks>
        /// Retrieves details for a tracked Opdex transaction with the supplied hash.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">The SHA256 hash of the transaction to look up</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionResponse</returns>
        System.Threading.Tasks.Task<TransactionResponse> GetTransactionAsync(string hash, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Transaction
        /// </summary>
        /// <remarks>
        /// Retrieves details for a tracked Opdex transaction with the supplied hash.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">The SHA256 hash of the transaction to look up</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionResponse>> GetTransactionWithHttpInfoAsync(string hash, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Transactions
        /// </summary>
        /// <remarks>
        /// Retrieves details for tracked Opdex transactions. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wallet">Filter transactions by wallet address (optional)</param>
        /// <param name="contracts">Smart contract addresses to include (optional)</param>
        /// <param name="eventTypes">Filter to include transactions with event types (optional)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionsResponse</returns>
        System.Threading.Tasks.Task<TransactionsResponse> GetTransactionsAsync(string wallet = default(string), List<string> contracts = default(List<string>), List<TransactionEventType> eventTypes = default(List<TransactionEventType>), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Transactions
        /// </summary>
        /// <remarks>
        /// Retrieves details for tracked Opdex transactions. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wallet">Filter transactions by wallet address (optional)</param>
        /// <param name="contracts">Smart contract addresses to include (optional)</param>
        /// <param name="eventTypes">Filter to include transactions with event types (optional)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionsResponse>> GetTransactionsWithHttpInfoAsync(string wallet = default(string), List<string> contracts = default(List<string>), List<TransactionEventType> eventTypes = default(List<TransactionEventType>), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Notify Broadcast
        /// </summary>
        /// <remarks>
        /// Sends notifications to a user about broadcast transactions. This endpoint is intended to be called by a Stratis Transaction Handoff Broadcastor, as a way to notify a user that their transaction has been broadcast. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notifyBroadcastRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task NotifyTransactionBroadcastAsync(NotifyBroadcastRequest notifyBroadcastRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Notify Broadcast
        /// </summary>
        /// <remarks>
        /// Sends notifications to a user about broadcast transactions. This endpoint is intended to be called by a Stratis Transaction Handoff Broadcastor, as a way to notify a user that their transaction has been broadcast. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notifyBroadcastRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> NotifyTransactionBroadcastWithHttpInfoAsync(NotifyBroadcastRequest notifyBroadcastRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Replay Transaction Quote
        /// </summary>
        /// <remarks>
        /// Replays a previous transaction quote at the current point in time. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replayQuoteRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionQuoteResponse</returns>
        System.Threading.Tasks.Task<TransactionQuoteResponse> ReplayQuoteAsync(ReplayQuoteRequest replayQuoteRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Replay Transaction Quote
        /// </summary>
        /// <remarks>
        /// Replays a previous transaction quote at the current point in time. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replayQuoteRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionQuoteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionQuoteResponse>> ReplayQuoteWithHttpInfoAsync(ReplayQuoteRequest replayQuoteRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITransactionsApi : ITransactionsApiSync, ITransactionsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TransactionsApi : ITransactionsApi
    {
        private Opdex.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TransactionsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TransactionsApi(string basePath)
        {
            this.Configuration = Opdex.Client.Client.Configuration.MergeConfigurations(
                Opdex.Client.Client.GlobalConfiguration.Instance,
                new Opdex.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Opdex.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Opdex.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Opdex.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TransactionsApi(Opdex.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Opdex.Client.Client.Configuration.MergeConfigurations(
                Opdex.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Opdex.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Opdex.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Opdex.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TransactionsApi(Opdex.Client.Client.ISynchronousClient client, Opdex.Client.Client.IAsynchronousClient asyncClient, Opdex.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Opdex.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Opdex.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Opdex.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Opdex.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Opdex.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get Transaction Retrieves details for a tracked Opdex transaction with the supplied hash.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">The SHA256 hash of the transaction to look up</param>
        /// <returns>TransactionResponse</returns>
        public TransactionResponse GetTransaction(string hash)
        {
            Opdex.Client.Client.ApiResponse<TransactionResponse> localVarResponse = GetTransactionWithHttpInfo(hash);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Transaction Retrieves details for a tracked Opdex transaction with the supplied hash.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">The SHA256 hash of the transaction to look up</param>
        /// <returns>ApiResponse of TransactionResponse</returns>
        public Opdex.Client.Client.ApiResponse<TransactionResponse> GetTransactionWithHttpInfo(string hash)
        {
            // verify the required parameter 'hash' is set
            if (hash == null)
            {
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'hash' when calling TransactionsApi->GetTransaction");
            }

            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("hash", Opdex.Client.Client.ClientUtils.ParameterToString(hash)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<TransactionResponse>("/transaction/{hash}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTransaction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Transaction Retrieves details for a tracked Opdex transaction with the supplied hash.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">The SHA256 hash of the transaction to look up</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionResponse</returns>
        public async System.Threading.Tasks.Task<TransactionResponse> GetTransactionAsync(string hash, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opdex.Client.Client.ApiResponse<TransactionResponse> localVarResponse = await GetTransactionWithHttpInfoAsync(hash, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Transaction Retrieves details for a tracked Opdex transaction with the supplied hash.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">The SHA256 hash of the transaction to look up</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionResponse)</returns>
        public async System.Threading.Tasks.Task<Opdex.Client.Client.ApiResponse<TransactionResponse>> GetTransactionWithHttpInfoAsync(string hash, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'hash' is set
            if (hash == null)
            {
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'hash' when calling TransactionsApi->GetTransaction");
            }


            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("hash", Opdex.Client.Client.ClientUtils.ParameterToString(hash)); // path parameter


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TransactionResponse>("/transaction/{hash}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTransaction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Transactions Retrieves details for tracked Opdex transactions. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wallet">Filter transactions by wallet address (optional)</param>
        /// <param name="contracts">Smart contract addresses to include (optional)</param>
        /// <param name="eventTypes">Filter to include transactions with event types (optional)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <returns>TransactionsResponse</returns>
        public TransactionsResponse GetTransactions(string wallet = default(string), List<string> contracts = default(List<string>), List<TransactionEventType> eventTypes = default(List<TransactionEventType>), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string))
        {
            Opdex.Client.Client.ApiResponse<TransactionsResponse> localVarResponse = GetTransactionsWithHttpInfo(wallet, contracts, eventTypes, direction, limit, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Transactions Retrieves details for tracked Opdex transactions. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wallet">Filter transactions by wallet address (optional)</param>
        /// <param name="contracts">Smart contract addresses to include (optional)</param>
        /// <param name="eventTypes">Filter to include transactions with event types (optional)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <returns>ApiResponse of TransactionsResponse</returns>
        public Opdex.Client.Client.ApiResponse<TransactionsResponse> GetTransactionsWithHttpInfo(string wallet = default(string), List<string> contracts = default(List<string>), List<TransactionEventType> eventTypes = default(List<TransactionEventType>), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string))
        {
            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (wallet != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "wallet", wallet));
            }
            if (contracts != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("multi", "contracts", contracts));
            }
            if (eventTypes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("multi", "eventTypes", eventTypes));
            }
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<TransactionsResponse>("/transactions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTransactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Transactions Retrieves details for tracked Opdex transactions. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wallet">Filter transactions by wallet address (optional)</param>
        /// <param name="contracts">Smart contract addresses to include (optional)</param>
        /// <param name="eventTypes">Filter to include transactions with event types (optional)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionsResponse</returns>
        public async System.Threading.Tasks.Task<TransactionsResponse> GetTransactionsAsync(string wallet = default(string), List<string> contracts = default(List<string>), List<TransactionEventType> eventTypes = default(List<TransactionEventType>), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opdex.Client.Client.ApiResponse<TransactionsResponse> localVarResponse = await GetTransactionsWithHttpInfoAsync(wallet, contracts, eventTypes, direction, limit, cursor, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Transactions Retrieves details for tracked Opdex transactions. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wallet">Filter transactions by wallet address (optional)</param>
        /// <param name="contracts">Smart contract addresses to include (optional)</param>
        /// <param name="eventTypes">Filter to include transactions with event types (optional)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionsResponse)</returns>
        public async System.Threading.Tasks.Task<Opdex.Client.Client.ApiResponse<TransactionsResponse>> GetTransactionsWithHttpInfoAsync(string wallet = default(string), List<string> contracts = default(List<string>), List<TransactionEventType> eventTypes = default(List<TransactionEventType>), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (wallet != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "wallet", wallet));
            }
            if (contracts != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("multi", "contracts", contracts));
            }
            if (eventTypes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("multi", "eventTypes", eventTypes));
            }
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TransactionsResponse>("/transactions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTransactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Notify Broadcast Sends notifications to a user about broadcast transactions. This endpoint is intended to be called by a Stratis Transaction Handoff Broadcastor, as a way to notify a user that their transaction has been broadcast. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notifyBroadcastRequest"></param>
        /// <returns></returns>
        public void NotifyTransactionBroadcast(NotifyBroadcastRequest notifyBroadcastRequest)
        {
            NotifyTransactionBroadcastWithHttpInfo(notifyBroadcastRequest);
        }

        /// <summary>
        /// Notify Broadcast Sends notifications to a user about broadcast transactions. This endpoint is intended to be called by a Stratis Transaction Handoff Broadcastor, as a way to notify a user that their transaction has been broadcast. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notifyBroadcastRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Opdex.Client.Client.ApiResponse<Object> NotifyTransactionBroadcastWithHttpInfo(NotifyBroadcastRequest notifyBroadcastRequest)
        {
            // verify the required parameter 'notifyBroadcastRequest' is set
            if (notifyBroadcastRequest == null)
            {
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'notifyBroadcastRequest' when calling TransactionsApi->NotifyTransactionBroadcast");
            }

            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/problem+json"
            };

            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = notifyBroadcastRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/transactions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NotifyTransactionBroadcast", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Notify Broadcast Sends notifications to a user about broadcast transactions. This endpoint is intended to be called by a Stratis Transaction Handoff Broadcastor, as a way to notify a user that their transaction has been broadcast. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notifyBroadcastRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task NotifyTransactionBroadcastAsync(NotifyBroadcastRequest notifyBroadcastRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await NotifyTransactionBroadcastWithHttpInfoAsync(notifyBroadcastRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Notify Broadcast Sends notifications to a user about broadcast transactions. This endpoint is intended to be called by a Stratis Transaction Handoff Broadcastor, as a way to notify a user that their transaction has been broadcast. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notifyBroadcastRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Opdex.Client.Client.ApiResponse<Object>> NotifyTransactionBroadcastWithHttpInfoAsync(NotifyBroadcastRequest notifyBroadcastRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'notifyBroadcastRequest' is set
            if (notifyBroadcastRequest == null)
            {
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'notifyBroadcastRequest' when calling TransactionsApi->NotifyTransactionBroadcast");
            }


            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/problem+json"
            };

            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = notifyBroadcastRequest;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/transactions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NotifyTransactionBroadcast", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replay Transaction Quote Replays a previous transaction quote at the current point in time. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replayQuoteRequest"></param>
        /// <returns>TransactionQuoteResponse</returns>
        public TransactionQuoteResponse ReplayQuote(ReplayQuoteRequest replayQuoteRequest)
        {
            Opdex.Client.Client.ApiResponse<TransactionQuoteResponse> localVarResponse = ReplayQuoteWithHttpInfo(replayQuoteRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Replay Transaction Quote Replays a previous transaction quote at the current point in time. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replayQuoteRequest"></param>
        /// <returns>ApiResponse of TransactionQuoteResponse</returns>
        public Opdex.Client.Client.ApiResponse<TransactionQuoteResponse> ReplayQuoteWithHttpInfo(ReplayQuoteRequest replayQuoteRequest)
        {
            // verify the required parameter 'replayQuoteRequest' is set
            if (replayQuoteRequest == null)
            {
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'replayQuoteRequest' when calling TransactionsApi->ReplayQuote");
            }

            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = replayQuoteRequest;

            // authentication (opdexAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TransactionQuoteResponse>("/transaction/replay-quote", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReplayQuote", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replay Transaction Quote Replays a previous transaction quote at the current point in time. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replayQuoteRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionQuoteResponse</returns>
        public async System.Threading.Tasks.Task<TransactionQuoteResponse> ReplayQuoteAsync(ReplayQuoteRequest replayQuoteRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opdex.Client.Client.ApiResponse<TransactionQuoteResponse> localVarResponse = await ReplayQuoteWithHttpInfoAsync(replayQuoteRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Replay Transaction Quote Replays a previous transaction quote at the current point in time. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replayQuoteRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionQuoteResponse)</returns>
        public async System.Threading.Tasks.Task<Opdex.Client.Client.ApiResponse<TransactionQuoteResponse>> ReplayQuoteWithHttpInfoAsync(ReplayQuoteRequest replayQuoteRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'replayQuoteRequest' is set
            if (replayQuoteRequest == null)
            {
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'replayQuoteRequest' when calling TransactionsApi->ReplayQuote");
            }


            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = replayQuoteRequest;

            // authentication (opdexAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TransactionQuoteResponse>("/transaction/replay-quote", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReplayQuote", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
