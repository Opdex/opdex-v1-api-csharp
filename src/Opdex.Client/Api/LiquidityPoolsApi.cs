/*
 * Opdex Platform API
 *
 * The Opdex Platform Web API is an interface for querying information from the Opdex contract indexer and quoting Opdex smart contract transactions. The Opdex contract indexer is a job that continually runs and stores relevant broadcast transaction data, in a way that represents the current known state of the Opdex protocol at the present time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Opdex.Client.Client;
using Opdex.Client.Model;

namespace Opdex.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILiquidityPoolsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Build Add Liquidity Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a transaction to add liquidity to an Opdex liquidity pool. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <param name="quoteAddLiquidityRequest"></param>
        /// <returns>TransactionQuoteResponse</returns>
        TransactionQuoteResponse BuildAddLiquidityQuote(string pool, QuoteAddLiquidityRequest quoteAddLiquidityRequest);

        /// <summary>
        /// Build Add Liquidity Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a transaction to add liquidity to an Opdex liquidity pool. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <param name="quoteAddLiquidityRequest"></param>
        /// <returns>ApiResponse of TransactionQuoteResponse</returns>
        ApiResponse<TransactionQuoteResponse> BuildAddLiquidityQuoteWithHttpInfo(string pool, QuoteAddLiquidityRequest quoteAddLiquidityRequest);
        /// <summary>
        /// Build Collect Staking Rewards Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a transaction to collect staking rewards from an Opdex liquidity pool. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <param name="quoteCollectStakingRewardsRequest"></param>
        /// <returns>TransactionQuoteResponse</returns>
        TransactionQuoteResponse BuildCollectStakingRewardsQuote(string pool, QuoteCollectStakingRewardsRequest quoteCollectStakingRewardsRequest);

        /// <summary>
        /// Build Collect Staking Rewards Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a transaction to collect staking rewards from an Opdex liquidity pool. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <param name="quoteCollectStakingRewardsRequest"></param>
        /// <returns>ApiResponse of TransactionQuoteResponse</returns>
        ApiResponse<TransactionQuoteResponse> BuildCollectStakingRewardsQuoteWithHttpInfo(string pool, QuoteCollectStakingRewardsRequest quoteCollectStakingRewardsRequest);
        /// <summary>
        /// Build Create Liquidity Pool Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a transaction to create an Opdex liquidity pool. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteCreateLiquidityPoolRequest"> (optional)</param>
        /// <returns>TransactionQuoteResponse</returns>
        TransactionQuoteResponse BuildCreateLiquidityPoolQuote(QuoteCreateLiquidityPoolRequest quoteCreateLiquidityPoolRequest = default(QuoteCreateLiquidityPoolRequest));

        /// <summary>
        /// Build Create Liquidity Pool Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a transaction to create an Opdex liquidity pool. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteCreateLiquidityPoolRequest"> (optional)</param>
        /// <returns>ApiResponse of TransactionQuoteResponse</returns>
        ApiResponse<TransactionQuoteResponse> BuildCreateLiquidityPoolQuoteWithHttpInfo(QuoteCreateLiquidityPoolRequest quoteCreateLiquidityPoolRequest = default(QuoteCreateLiquidityPoolRequest));
        /// <summary>
        /// Build Remove Liquidity Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a transaction to remove liquidity from an Opdex liquidity pool. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <param name="quoteRemoveLiquidityRequest"></param>
        /// <returns>TransactionQuoteResponse</returns>
        TransactionQuoteResponse BuildRemoveLiquidityQuote(string pool, QuoteRemoveLiquidityRequest quoteRemoveLiquidityRequest);

        /// <summary>
        /// Build Remove Liquidity Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a transaction to remove liquidity from an Opdex liquidity pool. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <param name="quoteRemoveLiquidityRequest"></param>
        /// <returns>ApiResponse of TransactionQuoteResponse</returns>
        ApiResponse<TransactionQuoteResponse> BuildRemoveLiquidityQuoteWithHttpInfo(string pool, QuoteRemoveLiquidityRequest quoteRemoveLiquidityRequest);
        /// <summary>
        /// Build Skim Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a transaction to skim an Opdex liquidity pool. This transaction forces the token balances to equal the current reserves. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <param name="quoteSkimRequest"></param>
        /// <returns>TransactionQuoteResponse</returns>
        TransactionQuoteResponse BuildSkimQuote(string pool, QuoteSkimRequest quoteSkimRequest);

        /// <summary>
        /// Build Skim Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a transaction to skim an Opdex liquidity pool. This transaction forces the token balances to equal the current reserves. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <param name="quoteSkimRequest"></param>
        /// <returns>ApiResponse of TransactionQuoteResponse</returns>
        ApiResponse<TransactionQuoteResponse> BuildSkimQuoteWithHttpInfo(string pool, QuoteSkimRequest quoteSkimRequest);
        /// <summary>
        /// Build Start Staking Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a transaction to begin staking in an Opdex liquidity pool. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <param name="quoteStartStakingRequest"></param>
        /// <returns>TransactionQuoteResponse</returns>
        TransactionQuoteResponse BuildStartStakingQuote(string pool, QuoteStartStakingRequest quoteStartStakingRequest);

        /// <summary>
        /// Build Start Staking Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a transaction to begin staking in an Opdex liquidity pool. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <param name="quoteStartStakingRequest"></param>
        /// <returns>ApiResponse of TransactionQuoteResponse</returns>
        ApiResponse<TransactionQuoteResponse> BuildStartStakingQuoteWithHttpInfo(string pool, QuoteStartStakingRequest quoteStartStakingRequest);
        /// <summary>
        /// Build Stop Staking Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a transaction to stop staking in an Opdex liquidity pool. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <param name="quoteStopStakingRequest"></param>
        /// <returns>TransactionQuoteResponse</returns>
        TransactionQuoteResponse BuildStopStakingQuote(string pool, QuoteStopStakingRequest quoteStopStakingRequest);

        /// <summary>
        /// Build Stop Staking Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a transaction to stop staking in an Opdex liquidity pool. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <param name="quoteStopStakingRequest"></param>
        /// <returns>ApiResponse of TransactionQuoteResponse</returns>
        ApiResponse<TransactionQuoteResponse> BuildStopStakingQuoteWithHttpInfo(string pool, QuoteStopStakingRequest quoteStopStakingRequest);
        /// <summary>
        /// Build Sync Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a transaction to sync an Opdex liquidity pool. This transaction forces the reserves to equal the current token balances. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <returns>TransactionQuoteResponse</returns>
        TransactionQuoteResponse BuildSyncQuote(string pool);

        /// <summary>
        /// Build Sync Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a transaction to sync an Opdex liquidity pool. This transaction forces the reserves to equal the current token balances. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <returns>ApiResponse of TransactionQuoteResponse</returns>
        ApiResponse<TransactionQuoteResponse> BuildSyncQuoteWithHttpInfo(string pool);
        /// <summary>
        /// Add Liquidity Amount In Quote
        /// </summary>
        /// <remarks>
        /// Retrieves an estimate for the amount of a token required to be added, give an input amount of the other token in the pair.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <param name="liquidityAmountInQuoteRequest"></param>
        /// <returns>LiquidityAmountInQuoteResponse</returns>
        LiquidityAmountInQuoteResponse GetLiquidityAmountInQuote(string pool, LiquidityAmountInQuoteRequest liquidityAmountInQuoteRequest);

        /// <summary>
        /// Add Liquidity Amount In Quote
        /// </summary>
        /// <remarks>
        /// Retrieves an estimate for the amount of a token required to be added, give an input amount of the other token in the pair.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <param name="liquidityAmountInQuoteRequest"></param>
        /// <returns>ApiResponse of LiquidityAmountInQuoteResponse</returns>
        ApiResponse<LiquidityAmountInQuoteResponse> GetLiquidityAmountInQuoteWithHttpInfo(string pool, LiquidityAmountInQuoteRequest liquidityAmountInQuoteRequest);
        /// <summary>
        /// Get Liquidity Pool
        /// </summary>
        /// <remarks>
        /// Retrieve details for an Opdex liquidity pool.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <returns>LiquidityPoolResponse</returns>
        LiquidityPoolResponse GetLiquidityPool(string pool);

        /// <summary>
        /// Get Liquidity Pool
        /// </summary>
        /// <remarks>
        /// Retrieve details for an Opdex liquidity pool.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <returns>ApiResponse of LiquidityPoolResponse</returns>
        ApiResponse<LiquidityPoolResponse> GetLiquidityPoolWithHttpInfo(string pool);
        /// <summary>
        /// Get Liquidity Pool History
        /// </summary>
        /// <remarks>
        /// Retrieves historical transactions, reserves, rewards, volume, cost and staking data for an Opdex liquidity pool. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <param name="startDateTime">Start time for which to retrieve snapshots</param>
        /// <param name="endDateTime">End time for which to retrieve snapshots</param>
        /// <param name="interval">Time range between each snapshot (optional)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page; defaults to 168 for hourly snapshots (1 week), or 28 for daily snapshots (4 weeks) (optional, default to 168)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <returns>LiquidityPoolSnapshotsResponse</returns>
        LiquidityPoolSnapshotsResponse GetLiquidityPoolHistory(string pool, DateTime startDateTime, DateTime endDateTime, Interval? interval = default(Interval?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string));

        /// <summary>
        /// Get Liquidity Pool History
        /// </summary>
        /// <remarks>
        /// Retrieves historical transactions, reserves, rewards, volume, cost and staking data for an Opdex liquidity pool. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <param name="startDateTime">Start time for which to retrieve snapshots</param>
        /// <param name="endDateTime">End time for which to retrieve snapshots</param>
        /// <param name="interval">Time range between each snapshot (optional)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page; defaults to 168 for hourly snapshots (1 week), or 28 for daily snapshots (4 weeks) (optional, default to 168)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <returns>ApiResponse of LiquidityPoolSnapshotsResponse</returns>
        ApiResponse<LiquidityPoolSnapshotsResponse> GetLiquidityPoolHistoryWithHttpInfo(string pool, DateTime startDateTime, DateTime endDateTime, Interval? interval = default(Interval?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string));
        /// <summary>
        /// Get Liquidity Pools
        /// </summary>
        /// <remarks>
        /// Retrieves details for Opdex liquidity pools across one or many markets. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword">Keyword search against liquidity pool addresses and names (optional)</param>
        /// <param name="markets">Addresses of markets to search within (optional)</param>
        /// <param name="liquidityPools">Addresses of liquidity pools to fetch (optional)</param>
        /// <param name="tokens">Addresses of SRC tokens paired in pools (optional)</param>
        /// <param name="stakingStatus">Staking status filter; default is not to filter (optional)</param>
        /// <param name="nominationStatus">Nomination status filter; default is not to filter (optional)</param>
        /// <param name="miningStatus">Mining status filter; default is not to filter (optional)</param>
        /// <param name="orderBy">Property by which to sort results (optional)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <returns>LiquidityPoolsResponse</returns>
        LiquidityPoolsResponse GetLiquidityPools(string keyword = default(string), List<string> markets = default(List<string>), List<string> liquidityPools = default(List<string>), List<string> tokens = default(List<string>), StakingStatusFilter? stakingStatus = default(StakingStatusFilter?), NominationStatusFilter? nominationStatus = default(NominationStatusFilter?), MiningStatusFilter? miningStatus = default(MiningStatusFilter?), LiquidityPoolOrderByType? orderBy = default(LiquidityPoolOrderByType?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string));

        /// <summary>
        /// Get Liquidity Pools
        /// </summary>
        /// <remarks>
        /// Retrieves details for Opdex liquidity pools across one or many markets. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword">Keyword search against liquidity pool addresses and names (optional)</param>
        /// <param name="markets">Addresses of markets to search within (optional)</param>
        /// <param name="liquidityPools">Addresses of liquidity pools to fetch (optional)</param>
        /// <param name="tokens">Addresses of SRC tokens paired in pools (optional)</param>
        /// <param name="stakingStatus">Staking status filter; default is not to filter (optional)</param>
        /// <param name="nominationStatus">Nomination status filter; default is not to filter (optional)</param>
        /// <param name="miningStatus">Mining status filter; default is not to filter (optional)</param>
        /// <param name="orderBy">Property by which to sort results (optional)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <returns>ApiResponse of LiquidityPoolsResponse</returns>
        ApiResponse<LiquidityPoolsResponse> GetLiquidityPoolsWithHttpInfo(string keyword = default(string), List<string> markets = default(List<string>), List<string> liquidityPools = default(List<string>), List<string> tokens = default(List<string>), StakingStatusFilter? stakingStatus = default(StakingStatusFilter?), NominationStatusFilter? nominationStatus = default(NominationStatusFilter?), MiningStatusFilter? miningStatus = default(MiningStatusFilter?), LiquidityPoolOrderByType? orderBy = default(LiquidityPoolOrderByType?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILiquidityPoolsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Build Add Liquidity Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a transaction to add liquidity to an Opdex liquidity pool. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <param name="quoteAddLiquidityRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionQuoteResponse</returns>
        System.Threading.Tasks.Task<TransactionQuoteResponse> BuildAddLiquidityQuoteAsync(string pool, QuoteAddLiquidityRequest quoteAddLiquidityRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Build Add Liquidity Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a transaction to add liquidity to an Opdex liquidity pool. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <param name="quoteAddLiquidityRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionQuoteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionQuoteResponse>> BuildAddLiquidityQuoteWithHttpInfoAsync(string pool, QuoteAddLiquidityRequest quoteAddLiquidityRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Build Collect Staking Rewards Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a transaction to collect staking rewards from an Opdex liquidity pool. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <param name="quoteCollectStakingRewardsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionQuoteResponse</returns>
        System.Threading.Tasks.Task<TransactionQuoteResponse> BuildCollectStakingRewardsQuoteAsync(string pool, QuoteCollectStakingRewardsRequest quoteCollectStakingRewardsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Build Collect Staking Rewards Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a transaction to collect staking rewards from an Opdex liquidity pool. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <param name="quoteCollectStakingRewardsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionQuoteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionQuoteResponse>> BuildCollectStakingRewardsQuoteWithHttpInfoAsync(string pool, QuoteCollectStakingRewardsRequest quoteCollectStakingRewardsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Build Create Liquidity Pool Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a transaction to create an Opdex liquidity pool. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteCreateLiquidityPoolRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionQuoteResponse</returns>
        System.Threading.Tasks.Task<TransactionQuoteResponse> BuildCreateLiquidityPoolQuoteAsync(QuoteCreateLiquidityPoolRequest quoteCreateLiquidityPoolRequest = default(QuoteCreateLiquidityPoolRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Build Create Liquidity Pool Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a transaction to create an Opdex liquidity pool. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteCreateLiquidityPoolRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionQuoteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionQuoteResponse>> BuildCreateLiquidityPoolQuoteWithHttpInfoAsync(QuoteCreateLiquidityPoolRequest quoteCreateLiquidityPoolRequest = default(QuoteCreateLiquidityPoolRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Build Remove Liquidity Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a transaction to remove liquidity from an Opdex liquidity pool. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <param name="quoteRemoveLiquidityRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionQuoteResponse</returns>
        System.Threading.Tasks.Task<TransactionQuoteResponse> BuildRemoveLiquidityQuoteAsync(string pool, QuoteRemoveLiquidityRequest quoteRemoveLiquidityRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Build Remove Liquidity Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a transaction to remove liquidity from an Opdex liquidity pool. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <param name="quoteRemoveLiquidityRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionQuoteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionQuoteResponse>> BuildRemoveLiquidityQuoteWithHttpInfoAsync(string pool, QuoteRemoveLiquidityRequest quoteRemoveLiquidityRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Build Skim Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a transaction to skim an Opdex liquidity pool. This transaction forces the token balances to equal the current reserves. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <param name="quoteSkimRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionQuoteResponse</returns>
        System.Threading.Tasks.Task<TransactionQuoteResponse> BuildSkimQuoteAsync(string pool, QuoteSkimRequest quoteSkimRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Build Skim Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a transaction to skim an Opdex liquidity pool. This transaction forces the token balances to equal the current reserves. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <param name="quoteSkimRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionQuoteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionQuoteResponse>> BuildSkimQuoteWithHttpInfoAsync(string pool, QuoteSkimRequest quoteSkimRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Build Start Staking Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a transaction to begin staking in an Opdex liquidity pool. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <param name="quoteStartStakingRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionQuoteResponse</returns>
        System.Threading.Tasks.Task<TransactionQuoteResponse> BuildStartStakingQuoteAsync(string pool, QuoteStartStakingRequest quoteStartStakingRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Build Start Staking Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a transaction to begin staking in an Opdex liquidity pool. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <param name="quoteStartStakingRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionQuoteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionQuoteResponse>> BuildStartStakingQuoteWithHttpInfoAsync(string pool, QuoteStartStakingRequest quoteStartStakingRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Build Stop Staking Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a transaction to stop staking in an Opdex liquidity pool. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <param name="quoteStopStakingRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionQuoteResponse</returns>
        System.Threading.Tasks.Task<TransactionQuoteResponse> BuildStopStakingQuoteAsync(string pool, QuoteStopStakingRequest quoteStopStakingRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Build Stop Staking Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a transaction to stop staking in an Opdex liquidity pool. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <param name="quoteStopStakingRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionQuoteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionQuoteResponse>> BuildStopStakingQuoteWithHttpInfoAsync(string pool, QuoteStopStakingRequest quoteStopStakingRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Build Sync Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a transaction to sync an Opdex liquidity pool. This transaction forces the reserves to equal the current token balances. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionQuoteResponse</returns>
        System.Threading.Tasks.Task<TransactionQuoteResponse> BuildSyncQuoteAsync(string pool, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Build Sync Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a transaction to sync an Opdex liquidity pool. This transaction forces the reserves to equal the current token balances. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionQuoteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionQuoteResponse>> BuildSyncQuoteWithHttpInfoAsync(string pool, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add Liquidity Amount In Quote
        /// </summary>
        /// <remarks>
        /// Retrieves an estimate for the amount of a token required to be added, give an input amount of the other token in the pair.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <param name="liquidityAmountInQuoteRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LiquidityAmountInQuoteResponse</returns>
        System.Threading.Tasks.Task<LiquidityAmountInQuoteResponse> GetLiquidityAmountInQuoteAsync(string pool, LiquidityAmountInQuoteRequest liquidityAmountInQuoteRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add Liquidity Amount In Quote
        /// </summary>
        /// <remarks>
        /// Retrieves an estimate for the amount of a token required to be added, give an input amount of the other token in the pair.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <param name="liquidityAmountInQuoteRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LiquidityAmountInQuoteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LiquidityAmountInQuoteResponse>> GetLiquidityAmountInQuoteWithHttpInfoAsync(string pool, LiquidityAmountInQuoteRequest liquidityAmountInQuoteRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Liquidity Pool
        /// </summary>
        /// <remarks>
        /// Retrieve details for an Opdex liquidity pool.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LiquidityPoolResponse</returns>
        System.Threading.Tasks.Task<LiquidityPoolResponse> GetLiquidityPoolAsync(string pool, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Liquidity Pool
        /// </summary>
        /// <remarks>
        /// Retrieve details for an Opdex liquidity pool.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LiquidityPoolResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LiquidityPoolResponse>> GetLiquidityPoolWithHttpInfoAsync(string pool, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Liquidity Pool History
        /// </summary>
        /// <remarks>
        /// Retrieves historical transactions, reserves, rewards, volume, cost and staking data for an Opdex liquidity pool. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <param name="startDateTime">Start time for which to retrieve snapshots</param>
        /// <param name="endDateTime">End time for which to retrieve snapshots</param>
        /// <param name="interval">Time range between each snapshot (optional)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page; defaults to 168 for hourly snapshots (1 week), or 28 for daily snapshots (4 weeks) (optional, default to 168)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LiquidityPoolSnapshotsResponse</returns>
        System.Threading.Tasks.Task<LiquidityPoolSnapshotsResponse> GetLiquidityPoolHistoryAsync(string pool, DateTime startDateTime, DateTime endDateTime, Interval? interval = default(Interval?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Liquidity Pool History
        /// </summary>
        /// <remarks>
        /// Retrieves historical transactions, reserves, rewards, volume, cost and staking data for an Opdex liquidity pool. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <param name="startDateTime">Start time for which to retrieve snapshots</param>
        /// <param name="endDateTime">End time for which to retrieve snapshots</param>
        /// <param name="interval">Time range between each snapshot (optional)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page; defaults to 168 for hourly snapshots (1 week), or 28 for daily snapshots (4 weeks) (optional, default to 168)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LiquidityPoolSnapshotsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LiquidityPoolSnapshotsResponse>> GetLiquidityPoolHistoryWithHttpInfoAsync(string pool, DateTime startDateTime, DateTime endDateTime, Interval? interval = default(Interval?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Liquidity Pools
        /// </summary>
        /// <remarks>
        /// Retrieves details for Opdex liquidity pools across one or many markets. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword">Keyword search against liquidity pool addresses and names (optional)</param>
        /// <param name="markets">Addresses of markets to search within (optional)</param>
        /// <param name="liquidityPools">Addresses of liquidity pools to fetch (optional)</param>
        /// <param name="tokens">Addresses of SRC tokens paired in pools (optional)</param>
        /// <param name="stakingStatus">Staking status filter; default is not to filter (optional)</param>
        /// <param name="nominationStatus">Nomination status filter; default is not to filter (optional)</param>
        /// <param name="miningStatus">Mining status filter; default is not to filter (optional)</param>
        /// <param name="orderBy">Property by which to sort results (optional)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LiquidityPoolsResponse</returns>
        System.Threading.Tasks.Task<LiquidityPoolsResponse> GetLiquidityPoolsAsync(string keyword = default(string), List<string> markets = default(List<string>), List<string> liquidityPools = default(List<string>), List<string> tokens = default(List<string>), StakingStatusFilter? stakingStatus = default(StakingStatusFilter?), NominationStatusFilter? nominationStatus = default(NominationStatusFilter?), MiningStatusFilter? miningStatus = default(MiningStatusFilter?), LiquidityPoolOrderByType? orderBy = default(LiquidityPoolOrderByType?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Liquidity Pools
        /// </summary>
        /// <remarks>
        /// Retrieves details for Opdex liquidity pools across one or many markets. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword">Keyword search against liquidity pool addresses and names (optional)</param>
        /// <param name="markets">Addresses of markets to search within (optional)</param>
        /// <param name="liquidityPools">Addresses of liquidity pools to fetch (optional)</param>
        /// <param name="tokens">Addresses of SRC tokens paired in pools (optional)</param>
        /// <param name="stakingStatus">Staking status filter; default is not to filter (optional)</param>
        /// <param name="nominationStatus">Nomination status filter; default is not to filter (optional)</param>
        /// <param name="miningStatus">Mining status filter; default is not to filter (optional)</param>
        /// <param name="orderBy">Property by which to sort results (optional)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LiquidityPoolsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LiquidityPoolsResponse>> GetLiquidityPoolsWithHttpInfoAsync(string keyword = default(string), List<string> markets = default(List<string>), List<string> liquidityPools = default(List<string>), List<string> tokens = default(List<string>), StakingStatusFilter? stakingStatus = default(StakingStatusFilter?), NominationStatusFilter? nominationStatus = default(NominationStatusFilter?), MiningStatusFilter? miningStatus = default(MiningStatusFilter?), LiquidityPoolOrderByType? orderBy = default(LiquidityPoolOrderByType?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILiquidityPoolsApi : ILiquidityPoolsApiSync, ILiquidityPoolsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LiquidityPoolsApi : IDisposable, ILiquidityPoolsApi
    {
        private Opdex.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LiquidityPoolsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public LiquidityPoolsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LiquidityPoolsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public LiquidityPoolsApi(string basePath)
        {
            this.Configuration = Opdex.Client.Client.Configuration.MergeConfigurations(
                Opdex.Client.Client.GlobalConfiguration.Instance,
                new Opdex.Client.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Opdex.Client.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Opdex.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LiquidityPoolsApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public LiquidityPoolsApi(Opdex.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Opdex.Client.Client.Configuration.MergeConfigurations(
                Opdex.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Opdex.Client.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Opdex.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LiquidityPoolsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public LiquidityPoolsApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LiquidityPoolsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public LiquidityPoolsApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Opdex.Client.Client.Configuration.MergeConfigurations(
                Opdex.Client.Client.GlobalConfiguration.Instance,
                new Opdex.Client.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Opdex.Client.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Opdex.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LiquidityPoolsApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public LiquidityPoolsApi(HttpClient client, Opdex.Client.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Opdex.Client.Client.Configuration.MergeConfigurations(
                Opdex.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Opdex.Client.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Opdex.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LiquidityPoolsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public LiquidityPoolsApi(Opdex.Client.Client.ISynchronousClient client, Opdex.Client.Client.IAsynchronousClient asyncClient, Opdex.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Opdex.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Opdex.Client.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Opdex.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Opdex.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Opdex.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Opdex.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Build Add Liquidity Transaction Quote Builds a quote for a transaction to add liquidity to an Opdex liquidity pool. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <param name="quoteAddLiquidityRequest"></param>
        /// <returns>TransactionQuoteResponse</returns>
        public TransactionQuoteResponse BuildAddLiquidityQuote(string pool, QuoteAddLiquidityRequest quoteAddLiquidityRequest)
        {
            Opdex.Client.Client.ApiResponse<TransactionQuoteResponse> localVarResponse = BuildAddLiquidityQuoteWithHttpInfo(pool, quoteAddLiquidityRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Build Add Liquidity Transaction Quote Builds a quote for a transaction to add liquidity to an Opdex liquidity pool. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <param name="quoteAddLiquidityRequest"></param>
        /// <returns>ApiResponse of TransactionQuoteResponse</returns>
        public Opdex.Client.Client.ApiResponse<TransactionQuoteResponse> BuildAddLiquidityQuoteWithHttpInfo(string pool, QuoteAddLiquidityRequest quoteAddLiquidityRequest)
        {
            // verify the required parameter 'pool' is set
            if (pool == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'pool' when calling LiquidityPoolsApi->BuildAddLiquidityQuote");

            // verify the required parameter 'quoteAddLiquidityRequest' is set
            if (quoteAddLiquidityRequest == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'quoteAddLiquidityRequest' when calling LiquidityPoolsApi->BuildAddLiquidityQuote");

            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("pool", Opdex.Client.Client.ClientUtils.ParameterToString(pool)); // path parameter
            localVarRequestOptions.Data = quoteAddLiquidityRequest;

            // authentication (opdexAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TransactionQuoteResponse>("/liquidity-pools/{pool}/add", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildAddLiquidityQuote", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Build Add Liquidity Transaction Quote Builds a quote for a transaction to add liquidity to an Opdex liquidity pool. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <param name="quoteAddLiquidityRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionQuoteResponse</returns>
        public async System.Threading.Tasks.Task<TransactionQuoteResponse> BuildAddLiquidityQuoteAsync(string pool, QuoteAddLiquidityRequest quoteAddLiquidityRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opdex.Client.Client.ApiResponse<TransactionQuoteResponse> localVarResponse = await BuildAddLiquidityQuoteWithHttpInfoAsync(pool, quoteAddLiquidityRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Build Add Liquidity Transaction Quote Builds a quote for a transaction to add liquidity to an Opdex liquidity pool. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <param name="quoteAddLiquidityRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionQuoteResponse)</returns>
        public async System.Threading.Tasks.Task<Opdex.Client.Client.ApiResponse<TransactionQuoteResponse>> BuildAddLiquidityQuoteWithHttpInfoAsync(string pool, QuoteAddLiquidityRequest quoteAddLiquidityRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'pool' is set
            if (pool == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'pool' when calling LiquidityPoolsApi->BuildAddLiquidityQuote");

            // verify the required parameter 'quoteAddLiquidityRequest' is set
            if (quoteAddLiquidityRequest == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'quoteAddLiquidityRequest' when calling LiquidityPoolsApi->BuildAddLiquidityQuote");


            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };


            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("pool", Opdex.Client.Client.ClientUtils.ParameterToString(pool)); // path parameter
            localVarRequestOptions.Data = quoteAddLiquidityRequest;

            // authentication (opdexAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TransactionQuoteResponse>("/liquidity-pools/{pool}/add", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildAddLiquidityQuote", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Build Collect Staking Rewards Transaction Quote Builds a quote for a transaction to collect staking rewards from an Opdex liquidity pool. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <param name="quoteCollectStakingRewardsRequest"></param>
        /// <returns>TransactionQuoteResponse</returns>
        public TransactionQuoteResponse BuildCollectStakingRewardsQuote(string pool, QuoteCollectStakingRewardsRequest quoteCollectStakingRewardsRequest)
        {
            Opdex.Client.Client.ApiResponse<TransactionQuoteResponse> localVarResponse = BuildCollectStakingRewardsQuoteWithHttpInfo(pool, quoteCollectStakingRewardsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Build Collect Staking Rewards Transaction Quote Builds a quote for a transaction to collect staking rewards from an Opdex liquidity pool. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <param name="quoteCollectStakingRewardsRequest"></param>
        /// <returns>ApiResponse of TransactionQuoteResponse</returns>
        public Opdex.Client.Client.ApiResponse<TransactionQuoteResponse> BuildCollectStakingRewardsQuoteWithHttpInfo(string pool, QuoteCollectStakingRewardsRequest quoteCollectStakingRewardsRequest)
        {
            // verify the required parameter 'pool' is set
            if (pool == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'pool' when calling LiquidityPoolsApi->BuildCollectStakingRewardsQuote");

            // verify the required parameter 'quoteCollectStakingRewardsRequest' is set
            if (quoteCollectStakingRewardsRequest == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'quoteCollectStakingRewardsRequest' when calling LiquidityPoolsApi->BuildCollectStakingRewardsQuote");

            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("pool", Opdex.Client.Client.ClientUtils.ParameterToString(pool)); // path parameter
            localVarRequestOptions.Data = quoteCollectStakingRewardsRequest;

            // authentication (opdexAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TransactionQuoteResponse>("/liquidity-pools/{pool}/staking/collect", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildCollectStakingRewardsQuote", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Build Collect Staking Rewards Transaction Quote Builds a quote for a transaction to collect staking rewards from an Opdex liquidity pool. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <param name="quoteCollectStakingRewardsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionQuoteResponse</returns>
        public async System.Threading.Tasks.Task<TransactionQuoteResponse> BuildCollectStakingRewardsQuoteAsync(string pool, QuoteCollectStakingRewardsRequest quoteCollectStakingRewardsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opdex.Client.Client.ApiResponse<TransactionQuoteResponse> localVarResponse = await BuildCollectStakingRewardsQuoteWithHttpInfoAsync(pool, quoteCollectStakingRewardsRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Build Collect Staking Rewards Transaction Quote Builds a quote for a transaction to collect staking rewards from an Opdex liquidity pool. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <param name="quoteCollectStakingRewardsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionQuoteResponse)</returns>
        public async System.Threading.Tasks.Task<Opdex.Client.Client.ApiResponse<TransactionQuoteResponse>> BuildCollectStakingRewardsQuoteWithHttpInfoAsync(string pool, QuoteCollectStakingRewardsRequest quoteCollectStakingRewardsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'pool' is set
            if (pool == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'pool' when calling LiquidityPoolsApi->BuildCollectStakingRewardsQuote");

            // verify the required parameter 'quoteCollectStakingRewardsRequest' is set
            if (quoteCollectStakingRewardsRequest == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'quoteCollectStakingRewardsRequest' when calling LiquidityPoolsApi->BuildCollectStakingRewardsQuote");


            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };


            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("pool", Opdex.Client.Client.ClientUtils.ParameterToString(pool)); // path parameter
            localVarRequestOptions.Data = quoteCollectStakingRewardsRequest;

            // authentication (opdexAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TransactionQuoteResponse>("/liquidity-pools/{pool}/staking/collect", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildCollectStakingRewardsQuote", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Build Create Liquidity Pool Transaction Quote Builds a quote for a transaction to create an Opdex liquidity pool. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteCreateLiquidityPoolRequest"> (optional)</param>
        /// <returns>TransactionQuoteResponse</returns>
        public TransactionQuoteResponse BuildCreateLiquidityPoolQuote(QuoteCreateLiquidityPoolRequest quoteCreateLiquidityPoolRequest = default(QuoteCreateLiquidityPoolRequest))
        {
            Opdex.Client.Client.ApiResponse<TransactionQuoteResponse> localVarResponse = BuildCreateLiquidityPoolQuoteWithHttpInfo(quoteCreateLiquidityPoolRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Build Create Liquidity Pool Transaction Quote Builds a quote for a transaction to create an Opdex liquidity pool. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteCreateLiquidityPoolRequest"> (optional)</param>
        /// <returns>ApiResponse of TransactionQuoteResponse</returns>
        public Opdex.Client.Client.ApiResponse<TransactionQuoteResponse> BuildCreateLiquidityPoolQuoteWithHttpInfo(QuoteCreateLiquidityPoolRequest quoteCreateLiquidityPoolRequest = default(QuoteCreateLiquidityPoolRequest))
        {
            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = quoteCreateLiquidityPoolRequest;

            // authentication (opdexAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TransactionQuoteResponse>("/liquidity-pools", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildCreateLiquidityPoolQuote", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Build Create Liquidity Pool Transaction Quote Builds a quote for a transaction to create an Opdex liquidity pool. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteCreateLiquidityPoolRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionQuoteResponse</returns>
        public async System.Threading.Tasks.Task<TransactionQuoteResponse> BuildCreateLiquidityPoolQuoteAsync(QuoteCreateLiquidityPoolRequest quoteCreateLiquidityPoolRequest = default(QuoteCreateLiquidityPoolRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opdex.Client.Client.ApiResponse<TransactionQuoteResponse> localVarResponse = await BuildCreateLiquidityPoolQuoteWithHttpInfoAsync(quoteCreateLiquidityPoolRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Build Create Liquidity Pool Transaction Quote Builds a quote for a transaction to create an Opdex liquidity pool. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quoteCreateLiquidityPoolRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionQuoteResponse)</returns>
        public async System.Threading.Tasks.Task<Opdex.Client.Client.ApiResponse<TransactionQuoteResponse>> BuildCreateLiquidityPoolQuoteWithHttpInfoAsync(QuoteCreateLiquidityPoolRequest quoteCreateLiquidityPoolRequest = default(QuoteCreateLiquidityPoolRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };


            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = quoteCreateLiquidityPoolRequest;

            // authentication (opdexAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TransactionQuoteResponse>("/liquidity-pools", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildCreateLiquidityPoolQuote", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Build Remove Liquidity Transaction Quote Builds a quote for a transaction to remove liquidity from an Opdex liquidity pool. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <param name="quoteRemoveLiquidityRequest"></param>
        /// <returns>TransactionQuoteResponse</returns>
        public TransactionQuoteResponse BuildRemoveLiquidityQuote(string pool, QuoteRemoveLiquidityRequest quoteRemoveLiquidityRequest)
        {
            Opdex.Client.Client.ApiResponse<TransactionQuoteResponse> localVarResponse = BuildRemoveLiquidityQuoteWithHttpInfo(pool, quoteRemoveLiquidityRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Build Remove Liquidity Transaction Quote Builds a quote for a transaction to remove liquidity from an Opdex liquidity pool. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <param name="quoteRemoveLiquidityRequest"></param>
        /// <returns>ApiResponse of TransactionQuoteResponse</returns>
        public Opdex.Client.Client.ApiResponse<TransactionQuoteResponse> BuildRemoveLiquidityQuoteWithHttpInfo(string pool, QuoteRemoveLiquidityRequest quoteRemoveLiquidityRequest)
        {
            // verify the required parameter 'pool' is set
            if (pool == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'pool' when calling LiquidityPoolsApi->BuildRemoveLiquidityQuote");

            // verify the required parameter 'quoteRemoveLiquidityRequest' is set
            if (quoteRemoveLiquidityRequest == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'quoteRemoveLiquidityRequest' when calling LiquidityPoolsApi->BuildRemoveLiquidityQuote");

            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("pool", Opdex.Client.Client.ClientUtils.ParameterToString(pool)); // path parameter
            localVarRequestOptions.Data = quoteRemoveLiquidityRequest;

            // authentication (opdexAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TransactionQuoteResponse>("/liquidity-pools/{pool}/remove", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildRemoveLiquidityQuote", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Build Remove Liquidity Transaction Quote Builds a quote for a transaction to remove liquidity from an Opdex liquidity pool. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <param name="quoteRemoveLiquidityRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionQuoteResponse</returns>
        public async System.Threading.Tasks.Task<TransactionQuoteResponse> BuildRemoveLiquidityQuoteAsync(string pool, QuoteRemoveLiquidityRequest quoteRemoveLiquidityRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opdex.Client.Client.ApiResponse<TransactionQuoteResponse> localVarResponse = await BuildRemoveLiquidityQuoteWithHttpInfoAsync(pool, quoteRemoveLiquidityRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Build Remove Liquidity Transaction Quote Builds a quote for a transaction to remove liquidity from an Opdex liquidity pool. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <param name="quoteRemoveLiquidityRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionQuoteResponse)</returns>
        public async System.Threading.Tasks.Task<Opdex.Client.Client.ApiResponse<TransactionQuoteResponse>> BuildRemoveLiquidityQuoteWithHttpInfoAsync(string pool, QuoteRemoveLiquidityRequest quoteRemoveLiquidityRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'pool' is set
            if (pool == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'pool' when calling LiquidityPoolsApi->BuildRemoveLiquidityQuote");

            // verify the required parameter 'quoteRemoveLiquidityRequest' is set
            if (quoteRemoveLiquidityRequest == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'quoteRemoveLiquidityRequest' when calling LiquidityPoolsApi->BuildRemoveLiquidityQuote");


            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };


            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("pool", Opdex.Client.Client.ClientUtils.ParameterToString(pool)); // path parameter
            localVarRequestOptions.Data = quoteRemoveLiquidityRequest;

            // authentication (opdexAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TransactionQuoteResponse>("/liquidity-pools/{pool}/remove", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildRemoveLiquidityQuote", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Build Skim Transaction Quote Builds a quote for a transaction to skim an Opdex liquidity pool. This transaction forces the token balances to equal the current reserves. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <param name="quoteSkimRequest"></param>
        /// <returns>TransactionQuoteResponse</returns>
        public TransactionQuoteResponse BuildSkimQuote(string pool, QuoteSkimRequest quoteSkimRequest)
        {
            Opdex.Client.Client.ApiResponse<TransactionQuoteResponse> localVarResponse = BuildSkimQuoteWithHttpInfo(pool, quoteSkimRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Build Skim Transaction Quote Builds a quote for a transaction to skim an Opdex liquidity pool. This transaction forces the token balances to equal the current reserves. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <param name="quoteSkimRequest"></param>
        /// <returns>ApiResponse of TransactionQuoteResponse</returns>
        public Opdex.Client.Client.ApiResponse<TransactionQuoteResponse> BuildSkimQuoteWithHttpInfo(string pool, QuoteSkimRequest quoteSkimRequest)
        {
            // verify the required parameter 'pool' is set
            if (pool == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'pool' when calling LiquidityPoolsApi->BuildSkimQuote");

            // verify the required parameter 'quoteSkimRequest' is set
            if (quoteSkimRequest == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'quoteSkimRequest' when calling LiquidityPoolsApi->BuildSkimQuote");

            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("pool", Opdex.Client.Client.ClientUtils.ParameterToString(pool)); // path parameter
            localVarRequestOptions.Data = quoteSkimRequest;

            // authentication (opdexAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TransactionQuoteResponse>("/liquidity-pools/{pool}/skim", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildSkimQuote", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Build Skim Transaction Quote Builds a quote for a transaction to skim an Opdex liquidity pool. This transaction forces the token balances to equal the current reserves. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <param name="quoteSkimRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionQuoteResponse</returns>
        public async System.Threading.Tasks.Task<TransactionQuoteResponse> BuildSkimQuoteAsync(string pool, QuoteSkimRequest quoteSkimRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opdex.Client.Client.ApiResponse<TransactionQuoteResponse> localVarResponse = await BuildSkimQuoteWithHttpInfoAsync(pool, quoteSkimRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Build Skim Transaction Quote Builds a quote for a transaction to skim an Opdex liquidity pool. This transaction forces the token balances to equal the current reserves. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <param name="quoteSkimRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionQuoteResponse)</returns>
        public async System.Threading.Tasks.Task<Opdex.Client.Client.ApiResponse<TransactionQuoteResponse>> BuildSkimQuoteWithHttpInfoAsync(string pool, QuoteSkimRequest quoteSkimRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'pool' is set
            if (pool == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'pool' when calling LiquidityPoolsApi->BuildSkimQuote");

            // verify the required parameter 'quoteSkimRequest' is set
            if (quoteSkimRequest == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'quoteSkimRequest' when calling LiquidityPoolsApi->BuildSkimQuote");


            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };


            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("pool", Opdex.Client.Client.ClientUtils.ParameterToString(pool)); // path parameter
            localVarRequestOptions.Data = quoteSkimRequest;

            // authentication (opdexAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TransactionQuoteResponse>("/liquidity-pools/{pool}/skim", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildSkimQuote", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Build Start Staking Transaction Quote Builds a quote for a transaction to begin staking in an Opdex liquidity pool. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <param name="quoteStartStakingRequest"></param>
        /// <returns>TransactionQuoteResponse</returns>
        public TransactionQuoteResponse BuildStartStakingQuote(string pool, QuoteStartStakingRequest quoteStartStakingRequest)
        {
            Opdex.Client.Client.ApiResponse<TransactionQuoteResponse> localVarResponse = BuildStartStakingQuoteWithHttpInfo(pool, quoteStartStakingRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Build Start Staking Transaction Quote Builds a quote for a transaction to begin staking in an Opdex liquidity pool. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <param name="quoteStartStakingRequest"></param>
        /// <returns>ApiResponse of TransactionQuoteResponse</returns>
        public Opdex.Client.Client.ApiResponse<TransactionQuoteResponse> BuildStartStakingQuoteWithHttpInfo(string pool, QuoteStartStakingRequest quoteStartStakingRequest)
        {
            // verify the required parameter 'pool' is set
            if (pool == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'pool' when calling LiquidityPoolsApi->BuildStartStakingQuote");

            // verify the required parameter 'quoteStartStakingRequest' is set
            if (quoteStartStakingRequest == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'quoteStartStakingRequest' when calling LiquidityPoolsApi->BuildStartStakingQuote");

            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("pool", Opdex.Client.Client.ClientUtils.ParameterToString(pool)); // path parameter
            localVarRequestOptions.Data = quoteStartStakingRequest;

            // authentication (opdexAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TransactionQuoteResponse>("/liquidity-pools/{pool}/staking/start", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildStartStakingQuote", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Build Start Staking Transaction Quote Builds a quote for a transaction to begin staking in an Opdex liquidity pool. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <param name="quoteStartStakingRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionQuoteResponse</returns>
        public async System.Threading.Tasks.Task<TransactionQuoteResponse> BuildStartStakingQuoteAsync(string pool, QuoteStartStakingRequest quoteStartStakingRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opdex.Client.Client.ApiResponse<TransactionQuoteResponse> localVarResponse = await BuildStartStakingQuoteWithHttpInfoAsync(pool, quoteStartStakingRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Build Start Staking Transaction Quote Builds a quote for a transaction to begin staking in an Opdex liquidity pool. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <param name="quoteStartStakingRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionQuoteResponse)</returns>
        public async System.Threading.Tasks.Task<Opdex.Client.Client.ApiResponse<TransactionQuoteResponse>> BuildStartStakingQuoteWithHttpInfoAsync(string pool, QuoteStartStakingRequest quoteStartStakingRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'pool' is set
            if (pool == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'pool' when calling LiquidityPoolsApi->BuildStartStakingQuote");

            // verify the required parameter 'quoteStartStakingRequest' is set
            if (quoteStartStakingRequest == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'quoteStartStakingRequest' when calling LiquidityPoolsApi->BuildStartStakingQuote");


            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };


            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("pool", Opdex.Client.Client.ClientUtils.ParameterToString(pool)); // path parameter
            localVarRequestOptions.Data = quoteStartStakingRequest;

            // authentication (opdexAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TransactionQuoteResponse>("/liquidity-pools/{pool}/staking/start", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildStartStakingQuote", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Build Stop Staking Transaction Quote Builds a quote for a transaction to stop staking in an Opdex liquidity pool. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <param name="quoteStopStakingRequest"></param>
        /// <returns>TransactionQuoteResponse</returns>
        public TransactionQuoteResponse BuildStopStakingQuote(string pool, QuoteStopStakingRequest quoteStopStakingRequest)
        {
            Opdex.Client.Client.ApiResponse<TransactionQuoteResponse> localVarResponse = BuildStopStakingQuoteWithHttpInfo(pool, quoteStopStakingRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Build Stop Staking Transaction Quote Builds a quote for a transaction to stop staking in an Opdex liquidity pool. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <param name="quoteStopStakingRequest"></param>
        /// <returns>ApiResponse of TransactionQuoteResponse</returns>
        public Opdex.Client.Client.ApiResponse<TransactionQuoteResponse> BuildStopStakingQuoteWithHttpInfo(string pool, QuoteStopStakingRequest quoteStopStakingRequest)
        {
            // verify the required parameter 'pool' is set
            if (pool == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'pool' when calling LiquidityPoolsApi->BuildStopStakingQuote");

            // verify the required parameter 'quoteStopStakingRequest' is set
            if (quoteStopStakingRequest == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'quoteStopStakingRequest' when calling LiquidityPoolsApi->BuildStopStakingQuote");

            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("pool", Opdex.Client.Client.ClientUtils.ParameterToString(pool)); // path parameter
            localVarRequestOptions.Data = quoteStopStakingRequest;

            // authentication (opdexAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TransactionQuoteResponse>("/liquidity-pools/{pool}/staking/stop", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildStopStakingQuote", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Build Stop Staking Transaction Quote Builds a quote for a transaction to stop staking in an Opdex liquidity pool. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <param name="quoteStopStakingRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionQuoteResponse</returns>
        public async System.Threading.Tasks.Task<TransactionQuoteResponse> BuildStopStakingQuoteAsync(string pool, QuoteStopStakingRequest quoteStopStakingRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opdex.Client.Client.ApiResponse<TransactionQuoteResponse> localVarResponse = await BuildStopStakingQuoteWithHttpInfoAsync(pool, quoteStopStakingRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Build Stop Staking Transaction Quote Builds a quote for a transaction to stop staking in an Opdex liquidity pool. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <param name="quoteStopStakingRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionQuoteResponse)</returns>
        public async System.Threading.Tasks.Task<Opdex.Client.Client.ApiResponse<TransactionQuoteResponse>> BuildStopStakingQuoteWithHttpInfoAsync(string pool, QuoteStopStakingRequest quoteStopStakingRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'pool' is set
            if (pool == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'pool' when calling LiquidityPoolsApi->BuildStopStakingQuote");

            // verify the required parameter 'quoteStopStakingRequest' is set
            if (quoteStopStakingRequest == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'quoteStopStakingRequest' when calling LiquidityPoolsApi->BuildStopStakingQuote");


            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };


            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("pool", Opdex.Client.Client.ClientUtils.ParameterToString(pool)); // path parameter
            localVarRequestOptions.Data = quoteStopStakingRequest;

            // authentication (opdexAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TransactionQuoteResponse>("/liquidity-pools/{pool}/staking/stop", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildStopStakingQuote", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Build Sync Transaction Quote Builds a quote for a transaction to sync an Opdex liquidity pool. This transaction forces the reserves to equal the current token balances. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <returns>TransactionQuoteResponse</returns>
        public TransactionQuoteResponse BuildSyncQuote(string pool)
        {
            Opdex.Client.Client.ApiResponse<TransactionQuoteResponse> localVarResponse = BuildSyncQuoteWithHttpInfo(pool);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Build Sync Transaction Quote Builds a quote for a transaction to sync an Opdex liquidity pool. This transaction forces the reserves to equal the current token balances. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <returns>ApiResponse of TransactionQuoteResponse</returns>
        public Opdex.Client.Client.ApiResponse<TransactionQuoteResponse> BuildSyncQuoteWithHttpInfo(string pool)
        {
            // verify the required parameter 'pool' is set
            if (pool == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'pool' when calling LiquidityPoolsApi->BuildSyncQuote");

            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("pool", Opdex.Client.Client.ClientUtils.ParameterToString(pool)); // path parameter

            // authentication (opdexAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TransactionQuoteResponse>("/liquidity-pools/{pool}/sync", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildSyncQuote", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Build Sync Transaction Quote Builds a quote for a transaction to sync an Opdex liquidity pool. This transaction forces the reserves to equal the current token balances. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionQuoteResponse</returns>
        public async System.Threading.Tasks.Task<TransactionQuoteResponse> BuildSyncQuoteAsync(string pool, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opdex.Client.Client.ApiResponse<TransactionQuoteResponse> localVarResponse = await BuildSyncQuoteWithHttpInfoAsync(pool, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Build Sync Transaction Quote Builds a quote for a transaction to sync an Opdex liquidity pool. This transaction forces the reserves to equal the current token balances. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionQuoteResponse)</returns>
        public async System.Threading.Tasks.Task<Opdex.Client.Client.ApiResponse<TransactionQuoteResponse>> BuildSyncQuoteWithHttpInfoAsync(string pool, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'pool' is set
            if (pool == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'pool' when calling LiquidityPoolsApi->BuildSyncQuote");


            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };


            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("pool", Opdex.Client.Client.ClientUtils.ParameterToString(pool)); // path parameter

            // authentication (opdexAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TransactionQuoteResponse>("/liquidity-pools/{pool}/sync", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildSyncQuote", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Liquidity Amount In Quote Retrieves an estimate for the amount of a token required to be added, give an input amount of the other token in the pair.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <param name="liquidityAmountInQuoteRequest"></param>
        /// <returns>LiquidityAmountInQuoteResponse</returns>
        public LiquidityAmountInQuoteResponse GetLiquidityAmountInQuote(string pool, LiquidityAmountInQuoteRequest liquidityAmountInQuoteRequest)
        {
            Opdex.Client.Client.ApiResponse<LiquidityAmountInQuoteResponse> localVarResponse = GetLiquidityAmountInQuoteWithHttpInfo(pool, liquidityAmountInQuoteRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Liquidity Amount In Quote Retrieves an estimate for the amount of a token required to be added, give an input amount of the other token in the pair.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <param name="liquidityAmountInQuoteRequest"></param>
        /// <returns>ApiResponse of LiquidityAmountInQuoteResponse</returns>
        public Opdex.Client.Client.ApiResponse<LiquidityAmountInQuoteResponse> GetLiquidityAmountInQuoteWithHttpInfo(string pool, LiquidityAmountInQuoteRequest liquidityAmountInQuoteRequest)
        {
            // verify the required parameter 'pool' is set
            if (pool == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'pool' when calling LiquidityPoolsApi->GetLiquidityAmountInQuote");

            // verify the required parameter 'liquidityAmountInQuoteRequest' is set
            if (liquidityAmountInQuoteRequest == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'liquidityAmountInQuoteRequest' when calling LiquidityPoolsApi->GetLiquidityAmountInQuote");

            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("pool", Opdex.Client.Client.ClientUtils.ParameterToString(pool)); // path parameter
            localVarRequestOptions.Data = liquidityAmountInQuoteRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<LiquidityAmountInQuoteResponse>("/liquidity-pools/{pool}/add/amount-in", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLiquidityAmountInQuote", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Liquidity Amount In Quote Retrieves an estimate for the amount of a token required to be added, give an input amount of the other token in the pair.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <param name="liquidityAmountInQuoteRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LiquidityAmountInQuoteResponse</returns>
        public async System.Threading.Tasks.Task<LiquidityAmountInQuoteResponse> GetLiquidityAmountInQuoteAsync(string pool, LiquidityAmountInQuoteRequest liquidityAmountInQuoteRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opdex.Client.Client.ApiResponse<LiquidityAmountInQuoteResponse> localVarResponse = await GetLiquidityAmountInQuoteWithHttpInfoAsync(pool, liquidityAmountInQuoteRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Liquidity Amount In Quote Retrieves an estimate for the amount of a token required to be added, give an input amount of the other token in the pair.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <param name="liquidityAmountInQuoteRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LiquidityAmountInQuoteResponse)</returns>
        public async System.Threading.Tasks.Task<Opdex.Client.Client.ApiResponse<LiquidityAmountInQuoteResponse>> GetLiquidityAmountInQuoteWithHttpInfoAsync(string pool, LiquidityAmountInQuoteRequest liquidityAmountInQuoteRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'pool' is set
            if (pool == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'pool' when calling LiquidityPoolsApi->GetLiquidityAmountInQuote");

            // verify the required parameter 'liquidityAmountInQuoteRequest' is set
            if (liquidityAmountInQuoteRequest == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'liquidityAmountInQuoteRequest' when calling LiquidityPoolsApi->GetLiquidityAmountInQuote");


            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };


            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("pool", Opdex.Client.Client.ClientUtils.ParameterToString(pool)); // path parameter
            localVarRequestOptions.Data = liquidityAmountInQuoteRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<LiquidityAmountInQuoteResponse>("/liquidity-pools/{pool}/add/amount-in", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLiquidityAmountInQuote", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Liquidity Pool Retrieve details for an Opdex liquidity pool.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <returns>LiquidityPoolResponse</returns>
        public LiquidityPoolResponse GetLiquidityPool(string pool)
        {
            Opdex.Client.Client.ApiResponse<LiquidityPoolResponse> localVarResponse = GetLiquidityPoolWithHttpInfo(pool);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Liquidity Pool Retrieve details for an Opdex liquidity pool.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <returns>ApiResponse of LiquidityPoolResponse</returns>
        public Opdex.Client.Client.ApiResponse<LiquidityPoolResponse> GetLiquidityPoolWithHttpInfo(string pool)
        {
            // verify the required parameter 'pool' is set
            if (pool == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'pool' when calling LiquidityPoolsApi->GetLiquidityPool");

            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("pool", Opdex.Client.Client.ClientUtils.ParameterToString(pool)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<LiquidityPoolResponse>("/liquidity-pools/{pool}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLiquidityPool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Liquidity Pool Retrieve details for an Opdex liquidity pool.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LiquidityPoolResponse</returns>
        public async System.Threading.Tasks.Task<LiquidityPoolResponse> GetLiquidityPoolAsync(string pool, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opdex.Client.Client.ApiResponse<LiquidityPoolResponse> localVarResponse = await GetLiquidityPoolWithHttpInfoAsync(pool, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Liquidity Pool Retrieve details for an Opdex liquidity pool.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LiquidityPoolResponse)</returns>
        public async System.Threading.Tasks.Task<Opdex.Client.Client.ApiResponse<LiquidityPoolResponse>> GetLiquidityPoolWithHttpInfoAsync(string pool, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'pool' is set
            if (pool == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'pool' when calling LiquidityPoolsApi->GetLiquidityPool");


            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };


            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("pool", Opdex.Client.Client.ClientUtils.ParameterToString(pool)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<LiquidityPoolResponse>("/liquidity-pools/{pool}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLiquidityPool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Liquidity Pool History Retrieves historical transactions, reserves, rewards, volume, cost and staking data for an Opdex liquidity pool. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <param name="startDateTime">Start time for which to retrieve snapshots</param>
        /// <param name="endDateTime">End time for which to retrieve snapshots</param>
        /// <param name="interval">Time range between each snapshot (optional)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page; defaults to 168 for hourly snapshots (1 week), or 28 for daily snapshots (4 weeks) (optional, default to 168)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <returns>LiquidityPoolSnapshotsResponse</returns>
        public LiquidityPoolSnapshotsResponse GetLiquidityPoolHistory(string pool, DateTime startDateTime, DateTime endDateTime, Interval? interval = default(Interval?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string))
        {
            Opdex.Client.Client.ApiResponse<LiquidityPoolSnapshotsResponse> localVarResponse = GetLiquidityPoolHistoryWithHttpInfo(pool, startDateTime, endDateTime, interval, direction, limit, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Liquidity Pool History Retrieves historical transactions, reserves, rewards, volume, cost and staking data for an Opdex liquidity pool. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <param name="startDateTime">Start time for which to retrieve snapshots</param>
        /// <param name="endDateTime">End time for which to retrieve snapshots</param>
        /// <param name="interval">Time range between each snapshot (optional)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page; defaults to 168 for hourly snapshots (1 week), or 28 for daily snapshots (4 weeks) (optional, default to 168)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <returns>ApiResponse of LiquidityPoolSnapshotsResponse</returns>
        public Opdex.Client.Client.ApiResponse<LiquidityPoolSnapshotsResponse> GetLiquidityPoolHistoryWithHttpInfo(string pool, DateTime startDateTime, DateTime endDateTime, Interval? interval = default(Interval?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string))
        {
            // verify the required parameter 'pool' is set
            if (pool == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'pool' when calling LiquidityPoolsApi->GetLiquidityPoolHistory");

            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("pool", Opdex.Client.Client.ClientUtils.ParameterToString(pool)); // path parameter
            if (interval != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "interval", interval));
            }
            localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "startDateTime", startDateTime));
            localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "endDateTime", endDateTime));
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<LiquidityPoolSnapshotsResponse>("/liquidity-pools/{pool}/history", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLiquidityPoolHistory", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Liquidity Pool History Retrieves historical transactions, reserves, rewards, volume, cost and staking data for an Opdex liquidity pool. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <param name="startDateTime">Start time for which to retrieve snapshots</param>
        /// <param name="endDateTime">End time for which to retrieve snapshots</param>
        /// <param name="interval">Time range between each snapshot (optional)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page; defaults to 168 for hourly snapshots (1 week), or 28 for daily snapshots (4 weeks) (optional, default to 168)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LiquidityPoolSnapshotsResponse</returns>
        public async System.Threading.Tasks.Task<LiquidityPoolSnapshotsResponse> GetLiquidityPoolHistoryAsync(string pool, DateTime startDateTime, DateTime endDateTime, Interval? interval = default(Interval?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opdex.Client.Client.ApiResponse<LiquidityPoolSnapshotsResponse> localVarResponse = await GetLiquidityPoolHistoryWithHttpInfoAsync(pool, startDateTime, endDateTime, interval, direction, limit, cursor, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Liquidity Pool History Retrieves historical transactions, reserves, rewards, volume, cost and staking data for an Opdex liquidity pool. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Address of a liquidity pool</param>
        /// <param name="startDateTime">Start time for which to retrieve snapshots</param>
        /// <param name="endDateTime">End time for which to retrieve snapshots</param>
        /// <param name="interval">Time range between each snapshot (optional)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page; defaults to 168 for hourly snapshots (1 week), or 28 for daily snapshots (4 weeks) (optional, default to 168)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LiquidityPoolSnapshotsResponse)</returns>
        public async System.Threading.Tasks.Task<Opdex.Client.Client.ApiResponse<LiquidityPoolSnapshotsResponse>> GetLiquidityPoolHistoryWithHttpInfoAsync(string pool, DateTime startDateTime, DateTime endDateTime, Interval? interval = default(Interval?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'pool' is set
            if (pool == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'pool' when calling LiquidityPoolsApi->GetLiquidityPoolHistory");


            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };


            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("pool", Opdex.Client.Client.ClientUtils.ParameterToString(pool)); // path parameter
            if (interval != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "interval", interval));
            }
            localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "startDateTime", startDateTime));
            localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "endDateTime", endDateTime));
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<LiquidityPoolSnapshotsResponse>("/liquidity-pools/{pool}/history", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLiquidityPoolHistory", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Liquidity Pools Retrieves details for Opdex liquidity pools across one or many markets. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword">Keyword search against liquidity pool addresses and names (optional)</param>
        /// <param name="markets">Addresses of markets to search within (optional)</param>
        /// <param name="liquidityPools">Addresses of liquidity pools to fetch (optional)</param>
        /// <param name="tokens">Addresses of SRC tokens paired in pools (optional)</param>
        /// <param name="stakingStatus">Staking status filter; default is not to filter (optional)</param>
        /// <param name="nominationStatus">Nomination status filter; default is not to filter (optional)</param>
        /// <param name="miningStatus">Mining status filter; default is not to filter (optional)</param>
        /// <param name="orderBy">Property by which to sort results (optional)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <returns>LiquidityPoolsResponse</returns>
        public LiquidityPoolsResponse GetLiquidityPools(string keyword = default(string), List<string> markets = default(List<string>), List<string> liquidityPools = default(List<string>), List<string> tokens = default(List<string>), StakingStatusFilter? stakingStatus = default(StakingStatusFilter?), NominationStatusFilter? nominationStatus = default(NominationStatusFilter?), MiningStatusFilter? miningStatus = default(MiningStatusFilter?), LiquidityPoolOrderByType? orderBy = default(LiquidityPoolOrderByType?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string))
        {
            Opdex.Client.Client.ApiResponse<LiquidityPoolsResponse> localVarResponse = GetLiquidityPoolsWithHttpInfo(keyword, markets, liquidityPools, tokens, stakingStatus, nominationStatus, miningStatus, orderBy, direction, limit, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Liquidity Pools Retrieves details for Opdex liquidity pools across one or many markets. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword">Keyword search against liquidity pool addresses and names (optional)</param>
        /// <param name="markets">Addresses of markets to search within (optional)</param>
        /// <param name="liquidityPools">Addresses of liquidity pools to fetch (optional)</param>
        /// <param name="tokens">Addresses of SRC tokens paired in pools (optional)</param>
        /// <param name="stakingStatus">Staking status filter; default is not to filter (optional)</param>
        /// <param name="nominationStatus">Nomination status filter; default is not to filter (optional)</param>
        /// <param name="miningStatus">Mining status filter; default is not to filter (optional)</param>
        /// <param name="orderBy">Property by which to sort results (optional)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <returns>ApiResponse of LiquidityPoolsResponse</returns>
        public Opdex.Client.Client.ApiResponse<LiquidityPoolsResponse> GetLiquidityPoolsWithHttpInfo(string keyword = default(string), List<string> markets = default(List<string>), List<string> liquidityPools = default(List<string>), List<string> tokens = default(List<string>), StakingStatusFilter? stakingStatus = default(StakingStatusFilter?), NominationStatusFilter? nominationStatus = default(NominationStatusFilter?), MiningStatusFilter? miningStatus = default(MiningStatusFilter?), LiquidityPoolOrderByType? orderBy = default(LiquidityPoolOrderByType?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string))
        {
            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (keyword != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "keyword", keyword));
            }
            if (markets != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("multi", "markets", markets));
            }
            if (liquidityPools != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("multi", "liquidityPools", liquidityPools));
            }
            if (tokens != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("multi", "tokens", tokens));
            }
            if (stakingStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "stakingStatus", stakingStatus));
            }
            if (nominationStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "nominationStatus", nominationStatus));
            }
            if (miningStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "miningStatus", miningStatus));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "orderBy", orderBy));
            }
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<LiquidityPoolsResponse>("/liquidity-pools", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLiquidityPools", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Liquidity Pools Retrieves details for Opdex liquidity pools across one or many markets. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword">Keyword search against liquidity pool addresses and names (optional)</param>
        /// <param name="markets">Addresses of markets to search within (optional)</param>
        /// <param name="liquidityPools">Addresses of liquidity pools to fetch (optional)</param>
        /// <param name="tokens">Addresses of SRC tokens paired in pools (optional)</param>
        /// <param name="stakingStatus">Staking status filter; default is not to filter (optional)</param>
        /// <param name="nominationStatus">Nomination status filter; default is not to filter (optional)</param>
        /// <param name="miningStatus">Mining status filter; default is not to filter (optional)</param>
        /// <param name="orderBy">Property by which to sort results (optional)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LiquidityPoolsResponse</returns>
        public async System.Threading.Tasks.Task<LiquidityPoolsResponse> GetLiquidityPoolsAsync(string keyword = default(string), List<string> markets = default(List<string>), List<string> liquidityPools = default(List<string>), List<string> tokens = default(List<string>), StakingStatusFilter? stakingStatus = default(StakingStatusFilter?), NominationStatusFilter? nominationStatus = default(NominationStatusFilter?), MiningStatusFilter? miningStatus = default(MiningStatusFilter?), LiquidityPoolOrderByType? orderBy = default(LiquidityPoolOrderByType?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opdex.Client.Client.ApiResponse<LiquidityPoolsResponse> localVarResponse = await GetLiquidityPoolsWithHttpInfoAsync(keyword, markets, liquidityPools, tokens, stakingStatus, nominationStatus, miningStatus, orderBy, direction, limit, cursor, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Liquidity Pools Retrieves details for Opdex liquidity pools across one or many markets. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword">Keyword search against liquidity pool addresses and names (optional)</param>
        /// <param name="markets">Addresses of markets to search within (optional)</param>
        /// <param name="liquidityPools">Addresses of liquidity pools to fetch (optional)</param>
        /// <param name="tokens">Addresses of SRC tokens paired in pools (optional)</param>
        /// <param name="stakingStatus">Staking status filter; default is not to filter (optional)</param>
        /// <param name="nominationStatus">Nomination status filter; default is not to filter (optional)</param>
        /// <param name="miningStatus">Mining status filter; default is not to filter (optional)</param>
        /// <param name="orderBy">Property by which to sort results (optional)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LiquidityPoolsResponse)</returns>
        public async System.Threading.Tasks.Task<Opdex.Client.Client.ApiResponse<LiquidityPoolsResponse>> GetLiquidityPoolsWithHttpInfoAsync(string keyword = default(string), List<string> markets = default(List<string>), List<string> liquidityPools = default(List<string>), List<string> tokens = default(List<string>), StakingStatusFilter? stakingStatus = default(StakingStatusFilter?), NominationStatusFilter? nominationStatus = default(NominationStatusFilter?), MiningStatusFilter? miningStatus = default(MiningStatusFilter?), LiquidityPoolOrderByType? orderBy = default(LiquidityPoolOrderByType?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };


            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (keyword != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "keyword", keyword));
            }
            if (markets != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("multi", "markets", markets));
            }
            if (liquidityPools != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("multi", "liquidityPools", liquidityPools));
            }
            if (tokens != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("multi", "tokens", tokens));
            }
            if (stakingStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "stakingStatus", stakingStatus));
            }
            if (nominationStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "nominationStatus", nominationStatus));
            }
            if (miningStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "miningStatus", miningStatus));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "orderBy", orderBy));
            }
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<LiquidityPoolsResponse>("/liquidity-pools", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLiquidityPools", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
