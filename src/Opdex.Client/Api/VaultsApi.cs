/*
 * Opdex Platform API
 *
 * The Opdex Platform Web API is an interface for querying information from the Opdex contract indexer and quoting Opdex smart contract transactions. The Opdex contract indexer is a job that continually runs and stores relevant broadcast transaction data, in a way that represents the current known state of the Opdex protocol at the present time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Opdex.Client.Client;
using Opdex.Client.Model;

namespace Opdex.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVaultsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Build Complete Proposal Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a transaction to complete a vault proposal. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal</param>
        /// <returns>TransactionQuoteResponse</returns>
        TransactionQuoteResponse BuildCompleteProposalQuote(string vault, int proposalId);

        /// <summary>
        /// Build Complete Proposal Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a transaction to complete a vault proposal. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal</param>
        /// <returns>ApiResponse of TransactionQuoteResponse</returns>
        ApiResponse<TransactionQuoteResponse> BuildCompleteProposalQuoteWithHttpInfo(string vault, int proposalId);
        /// <summary>
        /// Build Make Pledge Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a transaction to make a pledge to a vault proposal. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal</param>
        /// <param name="quotePledgeRequest">Parameters used to make a pledge to a proposal</param>
        /// <returns>TransactionQuoteResponse</returns>
        TransactionQuoteResponse BuildPledgeQuote(string vault, int proposalId, QuotePledgeRequest quotePledgeRequest);

        /// <summary>
        /// Build Make Pledge Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a transaction to make a pledge to a vault proposal. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal</param>
        /// <param name="quotePledgeRequest">Parameters used to make a pledge to a proposal</param>
        /// <returns>ApiResponse of TransactionQuoteResponse</returns>
        ApiResponse<TransactionQuoteResponse> BuildPledgeQuoteWithHttpInfo(string vault, int proposalId, QuotePledgeRequest quotePledgeRequest);
        /// <summary>
        /// Build Propose Change Minimum Pledge Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a transaction to create a proposal for changing the minimum pledge amount. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="quoteProposeMinimumPledgeRequest">Parameters used to propose the revokation of a certificate</param>
        /// <returns>TransactionQuoteResponse</returns>
        TransactionQuoteResponse BuildProposeChangeMinimumPledgeQuote(string vault, QuoteProposeMinimumPledgeRequest quoteProposeMinimumPledgeRequest);

        /// <summary>
        /// Build Propose Change Minimum Pledge Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a transaction to create a proposal for changing the minimum pledge amount. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="quoteProposeMinimumPledgeRequest">Parameters used to propose the revokation of a certificate</param>
        /// <returns>ApiResponse of TransactionQuoteResponse</returns>
        ApiResponse<TransactionQuoteResponse> BuildProposeChangeMinimumPledgeQuoteWithHttpInfo(string vault, QuoteProposeMinimumPledgeRequest quoteProposeMinimumPledgeRequest);
        /// <summary>
        /// Build Propose Change Minimum Vote Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a transaction to create a proposal for changing the minimum vote threshold. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="quoteProposeMinimumVoteRequest">Parameters used to propose the revokation of a certificate</param>
        /// <returns>TransactionQuoteResponse</returns>
        TransactionQuoteResponse BuildProposeChangeMinimumVoteQuote(string vault, QuoteProposeMinimumVoteRequest quoteProposeMinimumVoteRequest);

        /// <summary>
        /// Build Propose Change Minimum Vote Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a transaction to create a proposal for changing the minimum vote threshold. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="quoteProposeMinimumVoteRequest">Parameters used to propose the revokation of a certificate</param>
        /// <returns>ApiResponse of TransactionQuoteResponse</returns>
        ApiResponse<TransactionQuoteResponse> BuildProposeChangeMinimumVoteQuoteWithHttpInfo(string vault, QuoteProposeMinimumVoteRequest quoteProposeMinimumVoteRequest);
        /// <summary>
        /// Build Propose Create Certificate Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a transaction to create a proposal for creating a vault certificate. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="quoteProposeCreateCertificateRequest">Parameters used to propose the creation of a certificate</param>
        /// <returns>TransactionQuoteResponse</returns>
        TransactionQuoteResponse BuildProposeCreateCertificateQuote(string vault, QuoteProposeCreateCertificateRequest quoteProposeCreateCertificateRequest);

        /// <summary>
        /// Build Propose Create Certificate Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a transaction to create a proposal for creating a vault certificate. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="quoteProposeCreateCertificateRequest">Parameters used to propose the creation of a certificate</param>
        /// <returns>ApiResponse of TransactionQuoteResponse</returns>
        ApiResponse<TransactionQuoteResponse> BuildProposeCreateCertificateQuoteWithHttpInfo(string vault, QuoteProposeCreateCertificateRequest quoteProposeCreateCertificateRequest);
        /// <summary>
        /// Build Propose Revoke Certificate Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a transaction to create a proposal for revoking a vault certificate. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="quoteProposeRevokeCertificateRequest">Parameters used to propose the revokation of a certificate</param>
        /// <returns>TransactionQuoteResponse</returns>
        TransactionQuoteResponse BuildProposeRevokeCertificateQuote(string vault, QuoteProposeRevokeCertificateRequest quoteProposeRevokeCertificateRequest);

        /// <summary>
        /// Build Propose Revoke Certificate Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a transaction to create a proposal for revoking a vault certificate. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="quoteProposeRevokeCertificateRequest">Parameters used to propose the revokation of a certificate</param>
        /// <returns>ApiResponse of TransactionQuoteResponse</returns>
        ApiResponse<TransactionQuoteResponse> BuildProposeRevokeCertificateQuoteWithHttpInfo(string vault, QuoteProposeRevokeCertificateRequest quoteProposeRevokeCertificateRequest);
        /// <summary>
        /// Build Redeem Vault Certificate Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a transaction to redeem a vault certificate. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <returns>TransactionQuoteResponse</returns>
        TransactionQuoteResponse BuildRedeemCertificateQuote(string vault);

        /// <summary>
        /// Build Redeem Vault Certificate Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a transaction to redeem a vault certificate. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <returns>ApiResponse of TransactionQuoteResponse</returns>
        ApiResponse<TransactionQuoteResponse> BuildRedeemCertificateQuoteWithHttpInfo(string vault);
        /// <summary>
        /// Build Cast Vote Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a transaction to make a vote on a vault proposal. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal</param>
        /// <param name="quoteVoteRequest">Parameters used to vote on a proposal</param>
        /// <returns>TransactionQuoteResponse</returns>
        TransactionQuoteResponse BuildVoteQuote(string vault, int proposalId, QuoteVoteRequest quoteVoteRequest);

        /// <summary>
        /// Build Cast Vote Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a transaction to make a vote on a vault proposal. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal</param>
        /// <param name="quoteVoteRequest">Parameters used to vote on a proposal</param>
        /// <returns>ApiResponse of TransactionQuoteResponse</returns>
        ApiResponse<TransactionQuoteResponse> BuildVoteQuoteWithHttpInfo(string vault, int proposalId, QuoteVoteRequest quoteVoteRequest);
        /// <summary>
        /// Build Withdraw Pledge Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a transaction to withdraw a pledge from a vault proposal. If the proposal is expired or the minimum pledge threshold is met, this will not affect the proposal. Otherwise, the pledge will be negated from the total pledge amount. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal</param>
        /// <param name="quoteWithdrawPledgeRequest">Parameters used to withdraw a pledge balance</param>
        /// <returns>TransactionQuoteResponse</returns>
        TransactionQuoteResponse BuildWithdrawPledgeQuote(string vault, int proposalId, QuoteWithdrawPledgeRequest quoteWithdrawPledgeRequest);

        /// <summary>
        /// Build Withdraw Pledge Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a transaction to withdraw a pledge from a vault proposal. If the proposal is expired or the minimum pledge threshold is met, this will not affect the proposal. Otherwise, the pledge will be negated from the total pledge amount. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal</param>
        /// <param name="quoteWithdrawPledgeRequest">Parameters used to withdraw a pledge balance</param>
        /// <returns>ApiResponse of TransactionQuoteResponse</returns>
        ApiResponse<TransactionQuoteResponse> BuildWithdrawPledgeQuoteWithHttpInfo(string vault, int proposalId, QuoteWithdrawPledgeRequest quoteWithdrawPledgeRequest);
        /// <summary>
        /// Build Withdraw Vote Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a transaction to withdraw a vote from a vault proposal. If the proposal is completed or expired, this will not affect the proposal. Otherwise, the vote will be negated from the current voting weights. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal</param>
        /// <param name="quoteWithdrawVoteRequest">Parameters used to withdraw a vote balance</param>
        /// <returns>TransactionQuoteResponse</returns>
        TransactionQuoteResponse BuildWithdrawVoteQuote(string vault, int proposalId, QuoteWithdrawVoteRequest quoteWithdrawVoteRequest);

        /// <summary>
        /// Build Withdraw Vote Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a transaction to withdraw a vote from a vault proposal. If the proposal is completed or expired, this will not affect the proposal. Otherwise, the vote will be negated from the current voting weights. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal</param>
        /// <param name="quoteWithdrawVoteRequest">Parameters used to withdraw a vote balance</param>
        /// <returns>ApiResponse of TransactionQuoteResponse</returns>
        ApiResponse<TransactionQuoteResponse> BuildWithdrawVoteQuoteWithHttpInfo(string vault, int proposalId, QuoteWithdrawVoteRequest quoteWithdrawVoteRequest);
        /// <summary>
        /// Get Vault Certificates
        /// </summary>
        /// <remarks>
        /// Retrieves details for certificates existing within tracked Opdex vaults. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="owner">Address of the certificate owner (optional)</param>
        /// <param name="status">Status of the certificates (optional)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <returns>CertificatesResponse</returns>
        CertificatesResponse GetCertificates(string vault, string owner = default(string), List<CertificateStatus> status = default(List<CertificateStatus>), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string));

        /// <summary>
        /// Get Vault Certificates
        /// </summary>
        /// <remarks>
        /// Retrieves details for certificates existing within tracked Opdex vaults. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="owner">Address of the certificate owner (optional)</param>
        /// <param name="status">Status of the certificates (optional)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <returns>ApiResponse of CertificatesResponse</returns>
        ApiResponse<CertificatesResponse> GetCertificatesWithHttpInfo(string vault, string owner = default(string), List<CertificateStatus> status = default(List<CertificateStatus>), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string));
        /// <summary>
        /// Get Vault Proposal Pledge Position
        /// </summary>
        /// <remarks>
        /// Retrieves details for a pledgers position on a vault proposal.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal</param>
        /// <param name="pledger">Address of the pledger</param>
        /// <returns>PledgeResponse</returns>
        PledgeResponse GetPledgePosition(string vault, int proposalId, string pledger);

        /// <summary>
        /// Get Vault Proposal Pledge Position
        /// </summary>
        /// <remarks>
        /// Retrieves details for a pledgers position on a vault proposal.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal</param>
        /// <param name="pledger">Address of the pledger</param>
        /// <returns>ApiResponse of PledgeResponse</returns>
        ApiResponse<PledgeResponse> GetPledgePositionWithHttpInfo(string vault, int proposalId, string pledger);
        /// <summary>
        /// Get Vault Proposal Pledges
        /// </summary>
        /// <remarks>
        /// Retrieves details for pledges that have been made to proposals within tracked Opdex vaults. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal in the vault (optional)</param>
        /// <param name="pledger">Address of the pledger (optional)</param>
        /// <param name="includeZeroBalances">Includes zero balances if true, otherwise filters out zero balances if false (optional, default to false)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <returns>PledgesResponse</returns>
        PledgesResponse GetPledges(string vault, int? proposalId = default(int?), string pledger = default(string), bool? includeZeroBalances = default(bool?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string));

        /// <summary>
        /// Get Vault Proposal Pledges
        /// </summary>
        /// <remarks>
        /// Retrieves details for pledges that have been made to proposals within tracked Opdex vaults. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal in the vault (optional)</param>
        /// <param name="pledger">Address of the pledger (optional)</param>
        /// <param name="includeZeroBalances">Includes zero balances if true, otherwise filters out zero balances if false (optional, default to false)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <returns>ApiResponse of PledgesResponse</returns>
        ApiResponse<PledgesResponse> GetPledgesWithHttpInfo(string vault, int? proposalId = default(int?), string pledger = default(string), bool? includeZeroBalances = default(bool?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string));
        /// <summary>
        /// Get Vault Proposals
        /// </summary>
        /// <remarks>
        /// Retrieves details for proposals existing within tracked Opdex vaults. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="status">Status of the proposal (optional)</param>
        /// <param name="type">Type of proposal (optional)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <returns>ProposalsResponse</returns>
        ProposalsResponse GetProposals(string vault, List<ProposalStatus> status = default(List<ProposalStatus>), List<ProposalType> type = default(List<ProposalType>), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string));

        /// <summary>
        /// Get Vault Proposals
        /// </summary>
        /// <remarks>
        /// Retrieves details for proposals existing within tracked Opdex vaults. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="status">Status of the proposal (optional)</param>
        /// <param name="type">Type of proposal (optional)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <returns>ApiResponse of ProposalsResponse</returns>
        ApiResponse<ProposalsResponse> GetProposalsWithHttpInfo(string vault, List<ProposalStatus> status = default(List<ProposalStatus>), List<ProposalType> type = default(List<ProposalType>), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string));
        /// <summary>
        /// Get Vault
        /// </summary>
        /// <remarks>
        /// Retrieves details of a vault tracked by the Opdex indexer.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <returns>VaultResponse</returns>
        VaultResponse GetVault(string vault);

        /// <summary>
        /// Get Vault
        /// </summary>
        /// <remarks>
        /// Retrieves details of a vault tracked by the Opdex indexer.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <returns>ApiResponse of VaultResponse</returns>
        ApiResponse<VaultResponse> GetVaultWithHttpInfo(string vault);
        /// <summary>
        /// Get Vault Proposal
        /// </summary>
        /// <remarks>
        /// Retrieves a proposal that exists in a tracked Opdex vault.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal</param>
        /// <returns>ProposalResponse</returns>
        ProposalResponse GetVaultProposal(string vault, int proposalId);

        /// <summary>
        /// Get Vault Proposal
        /// </summary>
        /// <remarks>
        /// Retrieves a proposal that exists in a tracked Opdex vault.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal</param>
        /// <returns>ApiResponse of ProposalResponse</returns>
        ApiResponse<ProposalResponse> GetVaultProposalWithHttpInfo(string vault, int proposalId);
        /// <summary>
        /// Get Vaults
        /// </summary>
        /// <remarks>
        /// Retrieves details for tracked Opdex vaults. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lockedToken">Address of the token locked in the vault (optional)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <returns>VaultsResponse</returns>
        VaultsResponse GetVaults(string lockedToken = default(string), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string));

        /// <summary>
        /// Get Vaults
        /// </summary>
        /// <remarks>
        /// Retrieves details for tracked Opdex vaults. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lockedToken">Address of the token locked in the vault (optional)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <returns>ApiResponse of VaultsResponse</returns>
        ApiResponse<VaultsResponse> GetVaultsWithHttpInfo(string lockedToken = default(string), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string));
        /// <summary>
        /// Get Vault Proposal Vote Position
        /// </summary>
        /// <remarks>
        /// Retrieves details for a voters position on a vault proposal.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal</param>
        /// <param name="voter">Address of the voter</param>
        /// <returns>VoteResponse</returns>
        VoteResponse GetVotePosition(string vault, int proposalId, string voter);

        /// <summary>
        /// Get Vault Proposal Vote Position
        /// </summary>
        /// <remarks>
        /// Retrieves details for a voters position on a vault proposal.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal</param>
        /// <param name="voter">Address of the voter</param>
        /// <returns>ApiResponse of VoteResponse</returns>
        ApiResponse<VoteResponse> GetVotePositionWithHttpInfo(string vault, int proposalId, string voter);
        /// <summary>
        /// Get Vault Proposal Votes
        /// </summary>
        /// <remarks>
        /// Retrieves details for votes that have been made against proposals within tracked Opdex vaults. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal in the vault (optional)</param>
        /// <param name="voter">Address of the voter (optional)</param>
        /// <param name="includeZeroBalances">Includes zero balances if true, otherwise filters out zero balances if false (optional, default to false)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <returns>VotesResponse</returns>
        VotesResponse GetVotes(string vault, int? proposalId = default(int?), string voter = default(string), bool? includeZeroBalances = default(bool?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string));

        /// <summary>
        /// Get Vault Proposal Votes
        /// </summary>
        /// <remarks>
        /// Retrieves details for votes that have been made against proposals within tracked Opdex vaults. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal in the vault (optional)</param>
        /// <param name="voter">Address of the voter (optional)</param>
        /// <param name="includeZeroBalances">Includes zero balances if true, otherwise filters out zero balances if false (optional, default to false)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <returns>ApiResponse of VotesResponse</returns>
        ApiResponse<VotesResponse> GetVotesWithHttpInfo(string vault, int? proposalId = default(int?), string voter = default(string), bool? includeZeroBalances = default(bool?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVaultsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Build Complete Proposal Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a transaction to complete a vault proposal. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionQuoteResponse</returns>
        System.Threading.Tasks.Task<TransactionQuoteResponse> BuildCompleteProposalQuoteAsync(string vault, int proposalId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Build Complete Proposal Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a transaction to complete a vault proposal. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionQuoteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionQuoteResponse>> BuildCompleteProposalQuoteWithHttpInfoAsync(string vault, int proposalId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Build Make Pledge Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a transaction to make a pledge to a vault proposal. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal</param>
        /// <param name="quotePledgeRequest">Parameters used to make a pledge to a proposal</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionQuoteResponse</returns>
        System.Threading.Tasks.Task<TransactionQuoteResponse> BuildPledgeQuoteAsync(string vault, int proposalId, QuotePledgeRequest quotePledgeRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Build Make Pledge Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a transaction to make a pledge to a vault proposal. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal</param>
        /// <param name="quotePledgeRequest">Parameters used to make a pledge to a proposal</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionQuoteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionQuoteResponse>> BuildPledgeQuoteWithHttpInfoAsync(string vault, int proposalId, QuotePledgeRequest quotePledgeRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Build Propose Change Minimum Pledge Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a transaction to create a proposal for changing the minimum pledge amount. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="quoteProposeMinimumPledgeRequest">Parameters used to propose the revokation of a certificate</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionQuoteResponse</returns>
        System.Threading.Tasks.Task<TransactionQuoteResponse> BuildProposeChangeMinimumPledgeQuoteAsync(string vault, QuoteProposeMinimumPledgeRequest quoteProposeMinimumPledgeRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Build Propose Change Minimum Pledge Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a transaction to create a proposal for changing the minimum pledge amount. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="quoteProposeMinimumPledgeRequest">Parameters used to propose the revokation of a certificate</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionQuoteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionQuoteResponse>> BuildProposeChangeMinimumPledgeQuoteWithHttpInfoAsync(string vault, QuoteProposeMinimumPledgeRequest quoteProposeMinimumPledgeRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Build Propose Change Minimum Vote Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a transaction to create a proposal for changing the minimum vote threshold. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="quoteProposeMinimumVoteRequest">Parameters used to propose the revokation of a certificate</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionQuoteResponse</returns>
        System.Threading.Tasks.Task<TransactionQuoteResponse> BuildProposeChangeMinimumVoteQuoteAsync(string vault, QuoteProposeMinimumVoteRequest quoteProposeMinimumVoteRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Build Propose Change Minimum Vote Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a transaction to create a proposal for changing the minimum vote threshold. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="quoteProposeMinimumVoteRequest">Parameters used to propose the revokation of a certificate</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionQuoteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionQuoteResponse>> BuildProposeChangeMinimumVoteQuoteWithHttpInfoAsync(string vault, QuoteProposeMinimumVoteRequest quoteProposeMinimumVoteRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Build Propose Create Certificate Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a transaction to create a proposal for creating a vault certificate. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="quoteProposeCreateCertificateRequest">Parameters used to propose the creation of a certificate</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionQuoteResponse</returns>
        System.Threading.Tasks.Task<TransactionQuoteResponse> BuildProposeCreateCertificateQuoteAsync(string vault, QuoteProposeCreateCertificateRequest quoteProposeCreateCertificateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Build Propose Create Certificate Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a transaction to create a proposal for creating a vault certificate. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="quoteProposeCreateCertificateRequest">Parameters used to propose the creation of a certificate</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionQuoteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionQuoteResponse>> BuildProposeCreateCertificateQuoteWithHttpInfoAsync(string vault, QuoteProposeCreateCertificateRequest quoteProposeCreateCertificateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Build Propose Revoke Certificate Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a transaction to create a proposal for revoking a vault certificate. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="quoteProposeRevokeCertificateRequest">Parameters used to propose the revokation of a certificate</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionQuoteResponse</returns>
        System.Threading.Tasks.Task<TransactionQuoteResponse> BuildProposeRevokeCertificateQuoteAsync(string vault, QuoteProposeRevokeCertificateRequest quoteProposeRevokeCertificateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Build Propose Revoke Certificate Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a transaction to create a proposal for revoking a vault certificate. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="quoteProposeRevokeCertificateRequest">Parameters used to propose the revokation of a certificate</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionQuoteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionQuoteResponse>> BuildProposeRevokeCertificateQuoteWithHttpInfoAsync(string vault, QuoteProposeRevokeCertificateRequest quoteProposeRevokeCertificateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Build Redeem Vault Certificate Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a transaction to redeem a vault certificate. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionQuoteResponse</returns>
        System.Threading.Tasks.Task<TransactionQuoteResponse> BuildRedeemCertificateQuoteAsync(string vault, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Build Redeem Vault Certificate Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a transaction to redeem a vault certificate. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionQuoteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionQuoteResponse>> BuildRedeemCertificateQuoteWithHttpInfoAsync(string vault, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Build Cast Vote Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a transaction to make a vote on a vault proposal. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal</param>
        /// <param name="quoteVoteRequest">Parameters used to vote on a proposal</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionQuoteResponse</returns>
        System.Threading.Tasks.Task<TransactionQuoteResponse> BuildVoteQuoteAsync(string vault, int proposalId, QuoteVoteRequest quoteVoteRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Build Cast Vote Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a transaction to make a vote on a vault proposal. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal</param>
        /// <param name="quoteVoteRequest">Parameters used to vote on a proposal</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionQuoteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionQuoteResponse>> BuildVoteQuoteWithHttpInfoAsync(string vault, int proposalId, QuoteVoteRequest quoteVoteRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Build Withdraw Pledge Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a transaction to withdraw a pledge from a vault proposal. If the proposal is expired or the minimum pledge threshold is met, this will not affect the proposal. Otherwise, the pledge will be negated from the total pledge amount. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal</param>
        /// <param name="quoteWithdrawPledgeRequest">Parameters used to withdraw a pledge balance</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionQuoteResponse</returns>
        System.Threading.Tasks.Task<TransactionQuoteResponse> BuildWithdrawPledgeQuoteAsync(string vault, int proposalId, QuoteWithdrawPledgeRequest quoteWithdrawPledgeRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Build Withdraw Pledge Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a transaction to withdraw a pledge from a vault proposal. If the proposal is expired or the minimum pledge threshold is met, this will not affect the proposal. Otherwise, the pledge will be negated from the total pledge amount. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal</param>
        /// <param name="quoteWithdrawPledgeRequest">Parameters used to withdraw a pledge balance</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionQuoteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionQuoteResponse>> BuildWithdrawPledgeQuoteWithHttpInfoAsync(string vault, int proposalId, QuoteWithdrawPledgeRequest quoteWithdrawPledgeRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Build Withdraw Vote Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a transaction to withdraw a vote from a vault proposal. If the proposal is completed or expired, this will not affect the proposal. Otherwise, the vote will be negated from the current voting weights. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal</param>
        /// <param name="quoteWithdrawVoteRequest">Parameters used to withdraw a vote balance</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionQuoteResponse</returns>
        System.Threading.Tasks.Task<TransactionQuoteResponse> BuildWithdrawVoteQuoteAsync(string vault, int proposalId, QuoteWithdrawVoteRequest quoteWithdrawVoteRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Build Withdraw Vote Transaction Quote
        /// </summary>
        /// <remarks>
        /// Builds a quote for a transaction to withdraw a vote from a vault proposal. If the proposal is completed or expired, this will not affect the proposal. Otherwise, the vote will be negated from the current voting weights. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal</param>
        /// <param name="quoteWithdrawVoteRequest">Parameters used to withdraw a vote balance</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionQuoteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionQuoteResponse>> BuildWithdrawVoteQuoteWithHttpInfoAsync(string vault, int proposalId, QuoteWithdrawVoteRequest quoteWithdrawVoteRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Vault Certificates
        /// </summary>
        /// <remarks>
        /// Retrieves details for certificates existing within tracked Opdex vaults. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="owner">Address of the certificate owner (optional)</param>
        /// <param name="status">Status of the certificates (optional)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CertificatesResponse</returns>
        System.Threading.Tasks.Task<CertificatesResponse> GetCertificatesAsync(string vault, string owner = default(string), List<CertificateStatus> status = default(List<CertificateStatus>), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Vault Certificates
        /// </summary>
        /// <remarks>
        /// Retrieves details for certificates existing within tracked Opdex vaults. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="owner">Address of the certificate owner (optional)</param>
        /// <param name="status">Status of the certificates (optional)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CertificatesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CertificatesResponse>> GetCertificatesWithHttpInfoAsync(string vault, string owner = default(string), List<CertificateStatus> status = default(List<CertificateStatus>), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Vault Proposal Pledge Position
        /// </summary>
        /// <remarks>
        /// Retrieves details for a pledgers position on a vault proposal.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal</param>
        /// <param name="pledger">Address of the pledger</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PledgeResponse</returns>
        System.Threading.Tasks.Task<PledgeResponse> GetPledgePositionAsync(string vault, int proposalId, string pledger, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Vault Proposal Pledge Position
        /// </summary>
        /// <remarks>
        /// Retrieves details for a pledgers position on a vault proposal.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal</param>
        /// <param name="pledger">Address of the pledger</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PledgeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PledgeResponse>> GetPledgePositionWithHttpInfoAsync(string vault, int proposalId, string pledger, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Vault Proposal Pledges
        /// </summary>
        /// <remarks>
        /// Retrieves details for pledges that have been made to proposals within tracked Opdex vaults. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal in the vault (optional)</param>
        /// <param name="pledger">Address of the pledger (optional)</param>
        /// <param name="includeZeroBalances">Includes zero balances if true, otherwise filters out zero balances if false (optional, default to false)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PledgesResponse</returns>
        System.Threading.Tasks.Task<PledgesResponse> GetPledgesAsync(string vault, int? proposalId = default(int?), string pledger = default(string), bool? includeZeroBalances = default(bool?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Vault Proposal Pledges
        /// </summary>
        /// <remarks>
        /// Retrieves details for pledges that have been made to proposals within tracked Opdex vaults. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal in the vault (optional)</param>
        /// <param name="pledger">Address of the pledger (optional)</param>
        /// <param name="includeZeroBalances">Includes zero balances if true, otherwise filters out zero balances if false (optional, default to false)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PledgesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PledgesResponse>> GetPledgesWithHttpInfoAsync(string vault, int? proposalId = default(int?), string pledger = default(string), bool? includeZeroBalances = default(bool?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Vault Proposals
        /// </summary>
        /// <remarks>
        /// Retrieves details for proposals existing within tracked Opdex vaults. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="status">Status of the proposal (optional)</param>
        /// <param name="type">Type of proposal (optional)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProposalsResponse</returns>
        System.Threading.Tasks.Task<ProposalsResponse> GetProposalsAsync(string vault, List<ProposalStatus> status = default(List<ProposalStatus>), List<ProposalType> type = default(List<ProposalType>), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Vault Proposals
        /// </summary>
        /// <remarks>
        /// Retrieves details for proposals existing within tracked Opdex vaults. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="status">Status of the proposal (optional)</param>
        /// <param name="type">Type of proposal (optional)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProposalsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProposalsResponse>> GetProposalsWithHttpInfoAsync(string vault, List<ProposalStatus> status = default(List<ProposalStatus>), List<ProposalType> type = default(List<ProposalType>), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Vault
        /// </summary>
        /// <remarks>
        /// Retrieves details of a vault tracked by the Opdex indexer.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VaultResponse</returns>
        System.Threading.Tasks.Task<VaultResponse> GetVaultAsync(string vault, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Vault
        /// </summary>
        /// <remarks>
        /// Retrieves details of a vault tracked by the Opdex indexer.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<VaultResponse>> GetVaultWithHttpInfoAsync(string vault, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Vault Proposal
        /// </summary>
        /// <remarks>
        /// Retrieves a proposal that exists in a tracked Opdex vault.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProposalResponse</returns>
        System.Threading.Tasks.Task<ProposalResponse> GetVaultProposalAsync(string vault, int proposalId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Vault Proposal
        /// </summary>
        /// <remarks>
        /// Retrieves a proposal that exists in a tracked Opdex vault.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProposalResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProposalResponse>> GetVaultProposalWithHttpInfoAsync(string vault, int proposalId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Vaults
        /// </summary>
        /// <remarks>
        /// Retrieves details for tracked Opdex vaults. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lockedToken">Address of the token locked in the vault (optional)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VaultsResponse</returns>
        System.Threading.Tasks.Task<VaultsResponse> GetVaultsAsync(string lockedToken = default(string), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Vaults
        /// </summary>
        /// <remarks>
        /// Retrieves details for tracked Opdex vaults. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lockedToken">Address of the token locked in the vault (optional)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VaultsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<VaultsResponse>> GetVaultsWithHttpInfoAsync(string lockedToken = default(string), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Vault Proposal Vote Position
        /// </summary>
        /// <remarks>
        /// Retrieves details for a voters position on a vault proposal.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal</param>
        /// <param name="voter">Address of the voter</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VoteResponse</returns>
        System.Threading.Tasks.Task<VoteResponse> GetVotePositionAsync(string vault, int proposalId, string voter, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Vault Proposal Vote Position
        /// </summary>
        /// <remarks>
        /// Retrieves details for a voters position on a vault proposal.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal</param>
        /// <param name="voter">Address of the voter</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VoteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<VoteResponse>> GetVotePositionWithHttpInfoAsync(string vault, int proposalId, string voter, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Vault Proposal Votes
        /// </summary>
        /// <remarks>
        /// Retrieves details for votes that have been made against proposals within tracked Opdex vaults. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal in the vault (optional)</param>
        /// <param name="voter">Address of the voter (optional)</param>
        /// <param name="includeZeroBalances">Includes zero balances if true, otherwise filters out zero balances if false (optional, default to false)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VotesResponse</returns>
        System.Threading.Tasks.Task<VotesResponse> GetVotesAsync(string vault, int? proposalId = default(int?), string voter = default(string), bool? includeZeroBalances = default(bool?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Vault Proposal Votes
        /// </summary>
        /// <remarks>
        /// Retrieves details for votes that have been made against proposals within tracked Opdex vaults. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </remarks>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal in the vault (optional)</param>
        /// <param name="voter">Address of the voter (optional)</param>
        /// <param name="includeZeroBalances">Includes zero balances if true, otherwise filters out zero balances if false (optional, default to false)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VotesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<VotesResponse>> GetVotesWithHttpInfoAsync(string vault, int? proposalId = default(int?), string voter = default(string), bool? includeZeroBalances = default(bool?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVaultsApi : IVaultsApiSync, IVaultsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class VaultsApi : IDisposable, IVaultsApi
    {
        private Opdex.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="VaultsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public VaultsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VaultsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public VaultsApi(string basePath)
        {
            this.Configuration = Opdex.Client.Client.Configuration.MergeConfigurations(
                Opdex.Client.Client.GlobalConfiguration.Instance,
                new Opdex.Client.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Opdex.Client.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Opdex.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VaultsApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public VaultsApi(Opdex.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Opdex.Client.Client.Configuration.MergeConfigurations(
                Opdex.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Opdex.Client.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Opdex.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VaultsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public VaultsApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VaultsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public VaultsApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Opdex.Client.Client.Configuration.MergeConfigurations(
                Opdex.Client.Client.GlobalConfiguration.Instance,
                new Opdex.Client.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Opdex.Client.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Opdex.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VaultsApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public VaultsApi(HttpClient client, Opdex.Client.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Opdex.Client.Client.Configuration.MergeConfigurations(
                Opdex.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Opdex.Client.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Opdex.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VaultsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public VaultsApi(Opdex.Client.Client.ISynchronousClient client, Opdex.Client.Client.IAsynchronousClient asyncClient, Opdex.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Opdex.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Opdex.Client.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Opdex.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Opdex.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Opdex.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Opdex.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Build Complete Proposal Transaction Quote Builds a quote for a transaction to complete a vault proposal. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal</param>
        /// <returns>TransactionQuoteResponse</returns>
        public TransactionQuoteResponse BuildCompleteProposalQuote(string vault, int proposalId)
        {
            Opdex.Client.Client.ApiResponse<TransactionQuoteResponse> localVarResponse = BuildCompleteProposalQuoteWithHttpInfo(vault, proposalId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Build Complete Proposal Transaction Quote Builds a quote for a transaction to complete a vault proposal. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal</param>
        /// <returns>ApiResponse of TransactionQuoteResponse</returns>
        public Opdex.Client.Client.ApiResponse<TransactionQuoteResponse> BuildCompleteProposalQuoteWithHttpInfo(string vault, int proposalId)
        {
            // verify the required parameter 'vault' is set
            if (vault == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'vault' when calling VaultsApi->BuildCompleteProposalQuote");

            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("vault", Opdex.Client.Client.ClientUtils.ParameterToString(vault)); // path parameter
            localVarRequestOptions.PathParameters.Add("proposalId", Opdex.Client.Client.ClientUtils.ParameterToString(proposalId)); // path parameter

            // authentication (opdexAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TransactionQuoteResponse>("/vaults/{vault}/proposals/{proposalId}/complete", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildCompleteProposalQuote", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Build Complete Proposal Transaction Quote Builds a quote for a transaction to complete a vault proposal. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionQuoteResponse</returns>
        public async System.Threading.Tasks.Task<TransactionQuoteResponse> BuildCompleteProposalQuoteAsync(string vault, int proposalId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opdex.Client.Client.ApiResponse<TransactionQuoteResponse> localVarResponse = await BuildCompleteProposalQuoteWithHttpInfoAsync(vault, proposalId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Build Complete Proposal Transaction Quote Builds a quote for a transaction to complete a vault proposal. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionQuoteResponse)</returns>
        public async System.Threading.Tasks.Task<Opdex.Client.Client.ApiResponse<TransactionQuoteResponse>> BuildCompleteProposalQuoteWithHttpInfoAsync(string vault, int proposalId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'vault' is set
            if (vault == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'vault' when calling VaultsApi->BuildCompleteProposalQuote");


            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };


            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("vault", Opdex.Client.Client.ClientUtils.ParameterToString(vault)); // path parameter
            localVarRequestOptions.PathParameters.Add("proposalId", Opdex.Client.Client.ClientUtils.ParameterToString(proposalId)); // path parameter

            // authentication (opdexAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TransactionQuoteResponse>("/vaults/{vault}/proposals/{proposalId}/complete", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildCompleteProposalQuote", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Build Make Pledge Transaction Quote Builds a quote for a transaction to make a pledge to a vault proposal. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal</param>
        /// <param name="quotePledgeRequest">Parameters used to make a pledge to a proposal</param>
        /// <returns>TransactionQuoteResponse</returns>
        public TransactionQuoteResponse BuildPledgeQuote(string vault, int proposalId, QuotePledgeRequest quotePledgeRequest)
        {
            Opdex.Client.Client.ApiResponse<TransactionQuoteResponse> localVarResponse = BuildPledgeQuoteWithHttpInfo(vault, proposalId, quotePledgeRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Build Make Pledge Transaction Quote Builds a quote for a transaction to make a pledge to a vault proposal. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal</param>
        /// <param name="quotePledgeRequest">Parameters used to make a pledge to a proposal</param>
        /// <returns>ApiResponse of TransactionQuoteResponse</returns>
        public Opdex.Client.Client.ApiResponse<TransactionQuoteResponse> BuildPledgeQuoteWithHttpInfo(string vault, int proposalId, QuotePledgeRequest quotePledgeRequest)
        {
            // verify the required parameter 'vault' is set
            if (vault == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'vault' when calling VaultsApi->BuildPledgeQuote");

            // verify the required parameter 'quotePledgeRequest' is set
            if (quotePledgeRequest == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'quotePledgeRequest' when calling VaultsApi->BuildPledgeQuote");

            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("vault", Opdex.Client.Client.ClientUtils.ParameterToString(vault)); // path parameter
            localVarRequestOptions.PathParameters.Add("proposalId", Opdex.Client.Client.ClientUtils.ParameterToString(proposalId)); // path parameter
            localVarRequestOptions.Data = quotePledgeRequest;

            // authentication (opdexAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TransactionQuoteResponse>("/vaults/{vault}/proposals/{proposalId}/pledges", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildPledgeQuote", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Build Make Pledge Transaction Quote Builds a quote for a transaction to make a pledge to a vault proposal. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal</param>
        /// <param name="quotePledgeRequest">Parameters used to make a pledge to a proposal</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionQuoteResponse</returns>
        public async System.Threading.Tasks.Task<TransactionQuoteResponse> BuildPledgeQuoteAsync(string vault, int proposalId, QuotePledgeRequest quotePledgeRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opdex.Client.Client.ApiResponse<TransactionQuoteResponse> localVarResponse = await BuildPledgeQuoteWithHttpInfoAsync(vault, proposalId, quotePledgeRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Build Make Pledge Transaction Quote Builds a quote for a transaction to make a pledge to a vault proposal. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal</param>
        /// <param name="quotePledgeRequest">Parameters used to make a pledge to a proposal</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionQuoteResponse)</returns>
        public async System.Threading.Tasks.Task<Opdex.Client.Client.ApiResponse<TransactionQuoteResponse>> BuildPledgeQuoteWithHttpInfoAsync(string vault, int proposalId, QuotePledgeRequest quotePledgeRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'vault' is set
            if (vault == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'vault' when calling VaultsApi->BuildPledgeQuote");

            // verify the required parameter 'quotePledgeRequest' is set
            if (quotePledgeRequest == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'quotePledgeRequest' when calling VaultsApi->BuildPledgeQuote");


            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };


            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("vault", Opdex.Client.Client.ClientUtils.ParameterToString(vault)); // path parameter
            localVarRequestOptions.PathParameters.Add("proposalId", Opdex.Client.Client.ClientUtils.ParameterToString(proposalId)); // path parameter
            localVarRequestOptions.Data = quotePledgeRequest;

            // authentication (opdexAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TransactionQuoteResponse>("/vaults/{vault}/proposals/{proposalId}/pledges", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildPledgeQuote", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Build Propose Change Minimum Pledge Transaction Quote Builds a quote for a transaction to create a proposal for changing the minimum pledge amount. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="quoteProposeMinimumPledgeRequest">Parameters used to propose the revokation of a certificate</param>
        /// <returns>TransactionQuoteResponse</returns>
        public TransactionQuoteResponse BuildProposeChangeMinimumPledgeQuote(string vault, QuoteProposeMinimumPledgeRequest quoteProposeMinimumPledgeRequest)
        {
            Opdex.Client.Client.ApiResponse<TransactionQuoteResponse> localVarResponse = BuildProposeChangeMinimumPledgeQuoteWithHttpInfo(vault, quoteProposeMinimumPledgeRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Build Propose Change Minimum Pledge Transaction Quote Builds a quote for a transaction to create a proposal for changing the minimum pledge amount. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="quoteProposeMinimumPledgeRequest">Parameters used to propose the revokation of a certificate</param>
        /// <returns>ApiResponse of TransactionQuoteResponse</returns>
        public Opdex.Client.Client.ApiResponse<TransactionQuoteResponse> BuildProposeChangeMinimumPledgeQuoteWithHttpInfo(string vault, QuoteProposeMinimumPledgeRequest quoteProposeMinimumPledgeRequest)
        {
            // verify the required parameter 'vault' is set
            if (vault == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'vault' when calling VaultsApi->BuildProposeChangeMinimumPledgeQuote");

            // verify the required parameter 'quoteProposeMinimumPledgeRequest' is set
            if (quoteProposeMinimumPledgeRequest == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'quoteProposeMinimumPledgeRequest' when calling VaultsApi->BuildProposeChangeMinimumPledgeQuote");

            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("vault", Opdex.Client.Client.ClientUtils.ParameterToString(vault)); // path parameter
            localVarRequestOptions.Data = quoteProposeMinimumPledgeRequest;

            // authentication (opdexAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TransactionQuoteResponse>("/vaults/{vault}/proposals/minimum-pledge", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildProposeChangeMinimumPledgeQuote", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Build Propose Change Minimum Pledge Transaction Quote Builds a quote for a transaction to create a proposal for changing the minimum pledge amount. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="quoteProposeMinimumPledgeRequest">Parameters used to propose the revokation of a certificate</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionQuoteResponse</returns>
        public async System.Threading.Tasks.Task<TransactionQuoteResponse> BuildProposeChangeMinimumPledgeQuoteAsync(string vault, QuoteProposeMinimumPledgeRequest quoteProposeMinimumPledgeRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opdex.Client.Client.ApiResponse<TransactionQuoteResponse> localVarResponse = await BuildProposeChangeMinimumPledgeQuoteWithHttpInfoAsync(vault, quoteProposeMinimumPledgeRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Build Propose Change Minimum Pledge Transaction Quote Builds a quote for a transaction to create a proposal for changing the minimum pledge amount. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="quoteProposeMinimumPledgeRequest">Parameters used to propose the revokation of a certificate</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionQuoteResponse)</returns>
        public async System.Threading.Tasks.Task<Opdex.Client.Client.ApiResponse<TransactionQuoteResponse>> BuildProposeChangeMinimumPledgeQuoteWithHttpInfoAsync(string vault, QuoteProposeMinimumPledgeRequest quoteProposeMinimumPledgeRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'vault' is set
            if (vault == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'vault' when calling VaultsApi->BuildProposeChangeMinimumPledgeQuote");

            // verify the required parameter 'quoteProposeMinimumPledgeRequest' is set
            if (quoteProposeMinimumPledgeRequest == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'quoteProposeMinimumPledgeRequest' when calling VaultsApi->BuildProposeChangeMinimumPledgeQuote");


            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };


            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("vault", Opdex.Client.Client.ClientUtils.ParameterToString(vault)); // path parameter
            localVarRequestOptions.Data = quoteProposeMinimumPledgeRequest;

            // authentication (opdexAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TransactionQuoteResponse>("/vaults/{vault}/proposals/minimum-pledge", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildProposeChangeMinimumPledgeQuote", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Build Propose Change Minimum Vote Transaction Quote Builds a quote for a transaction to create a proposal for changing the minimum vote threshold. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="quoteProposeMinimumVoteRequest">Parameters used to propose the revokation of a certificate</param>
        /// <returns>TransactionQuoteResponse</returns>
        public TransactionQuoteResponse BuildProposeChangeMinimumVoteQuote(string vault, QuoteProposeMinimumVoteRequest quoteProposeMinimumVoteRequest)
        {
            Opdex.Client.Client.ApiResponse<TransactionQuoteResponse> localVarResponse = BuildProposeChangeMinimumVoteQuoteWithHttpInfo(vault, quoteProposeMinimumVoteRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Build Propose Change Minimum Vote Transaction Quote Builds a quote for a transaction to create a proposal for changing the minimum vote threshold. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="quoteProposeMinimumVoteRequest">Parameters used to propose the revokation of a certificate</param>
        /// <returns>ApiResponse of TransactionQuoteResponse</returns>
        public Opdex.Client.Client.ApiResponse<TransactionQuoteResponse> BuildProposeChangeMinimumVoteQuoteWithHttpInfo(string vault, QuoteProposeMinimumVoteRequest quoteProposeMinimumVoteRequest)
        {
            // verify the required parameter 'vault' is set
            if (vault == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'vault' when calling VaultsApi->BuildProposeChangeMinimumVoteQuote");

            // verify the required parameter 'quoteProposeMinimumVoteRequest' is set
            if (quoteProposeMinimumVoteRequest == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'quoteProposeMinimumVoteRequest' when calling VaultsApi->BuildProposeChangeMinimumVoteQuote");

            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("vault", Opdex.Client.Client.ClientUtils.ParameterToString(vault)); // path parameter
            localVarRequestOptions.Data = quoteProposeMinimumVoteRequest;

            // authentication (opdexAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TransactionQuoteResponse>("/vaults/{vault}/proposals/minimum-vote", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildProposeChangeMinimumVoteQuote", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Build Propose Change Minimum Vote Transaction Quote Builds a quote for a transaction to create a proposal for changing the minimum vote threshold. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="quoteProposeMinimumVoteRequest">Parameters used to propose the revokation of a certificate</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionQuoteResponse</returns>
        public async System.Threading.Tasks.Task<TransactionQuoteResponse> BuildProposeChangeMinimumVoteQuoteAsync(string vault, QuoteProposeMinimumVoteRequest quoteProposeMinimumVoteRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opdex.Client.Client.ApiResponse<TransactionQuoteResponse> localVarResponse = await BuildProposeChangeMinimumVoteQuoteWithHttpInfoAsync(vault, quoteProposeMinimumVoteRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Build Propose Change Minimum Vote Transaction Quote Builds a quote for a transaction to create a proposal for changing the minimum vote threshold. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="quoteProposeMinimumVoteRequest">Parameters used to propose the revokation of a certificate</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionQuoteResponse)</returns>
        public async System.Threading.Tasks.Task<Opdex.Client.Client.ApiResponse<TransactionQuoteResponse>> BuildProposeChangeMinimumVoteQuoteWithHttpInfoAsync(string vault, QuoteProposeMinimumVoteRequest quoteProposeMinimumVoteRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'vault' is set
            if (vault == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'vault' when calling VaultsApi->BuildProposeChangeMinimumVoteQuote");

            // verify the required parameter 'quoteProposeMinimumVoteRequest' is set
            if (quoteProposeMinimumVoteRequest == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'quoteProposeMinimumVoteRequest' when calling VaultsApi->BuildProposeChangeMinimumVoteQuote");


            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };


            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("vault", Opdex.Client.Client.ClientUtils.ParameterToString(vault)); // path parameter
            localVarRequestOptions.Data = quoteProposeMinimumVoteRequest;

            // authentication (opdexAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TransactionQuoteResponse>("/vaults/{vault}/proposals/minimum-vote", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildProposeChangeMinimumVoteQuote", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Build Propose Create Certificate Transaction Quote Builds a quote for a transaction to create a proposal for creating a vault certificate. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="quoteProposeCreateCertificateRequest">Parameters used to propose the creation of a certificate</param>
        /// <returns>TransactionQuoteResponse</returns>
        public TransactionQuoteResponse BuildProposeCreateCertificateQuote(string vault, QuoteProposeCreateCertificateRequest quoteProposeCreateCertificateRequest)
        {
            Opdex.Client.Client.ApiResponse<TransactionQuoteResponse> localVarResponse = BuildProposeCreateCertificateQuoteWithHttpInfo(vault, quoteProposeCreateCertificateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Build Propose Create Certificate Transaction Quote Builds a quote for a transaction to create a proposal for creating a vault certificate. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="quoteProposeCreateCertificateRequest">Parameters used to propose the creation of a certificate</param>
        /// <returns>ApiResponse of TransactionQuoteResponse</returns>
        public Opdex.Client.Client.ApiResponse<TransactionQuoteResponse> BuildProposeCreateCertificateQuoteWithHttpInfo(string vault, QuoteProposeCreateCertificateRequest quoteProposeCreateCertificateRequest)
        {
            // verify the required parameter 'vault' is set
            if (vault == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'vault' when calling VaultsApi->BuildProposeCreateCertificateQuote");

            // verify the required parameter 'quoteProposeCreateCertificateRequest' is set
            if (quoteProposeCreateCertificateRequest == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'quoteProposeCreateCertificateRequest' when calling VaultsApi->BuildProposeCreateCertificateQuote");

            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("vault", Opdex.Client.Client.ClientUtils.ParameterToString(vault)); // path parameter
            localVarRequestOptions.Data = quoteProposeCreateCertificateRequest;

            // authentication (opdexAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TransactionQuoteResponse>("/vaults/{vault}/proposals/create-certificate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildProposeCreateCertificateQuote", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Build Propose Create Certificate Transaction Quote Builds a quote for a transaction to create a proposal for creating a vault certificate. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="quoteProposeCreateCertificateRequest">Parameters used to propose the creation of a certificate</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionQuoteResponse</returns>
        public async System.Threading.Tasks.Task<TransactionQuoteResponse> BuildProposeCreateCertificateQuoteAsync(string vault, QuoteProposeCreateCertificateRequest quoteProposeCreateCertificateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opdex.Client.Client.ApiResponse<TransactionQuoteResponse> localVarResponse = await BuildProposeCreateCertificateQuoteWithHttpInfoAsync(vault, quoteProposeCreateCertificateRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Build Propose Create Certificate Transaction Quote Builds a quote for a transaction to create a proposal for creating a vault certificate. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="quoteProposeCreateCertificateRequest">Parameters used to propose the creation of a certificate</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionQuoteResponse)</returns>
        public async System.Threading.Tasks.Task<Opdex.Client.Client.ApiResponse<TransactionQuoteResponse>> BuildProposeCreateCertificateQuoteWithHttpInfoAsync(string vault, QuoteProposeCreateCertificateRequest quoteProposeCreateCertificateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'vault' is set
            if (vault == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'vault' when calling VaultsApi->BuildProposeCreateCertificateQuote");

            // verify the required parameter 'quoteProposeCreateCertificateRequest' is set
            if (quoteProposeCreateCertificateRequest == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'quoteProposeCreateCertificateRequest' when calling VaultsApi->BuildProposeCreateCertificateQuote");


            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };


            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("vault", Opdex.Client.Client.ClientUtils.ParameterToString(vault)); // path parameter
            localVarRequestOptions.Data = quoteProposeCreateCertificateRequest;

            // authentication (opdexAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TransactionQuoteResponse>("/vaults/{vault}/proposals/create-certificate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildProposeCreateCertificateQuote", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Build Propose Revoke Certificate Transaction Quote Builds a quote for a transaction to create a proposal for revoking a vault certificate. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="quoteProposeRevokeCertificateRequest">Parameters used to propose the revokation of a certificate</param>
        /// <returns>TransactionQuoteResponse</returns>
        public TransactionQuoteResponse BuildProposeRevokeCertificateQuote(string vault, QuoteProposeRevokeCertificateRequest quoteProposeRevokeCertificateRequest)
        {
            Opdex.Client.Client.ApiResponse<TransactionQuoteResponse> localVarResponse = BuildProposeRevokeCertificateQuoteWithHttpInfo(vault, quoteProposeRevokeCertificateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Build Propose Revoke Certificate Transaction Quote Builds a quote for a transaction to create a proposal for revoking a vault certificate. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="quoteProposeRevokeCertificateRequest">Parameters used to propose the revokation of a certificate</param>
        /// <returns>ApiResponse of TransactionQuoteResponse</returns>
        public Opdex.Client.Client.ApiResponse<TransactionQuoteResponse> BuildProposeRevokeCertificateQuoteWithHttpInfo(string vault, QuoteProposeRevokeCertificateRequest quoteProposeRevokeCertificateRequest)
        {
            // verify the required parameter 'vault' is set
            if (vault == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'vault' when calling VaultsApi->BuildProposeRevokeCertificateQuote");

            // verify the required parameter 'quoteProposeRevokeCertificateRequest' is set
            if (quoteProposeRevokeCertificateRequest == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'quoteProposeRevokeCertificateRequest' when calling VaultsApi->BuildProposeRevokeCertificateQuote");

            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("vault", Opdex.Client.Client.ClientUtils.ParameterToString(vault)); // path parameter
            localVarRequestOptions.Data = quoteProposeRevokeCertificateRequest;

            // authentication (opdexAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TransactionQuoteResponse>("/vaults/{vault}/proposals/revoke-certificate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildProposeRevokeCertificateQuote", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Build Propose Revoke Certificate Transaction Quote Builds a quote for a transaction to create a proposal for revoking a vault certificate. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="quoteProposeRevokeCertificateRequest">Parameters used to propose the revokation of a certificate</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionQuoteResponse</returns>
        public async System.Threading.Tasks.Task<TransactionQuoteResponse> BuildProposeRevokeCertificateQuoteAsync(string vault, QuoteProposeRevokeCertificateRequest quoteProposeRevokeCertificateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opdex.Client.Client.ApiResponse<TransactionQuoteResponse> localVarResponse = await BuildProposeRevokeCertificateQuoteWithHttpInfoAsync(vault, quoteProposeRevokeCertificateRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Build Propose Revoke Certificate Transaction Quote Builds a quote for a transaction to create a proposal for revoking a vault certificate. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="quoteProposeRevokeCertificateRequest">Parameters used to propose the revokation of a certificate</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionQuoteResponse)</returns>
        public async System.Threading.Tasks.Task<Opdex.Client.Client.ApiResponse<TransactionQuoteResponse>> BuildProposeRevokeCertificateQuoteWithHttpInfoAsync(string vault, QuoteProposeRevokeCertificateRequest quoteProposeRevokeCertificateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'vault' is set
            if (vault == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'vault' when calling VaultsApi->BuildProposeRevokeCertificateQuote");

            // verify the required parameter 'quoteProposeRevokeCertificateRequest' is set
            if (quoteProposeRevokeCertificateRequest == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'quoteProposeRevokeCertificateRequest' when calling VaultsApi->BuildProposeRevokeCertificateQuote");


            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };


            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("vault", Opdex.Client.Client.ClientUtils.ParameterToString(vault)); // path parameter
            localVarRequestOptions.Data = quoteProposeRevokeCertificateRequest;

            // authentication (opdexAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TransactionQuoteResponse>("/vaults/{vault}/proposals/revoke-certificate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildProposeRevokeCertificateQuote", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Build Redeem Vault Certificate Transaction Quote Builds a quote for a transaction to redeem a vault certificate. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <returns>TransactionQuoteResponse</returns>
        public TransactionQuoteResponse BuildRedeemCertificateQuote(string vault)
        {
            Opdex.Client.Client.ApiResponse<TransactionQuoteResponse> localVarResponse = BuildRedeemCertificateQuoteWithHttpInfo(vault);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Build Redeem Vault Certificate Transaction Quote Builds a quote for a transaction to redeem a vault certificate. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <returns>ApiResponse of TransactionQuoteResponse</returns>
        public Opdex.Client.Client.ApiResponse<TransactionQuoteResponse> BuildRedeemCertificateQuoteWithHttpInfo(string vault)
        {
            // verify the required parameter 'vault' is set
            if (vault == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'vault' when calling VaultsApi->BuildRedeemCertificateQuote");

            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("vault", Opdex.Client.Client.ClientUtils.ParameterToString(vault)); // path parameter

            // authentication (opdexAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TransactionQuoteResponse>("/vaults/{vault}/certificates/redeem", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildRedeemCertificateQuote", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Build Redeem Vault Certificate Transaction Quote Builds a quote for a transaction to redeem a vault certificate. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionQuoteResponse</returns>
        public async System.Threading.Tasks.Task<TransactionQuoteResponse> BuildRedeemCertificateQuoteAsync(string vault, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opdex.Client.Client.ApiResponse<TransactionQuoteResponse> localVarResponse = await BuildRedeemCertificateQuoteWithHttpInfoAsync(vault, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Build Redeem Vault Certificate Transaction Quote Builds a quote for a transaction to redeem a vault certificate. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionQuoteResponse)</returns>
        public async System.Threading.Tasks.Task<Opdex.Client.Client.ApiResponse<TransactionQuoteResponse>> BuildRedeemCertificateQuoteWithHttpInfoAsync(string vault, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'vault' is set
            if (vault == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'vault' when calling VaultsApi->BuildRedeemCertificateQuote");


            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };


            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("vault", Opdex.Client.Client.ClientUtils.ParameterToString(vault)); // path parameter

            // authentication (opdexAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TransactionQuoteResponse>("/vaults/{vault}/certificates/redeem", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildRedeemCertificateQuote", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Build Cast Vote Transaction Quote Builds a quote for a transaction to make a vote on a vault proposal. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal</param>
        /// <param name="quoteVoteRequest">Parameters used to vote on a proposal</param>
        /// <returns>TransactionQuoteResponse</returns>
        public TransactionQuoteResponse BuildVoteQuote(string vault, int proposalId, QuoteVoteRequest quoteVoteRequest)
        {
            Opdex.Client.Client.ApiResponse<TransactionQuoteResponse> localVarResponse = BuildVoteQuoteWithHttpInfo(vault, proposalId, quoteVoteRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Build Cast Vote Transaction Quote Builds a quote for a transaction to make a vote on a vault proposal. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal</param>
        /// <param name="quoteVoteRequest">Parameters used to vote on a proposal</param>
        /// <returns>ApiResponse of TransactionQuoteResponse</returns>
        public Opdex.Client.Client.ApiResponse<TransactionQuoteResponse> BuildVoteQuoteWithHttpInfo(string vault, int proposalId, QuoteVoteRequest quoteVoteRequest)
        {
            // verify the required parameter 'vault' is set
            if (vault == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'vault' when calling VaultsApi->BuildVoteQuote");

            // verify the required parameter 'quoteVoteRequest' is set
            if (quoteVoteRequest == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'quoteVoteRequest' when calling VaultsApi->BuildVoteQuote");

            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("vault", Opdex.Client.Client.ClientUtils.ParameterToString(vault)); // path parameter
            localVarRequestOptions.PathParameters.Add("proposalId", Opdex.Client.Client.ClientUtils.ParameterToString(proposalId)); // path parameter
            localVarRequestOptions.Data = quoteVoteRequest;

            // authentication (opdexAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TransactionQuoteResponse>("/vaults/{vault}/proposals/{proposalId}/votes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildVoteQuote", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Build Cast Vote Transaction Quote Builds a quote for a transaction to make a vote on a vault proposal. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal</param>
        /// <param name="quoteVoteRequest">Parameters used to vote on a proposal</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionQuoteResponse</returns>
        public async System.Threading.Tasks.Task<TransactionQuoteResponse> BuildVoteQuoteAsync(string vault, int proposalId, QuoteVoteRequest quoteVoteRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opdex.Client.Client.ApiResponse<TransactionQuoteResponse> localVarResponse = await BuildVoteQuoteWithHttpInfoAsync(vault, proposalId, quoteVoteRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Build Cast Vote Transaction Quote Builds a quote for a transaction to make a vote on a vault proposal. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal</param>
        /// <param name="quoteVoteRequest">Parameters used to vote on a proposal</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionQuoteResponse)</returns>
        public async System.Threading.Tasks.Task<Opdex.Client.Client.ApiResponse<TransactionQuoteResponse>> BuildVoteQuoteWithHttpInfoAsync(string vault, int proposalId, QuoteVoteRequest quoteVoteRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'vault' is set
            if (vault == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'vault' when calling VaultsApi->BuildVoteQuote");

            // verify the required parameter 'quoteVoteRequest' is set
            if (quoteVoteRequest == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'quoteVoteRequest' when calling VaultsApi->BuildVoteQuote");


            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };


            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("vault", Opdex.Client.Client.ClientUtils.ParameterToString(vault)); // path parameter
            localVarRequestOptions.PathParameters.Add("proposalId", Opdex.Client.Client.ClientUtils.ParameterToString(proposalId)); // path parameter
            localVarRequestOptions.Data = quoteVoteRequest;

            // authentication (opdexAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TransactionQuoteResponse>("/vaults/{vault}/proposals/{proposalId}/votes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildVoteQuote", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Build Withdraw Pledge Transaction Quote Builds a quote for a transaction to withdraw a pledge from a vault proposal. If the proposal is expired or the minimum pledge threshold is met, this will not affect the proposal. Otherwise, the pledge will be negated from the total pledge amount. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal</param>
        /// <param name="quoteWithdrawPledgeRequest">Parameters used to withdraw a pledge balance</param>
        /// <returns>TransactionQuoteResponse</returns>
        public TransactionQuoteResponse BuildWithdrawPledgeQuote(string vault, int proposalId, QuoteWithdrawPledgeRequest quoteWithdrawPledgeRequest)
        {
            Opdex.Client.Client.ApiResponse<TransactionQuoteResponse> localVarResponse = BuildWithdrawPledgeQuoteWithHttpInfo(vault, proposalId, quoteWithdrawPledgeRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Build Withdraw Pledge Transaction Quote Builds a quote for a transaction to withdraw a pledge from a vault proposal. If the proposal is expired or the minimum pledge threshold is met, this will not affect the proposal. Otherwise, the pledge will be negated from the total pledge amount. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal</param>
        /// <param name="quoteWithdrawPledgeRequest">Parameters used to withdraw a pledge balance</param>
        /// <returns>ApiResponse of TransactionQuoteResponse</returns>
        public Opdex.Client.Client.ApiResponse<TransactionQuoteResponse> BuildWithdrawPledgeQuoteWithHttpInfo(string vault, int proposalId, QuoteWithdrawPledgeRequest quoteWithdrawPledgeRequest)
        {
            // verify the required parameter 'vault' is set
            if (vault == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'vault' when calling VaultsApi->BuildWithdrawPledgeQuote");

            // verify the required parameter 'quoteWithdrawPledgeRequest' is set
            if (quoteWithdrawPledgeRequest == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'quoteWithdrawPledgeRequest' when calling VaultsApi->BuildWithdrawPledgeQuote");

            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("vault", Opdex.Client.Client.ClientUtils.ParameterToString(vault)); // path parameter
            localVarRequestOptions.PathParameters.Add("proposalId", Opdex.Client.Client.ClientUtils.ParameterToString(proposalId)); // path parameter
            localVarRequestOptions.Data = quoteWithdrawPledgeRequest;

            // authentication (opdexAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TransactionQuoteResponse>("/vaults/{vault}/proposals/{proposalId}/pledges/withdraw", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildWithdrawPledgeQuote", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Build Withdraw Pledge Transaction Quote Builds a quote for a transaction to withdraw a pledge from a vault proposal. If the proposal is expired or the minimum pledge threshold is met, this will not affect the proposal. Otherwise, the pledge will be negated from the total pledge amount. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal</param>
        /// <param name="quoteWithdrawPledgeRequest">Parameters used to withdraw a pledge balance</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionQuoteResponse</returns>
        public async System.Threading.Tasks.Task<TransactionQuoteResponse> BuildWithdrawPledgeQuoteAsync(string vault, int proposalId, QuoteWithdrawPledgeRequest quoteWithdrawPledgeRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opdex.Client.Client.ApiResponse<TransactionQuoteResponse> localVarResponse = await BuildWithdrawPledgeQuoteWithHttpInfoAsync(vault, proposalId, quoteWithdrawPledgeRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Build Withdraw Pledge Transaction Quote Builds a quote for a transaction to withdraw a pledge from a vault proposal. If the proposal is expired or the minimum pledge threshold is met, this will not affect the proposal. Otherwise, the pledge will be negated from the total pledge amount. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal</param>
        /// <param name="quoteWithdrawPledgeRequest">Parameters used to withdraw a pledge balance</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionQuoteResponse)</returns>
        public async System.Threading.Tasks.Task<Opdex.Client.Client.ApiResponse<TransactionQuoteResponse>> BuildWithdrawPledgeQuoteWithHttpInfoAsync(string vault, int proposalId, QuoteWithdrawPledgeRequest quoteWithdrawPledgeRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'vault' is set
            if (vault == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'vault' when calling VaultsApi->BuildWithdrawPledgeQuote");

            // verify the required parameter 'quoteWithdrawPledgeRequest' is set
            if (quoteWithdrawPledgeRequest == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'quoteWithdrawPledgeRequest' when calling VaultsApi->BuildWithdrawPledgeQuote");


            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };


            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("vault", Opdex.Client.Client.ClientUtils.ParameterToString(vault)); // path parameter
            localVarRequestOptions.PathParameters.Add("proposalId", Opdex.Client.Client.ClientUtils.ParameterToString(proposalId)); // path parameter
            localVarRequestOptions.Data = quoteWithdrawPledgeRequest;

            // authentication (opdexAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TransactionQuoteResponse>("/vaults/{vault}/proposals/{proposalId}/pledges/withdraw", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildWithdrawPledgeQuote", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Build Withdraw Vote Transaction Quote Builds a quote for a transaction to withdraw a vote from a vault proposal. If the proposal is completed or expired, this will not affect the proposal. Otherwise, the vote will be negated from the current voting weights. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal</param>
        /// <param name="quoteWithdrawVoteRequest">Parameters used to withdraw a vote balance</param>
        /// <returns>TransactionQuoteResponse</returns>
        public TransactionQuoteResponse BuildWithdrawVoteQuote(string vault, int proposalId, QuoteWithdrawVoteRequest quoteWithdrawVoteRequest)
        {
            Opdex.Client.Client.ApiResponse<TransactionQuoteResponse> localVarResponse = BuildWithdrawVoteQuoteWithHttpInfo(vault, proposalId, quoteWithdrawVoteRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Build Withdraw Vote Transaction Quote Builds a quote for a transaction to withdraw a vote from a vault proposal. If the proposal is completed or expired, this will not affect the proposal. Otherwise, the vote will be negated from the current voting weights. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal</param>
        /// <param name="quoteWithdrawVoteRequest">Parameters used to withdraw a vote balance</param>
        /// <returns>ApiResponse of TransactionQuoteResponse</returns>
        public Opdex.Client.Client.ApiResponse<TransactionQuoteResponse> BuildWithdrawVoteQuoteWithHttpInfo(string vault, int proposalId, QuoteWithdrawVoteRequest quoteWithdrawVoteRequest)
        {
            // verify the required parameter 'vault' is set
            if (vault == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'vault' when calling VaultsApi->BuildWithdrawVoteQuote");

            // verify the required parameter 'quoteWithdrawVoteRequest' is set
            if (quoteWithdrawVoteRequest == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'quoteWithdrawVoteRequest' when calling VaultsApi->BuildWithdrawVoteQuote");

            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("vault", Opdex.Client.Client.ClientUtils.ParameterToString(vault)); // path parameter
            localVarRequestOptions.PathParameters.Add("proposalId", Opdex.Client.Client.ClientUtils.ParameterToString(proposalId)); // path parameter
            localVarRequestOptions.Data = quoteWithdrawVoteRequest;

            // authentication (opdexAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TransactionQuoteResponse>("/vaults/{vault}/proposals/{proposalId}/votes/withdraw", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildWithdrawVoteQuote", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Build Withdraw Vote Transaction Quote Builds a quote for a transaction to withdraw a vote from a vault proposal. If the proposal is completed or expired, this will not affect the proposal. Otherwise, the vote will be negated from the current voting weights. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal</param>
        /// <param name="quoteWithdrawVoteRequest">Parameters used to withdraw a vote balance</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionQuoteResponse</returns>
        public async System.Threading.Tasks.Task<TransactionQuoteResponse> BuildWithdrawVoteQuoteAsync(string vault, int proposalId, QuoteWithdrawVoteRequest quoteWithdrawVoteRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opdex.Client.Client.ApiResponse<TransactionQuoteResponse> localVarResponse = await BuildWithdrawVoteQuoteWithHttpInfoAsync(vault, proposalId, quoteWithdrawVoteRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Build Withdraw Vote Transaction Quote Builds a quote for a transaction to withdraw a vote from a vault proposal. If the proposal is completed or expired, this will not affect the proposal. Otherwise, the vote will be negated from the current voting weights. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal</param>
        /// <param name="quoteWithdrawVoteRequest">Parameters used to withdraw a vote balance</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionQuoteResponse)</returns>
        public async System.Threading.Tasks.Task<Opdex.Client.Client.ApiResponse<TransactionQuoteResponse>> BuildWithdrawVoteQuoteWithHttpInfoAsync(string vault, int proposalId, QuoteWithdrawVoteRequest quoteWithdrawVoteRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'vault' is set
            if (vault == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'vault' when calling VaultsApi->BuildWithdrawVoteQuote");

            // verify the required parameter 'quoteWithdrawVoteRequest' is set
            if (quoteWithdrawVoteRequest == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'quoteWithdrawVoteRequest' when calling VaultsApi->BuildWithdrawVoteQuote");


            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };


            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("vault", Opdex.Client.Client.ClientUtils.ParameterToString(vault)); // path parameter
            localVarRequestOptions.PathParameters.Add("proposalId", Opdex.Client.Client.ClientUtils.ParameterToString(proposalId)); // path parameter
            localVarRequestOptions.Data = quoteWithdrawVoteRequest;

            // authentication (opdexAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TransactionQuoteResponse>("/vaults/{vault}/proposals/{proposalId}/votes/withdraw", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildWithdrawVoteQuote", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Vault Certificates Retrieves details for certificates existing within tracked Opdex vaults. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="owner">Address of the certificate owner (optional)</param>
        /// <param name="status">Status of the certificates (optional)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <returns>CertificatesResponse</returns>
        public CertificatesResponse GetCertificates(string vault, string owner = default(string), List<CertificateStatus> status = default(List<CertificateStatus>), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string))
        {
            Opdex.Client.Client.ApiResponse<CertificatesResponse> localVarResponse = GetCertificatesWithHttpInfo(vault, owner, status, direction, limit, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Vault Certificates Retrieves details for certificates existing within tracked Opdex vaults. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="owner">Address of the certificate owner (optional)</param>
        /// <param name="status">Status of the certificates (optional)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <returns>ApiResponse of CertificatesResponse</returns>
        public Opdex.Client.Client.ApiResponse<CertificatesResponse> GetCertificatesWithHttpInfo(string vault, string owner = default(string), List<CertificateStatus> status = default(List<CertificateStatus>), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string))
        {
            // verify the required parameter 'vault' is set
            if (vault == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'vault' when calling VaultsApi->GetCertificates");

            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("vault", Opdex.Client.Client.ClientUtils.ParameterToString(vault)); // path parameter
            if (owner != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "owner", owner));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("multi", "status", status));
            }
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<CertificatesResponse>("/vaults/{vault}/certificates", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCertificates", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Vault Certificates Retrieves details for certificates existing within tracked Opdex vaults. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="owner">Address of the certificate owner (optional)</param>
        /// <param name="status">Status of the certificates (optional)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CertificatesResponse</returns>
        public async System.Threading.Tasks.Task<CertificatesResponse> GetCertificatesAsync(string vault, string owner = default(string), List<CertificateStatus> status = default(List<CertificateStatus>), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opdex.Client.Client.ApiResponse<CertificatesResponse> localVarResponse = await GetCertificatesWithHttpInfoAsync(vault, owner, status, direction, limit, cursor, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Vault Certificates Retrieves details for certificates existing within tracked Opdex vaults. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="owner">Address of the certificate owner (optional)</param>
        /// <param name="status">Status of the certificates (optional)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CertificatesResponse)</returns>
        public async System.Threading.Tasks.Task<Opdex.Client.Client.ApiResponse<CertificatesResponse>> GetCertificatesWithHttpInfoAsync(string vault, string owner = default(string), List<CertificateStatus> status = default(List<CertificateStatus>), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'vault' is set
            if (vault == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'vault' when calling VaultsApi->GetCertificates");


            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };


            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("vault", Opdex.Client.Client.ClientUtils.ParameterToString(vault)); // path parameter
            if (owner != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "owner", owner));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("multi", "status", status));
            }
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CertificatesResponse>("/vaults/{vault}/certificates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCertificates", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Vault Proposal Pledge Position Retrieves details for a pledgers position on a vault proposal.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal</param>
        /// <param name="pledger">Address of the pledger</param>
        /// <returns>PledgeResponse</returns>
        public PledgeResponse GetPledgePosition(string vault, int proposalId, string pledger)
        {
            Opdex.Client.Client.ApiResponse<PledgeResponse> localVarResponse = GetPledgePositionWithHttpInfo(vault, proposalId, pledger);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Vault Proposal Pledge Position Retrieves details for a pledgers position on a vault proposal.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal</param>
        /// <param name="pledger">Address of the pledger</param>
        /// <returns>ApiResponse of PledgeResponse</returns>
        public Opdex.Client.Client.ApiResponse<PledgeResponse> GetPledgePositionWithHttpInfo(string vault, int proposalId, string pledger)
        {
            // verify the required parameter 'vault' is set
            if (vault == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'vault' when calling VaultsApi->GetPledgePosition");

            // verify the required parameter 'pledger' is set
            if (pledger == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'pledger' when calling VaultsApi->GetPledgePosition");

            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("vault", Opdex.Client.Client.ClientUtils.ParameterToString(vault)); // path parameter
            localVarRequestOptions.PathParameters.Add("proposalId", Opdex.Client.Client.ClientUtils.ParameterToString(proposalId)); // path parameter
            localVarRequestOptions.PathParameters.Add("pledger", Opdex.Client.Client.ClientUtils.ParameterToString(pledger)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<PledgeResponse>("/vaults/{vault}/proposals/{proposalId}/pledges/{pledger}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPledgePosition", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Vault Proposal Pledge Position Retrieves details for a pledgers position on a vault proposal.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal</param>
        /// <param name="pledger">Address of the pledger</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PledgeResponse</returns>
        public async System.Threading.Tasks.Task<PledgeResponse> GetPledgePositionAsync(string vault, int proposalId, string pledger, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opdex.Client.Client.ApiResponse<PledgeResponse> localVarResponse = await GetPledgePositionWithHttpInfoAsync(vault, proposalId, pledger, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Vault Proposal Pledge Position Retrieves details for a pledgers position on a vault proposal.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal</param>
        /// <param name="pledger">Address of the pledger</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PledgeResponse)</returns>
        public async System.Threading.Tasks.Task<Opdex.Client.Client.ApiResponse<PledgeResponse>> GetPledgePositionWithHttpInfoAsync(string vault, int proposalId, string pledger, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'vault' is set
            if (vault == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'vault' when calling VaultsApi->GetPledgePosition");

            // verify the required parameter 'pledger' is set
            if (pledger == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'pledger' when calling VaultsApi->GetPledgePosition");


            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };


            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("vault", Opdex.Client.Client.ClientUtils.ParameterToString(vault)); // path parameter
            localVarRequestOptions.PathParameters.Add("proposalId", Opdex.Client.Client.ClientUtils.ParameterToString(proposalId)); // path parameter
            localVarRequestOptions.PathParameters.Add("pledger", Opdex.Client.Client.ClientUtils.ParameterToString(pledger)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PledgeResponse>("/vaults/{vault}/proposals/{proposalId}/pledges/{pledger}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPledgePosition", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Vault Proposal Pledges Retrieves details for pledges that have been made to proposals within tracked Opdex vaults. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal in the vault (optional)</param>
        /// <param name="pledger">Address of the pledger (optional)</param>
        /// <param name="includeZeroBalances">Includes zero balances if true, otherwise filters out zero balances if false (optional, default to false)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <returns>PledgesResponse</returns>
        public PledgesResponse GetPledges(string vault, int? proposalId = default(int?), string pledger = default(string), bool? includeZeroBalances = default(bool?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string))
        {
            Opdex.Client.Client.ApiResponse<PledgesResponse> localVarResponse = GetPledgesWithHttpInfo(vault, proposalId, pledger, includeZeroBalances, direction, limit, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Vault Proposal Pledges Retrieves details for pledges that have been made to proposals within tracked Opdex vaults. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal in the vault (optional)</param>
        /// <param name="pledger">Address of the pledger (optional)</param>
        /// <param name="includeZeroBalances">Includes zero balances if true, otherwise filters out zero balances if false (optional, default to false)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <returns>ApiResponse of PledgesResponse</returns>
        public Opdex.Client.Client.ApiResponse<PledgesResponse> GetPledgesWithHttpInfo(string vault, int? proposalId = default(int?), string pledger = default(string), bool? includeZeroBalances = default(bool?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string))
        {
            // verify the required parameter 'vault' is set
            if (vault == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'vault' when calling VaultsApi->GetPledges");

            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("vault", Opdex.Client.Client.ClientUtils.ParameterToString(vault)); // path parameter
            if (proposalId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "proposalId", proposalId));
            }
            if (pledger != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "pledger", pledger));
            }
            if (includeZeroBalances != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "includeZeroBalances", includeZeroBalances));
            }
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<PledgesResponse>("/vaults/{vault}/pledges", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPledges", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Vault Proposal Pledges Retrieves details for pledges that have been made to proposals within tracked Opdex vaults. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal in the vault (optional)</param>
        /// <param name="pledger">Address of the pledger (optional)</param>
        /// <param name="includeZeroBalances">Includes zero balances if true, otherwise filters out zero balances if false (optional, default to false)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PledgesResponse</returns>
        public async System.Threading.Tasks.Task<PledgesResponse> GetPledgesAsync(string vault, int? proposalId = default(int?), string pledger = default(string), bool? includeZeroBalances = default(bool?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opdex.Client.Client.ApiResponse<PledgesResponse> localVarResponse = await GetPledgesWithHttpInfoAsync(vault, proposalId, pledger, includeZeroBalances, direction, limit, cursor, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Vault Proposal Pledges Retrieves details for pledges that have been made to proposals within tracked Opdex vaults. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal in the vault (optional)</param>
        /// <param name="pledger">Address of the pledger (optional)</param>
        /// <param name="includeZeroBalances">Includes zero balances if true, otherwise filters out zero balances if false (optional, default to false)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PledgesResponse)</returns>
        public async System.Threading.Tasks.Task<Opdex.Client.Client.ApiResponse<PledgesResponse>> GetPledgesWithHttpInfoAsync(string vault, int? proposalId = default(int?), string pledger = default(string), bool? includeZeroBalances = default(bool?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'vault' is set
            if (vault == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'vault' when calling VaultsApi->GetPledges");


            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };


            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("vault", Opdex.Client.Client.ClientUtils.ParameterToString(vault)); // path parameter
            if (proposalId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "proposalId", proposalId));
            }
            if (pledger != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "pledger", pledger));
            }
            if (includeZeroBalances != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "includeZeroBalances", includeZeroBalances));
            }
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PledgesResponse>("/vaults/{vault}/pledges", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPledges", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Vault Proposals Retrieves details for proposals existing within tracked Opdex vaults. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="status">Status of the proposal (optional)</param>
        /// <param name="type">Type of proposal (optional)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <returns>ProposalsResponse</returns>
        public ProposalsResponse GetProposals(string vault, List<ProposalStatus> status = default(List<ProposalStatus>), List<ProposalType> type = default(List<ProposalType>), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string))
        {
            Opdex.Client.Client.ApiResponse<ProposalsResponse> localVarResponse = GetProposalsWithHttpInfo(vault, status, type, direction, limit, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Vault Proposals Retrieves details for proposals existing within tracked Opdex vaults. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="status">Status of the proposal (optional)</param>
        /// <param name="type">Type of proposal (optional)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <returns>ApiResponse of ProposalsResponse</returns>
        public Opdex.Client.Client.ApiResponse<ProposalsResponse> GetProposalsWithHttpInfo(string vault, List<ProposalStatus> status = default(List<ProposalStatus>), List<ProposalType> type = default(List<ProposalType>), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string))
        {
            // verify the required parameter 'vault' is set
            if (vault == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'vault' when calling VaultsApi->GetProposals");

            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("vault", Opdex.Client.Client.ClientUtils.ParameterToString(vault)); // path parameter
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("multi", "status", status));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("multi", "type", type));
            }
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<ProposalsResponse>("/vaults/{vault}/proposals", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProposals", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Vault Proposals Retrieves details for proposals existing within tracked Opdex vaults. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="status">Status of the proposal (optional)</param>
        /// <param name="type">Type of proposal (optional)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProposalsResponse</returns>
        public async System.Threading.Tasks.Task<ProposalsResponse> GetProposalsAsync(string vault, List<ProposalStatus> status = default(List<ProposalStatus>), List<ProposalType> type = default(List<ProposalType>), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opdex.Client.Client.ApiResponse<ProposalsResponse> localVarResponse = await GetProposalsWithHttpInfoAsync(vault, status, type, direction, limit, cursor, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Vault Proposals Retrieves details for proposals existing within tracked Opdex vaults. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="status">Status of the proposal (optional)</param>
        /// <param name="type">Type of proposal (optional)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProposalsResponse)</returns>
        public async System.Threading.Tasks.Task<Opdex.Client.Client.ApiResponse<ProposalsResponse>> GetProposalsWithHttpInfoAsync(string vault, List<ProposalStatus> status = default(List<ProposalStatus>), List<ProposalType> type = default(List<ProposalType>), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'vault' is set
            if (vault == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'vault' when calling VaultsApi->GetProposals");


            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };


            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("vault", Opdex.Client.Client.ClientUtils.ParameterToString(vault)); // path parameter
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("multi", "status", status));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("multi", "type", type));
            }
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ProposalsResponse>("/vaults/{vault}/proposals", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProposals", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Vault Retrieves details of a vault tracked by the Opdex indexer.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <returns>VaultResponse</returns>
        public VaultResponse GetVault(string vault)
        {
            Opdex.Client.Client.ApiResponse<VaultResponse> localVarResponse = GetVaultWithHttpInfo(vault);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Vault Retrieves details of a vault tracked by the Opdex indexer.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <returns>ApiResponse of VaultResponse</returns>
        public Opdex.Client.Client.ApiResponse<VaultResponse> GetVaultWithHttpInfo(string vault)
        {
            // verify the required parameter 'vault' is set
            if (vault == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'vault' when calling VaultsApi->GetVault");

            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("vault", Opdex.Client.Client.ClientUtils.ParameterToString(vault)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<VaultResponse>("/vaults/{vault}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVault", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Vault Retrieves details of a vault tracked by the Opdex indexer.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VaultResponse</returns>
        public async System.Threading.Tasks.Task<VaultResponse> GetVaultAsync(string vault, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opdex.Client.Client.ApiResponse<VaultResponse> localVarResponse = await GetVaultWithHttpInfoAsync(vault, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Vault Retrieves details of a vault tracked by the Opdex indexer.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VaultResponse)</returns>
        public async System.Threading.Tasks.Task<Opdex.Client.Client.ApiResponse<VaultResponse>> GetVaultWithHttpInfoAsync(string vault, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'vault' is set
            if (vault == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'vault' when calling VaultsApi->GetVault");


            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };


            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("vault", Opdex.Client.Client.ClientUtils.ParameterToString(vault)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<VaultResponse>("/vaults/{vault}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVault", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Vault Proposal Retrieves a proposal that exists in a tracked Opdex vault.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal</param>
        /// <returns>ProposalResponse</returns>
        public ProposalResponse GetVaultProposal(string vault, int proposalId)
        {
            Opdex.Client.Client.ApiResponse<ProposalResponse> localVarResponse = GetVaultProposalWithHttpInfo(vault, proposalId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Vault Proposal Retrieves a proposal that exists in a tracked Opdex vault.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal</param>
        /// <returns>ApiResponse of ProposalResponse</returns>
        public Opdex.Client.Client.ApiResponse<ProposalResponse> GetVaultProposalWithHttpInfo(string vault, int proposalId)
        {
            // verify the required parameter 'vault' is set
            if (vault == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'vault' when calling VaultsApi->GetVaultProposal");

            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("vault", Opdex.Client.Client.ClientUtils.ParameterToString(vault)); // path parameter
            localVarRequestOptions.PathParameters.Add("proposalId", Opdex.Client.Client.ClientUtils.ParameterToString(proposalId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<ProposalResponse>("/vaults/{vault}/proposals/{proposalId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVaultProposal", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Vault Proposal Retrieves a proposal that exists in a tracked Opdex vault.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProposalResponse</returns>
        public async System.Threading.Tasks.Task<ProposalResponse> GetVaultProposalAsync(string vault, int proposalId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opdex.Client.Client.ApiResponse<ProposalResponse> localVarResponse = await GetVaultProposalWithHttpInfoAsync(vault, proposalId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Vault Proposal Retrieves a proposal that exists in a tracked Opdex vault.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProposalResponse)</returns>
        public async System.Threading.Tasks.Task<Opdex.Client.Client.ApiResponse<ProposalResponse>> GetVaultProposalWithHttpInfoAsync(string vault, int proposalId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'vault' is set
            if (vault == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'vault' when calling VaultsApi->GetVaultProposal");


            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };


            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("vault", Opdex.Client.Client.ClientUtils.ParameterToString(vault)); // path parameter
            localVarRequestOptions.PathParameters.Add("proposalId", Opdex.Client.Client.ClientUtils.ParameterToString(proposalId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ProposalResponse>("/vaults/{vault}/proposals/{proposalId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVaultProposal", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Vaults Retrieves details for tracked Opdex vaults. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lockedToken">Address of the token locked in the vault (optional)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <returns>VaultsResponse</returns>
        public VaultsResponse GetVaults(string lockedToken = default(string), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string))
        {
            Opdex.Client.Client.ApiResponse<VaultsResponse> localVarResponse = GetVaultsWithHttpInfo(lockedToken, direction, limit, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Vaults Retrieves details for tracked Opdex vaults. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lockedToken">Address of the token locked in the vault (optional)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <returns>ApiResponse of VaultsResponse</returns>
        public Opdex.Client.Client.ApiResponse<VaultsResponse> GetVaultsWithHttpInfo(string lockedToken = default(string), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string))
        {
            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (lockedToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "lockedToken", lockedToken));
            }
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<VaultsResponse>("/vaults", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVaults", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Vaults Retrieves details for tracked Opdex vaults. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lockedToken">Address of the token locked in the vault (optional)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VaultsResponse</returns>
        public async System.Threading.Tasks.Task<VaultsResponse> GetVaultsAsync(string lockedToken = default(string), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opdex.Client.Client.ApiResponse<VaultsResponse> localVarResponse = await GetVaultsWithHttpInfoAsync(lockedToken, direction, limit, cursor, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Vaults Retrieves details for tracked Opdex vaults. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lockedToken">Address of the token locked in the vault (optional)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VaultsResponse)</returns>
        public async System.Threading.Tasks.Task<Opdex.Client.Client.ApiResponse<VaultsResponse>> GetVaultsWithHttpInfoAsync(string lockedToken = default(string), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };


            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (lockedToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "lockedToken", lockedToken));
            }
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<VaultsResponse>("/vaults", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVaults", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Vault Proposal Vote Position Retrieves details for a voters position on a vault proposal.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal</param>
        /// <param name="voter">Address of the voter</param>
        /// <returns>VoteResponse</returns>
        public VoteResponse GetVotePosition(string vault, int proposalId, string voter)
        {
            Opdex.Client.Client.ApiResponse<VoteResponse> localVarResponse = GetVotePositionWithHttpInfo(vault, proposalId, voter);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Vault Proposal Vote Position Retrieves details for a voters position on a vault proposal.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal</param>
        /// <param name="voter">Address of the voter</param>
        /// <returns>ApiResponse of VoteResponse</returns>
        public Opdex.Client.Client.ApiResponse<VoteResponse> GetVotePositionWithHttpInfo(string vault, int proposalId, string voter)
        {
            // verify the required parameter 'vault' is set
            if (vault == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'vault' when calling VaultsApi->GetVotePosition");

            // verify the required parameter 'voter' is set
            if (voter == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'voter' when calling VaultsApi->GetVotePosition");

            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("vault", Opdex.Client.Client.ClientUtils.ParameterToString(vault)); // path parameter
            localVarRequestOptions.PathParameters.Add("proposalId", Opdex.Client.Client.ClientUtils.ParameterToString(proposalId)); // path parameter
            localVarRequestOptions.PathParameters.Add("voter", Opdex.Client.Client.ClientUtils.ParameterToString(voter)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<VoteResponse>("/vaults/{vault}/proposals/{proposalId}/votes/{voter}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVotePosition", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Vault Proposal Vote Position Retrieves details for a voters position on a vault proposal.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal</param>
        /// <param name="voter">Address of the voter</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VoteResponse</returns>
        public async System.Threading.Tasks.Task<VoteResponse> GetVotePositionAsync(string vault, int proposalId, string voter, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opdex.Client.Client.ApiResponse<VoteResponse> localVarResponse = await GetVotePositionWithHttpInfoAsync(vault, proposalId, voter, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Vault Proposal Vote Position Retrieves details for a voters position on a vault proposal.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal</param>
        /// <param name="voter">Address of the voter</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VoteResponse)</returns>
        public async System.Threading.Tasks.Task<Opdex.Client.Client.ApiResponse<VoteResponse>> GetVotePositionWithHttpInfoAsync(string vault, int proposalId, string voter, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'vault' is set
            if (vault == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'vault' when calling VaultsApi->GetVotePosition");

            // verify the required parameter 'voter' is set
            if (voter == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'voter' when calling VaultsApi->GetVotePosition");


            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };


            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("vault", Opdex.Client.Client.ClientUtils.ParameterToString(vault)); // path parameter
            localVarRequestOptions.PathParameters.Add("proposalId", Opdex.Client.Client.ClientUtils.ParameterToString(proposalId)); // path parameter
            localVarRequestOptions.PathParameters.Add("voter", Opdex.Client.Client.ClientUtils.ParameterToString(voter)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<VoteResponse>("/vaults/{vault}/proposals/{proposalId}/votes/{voter}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVotePosition", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Vault Proposal Votes Retrieves details for votes that have been made against proposals within tracked Opdex vaults. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal in the vault (optional)</param>
        /// <param name="voter">Address of the voter (optional)</param>
        /// <param name="includeZeroBalances">Includes zero balances if true, otherwise filters out zero balances if false (optional, default to false)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <returns>VotesResponse</returns>
        public VotesResponse GetVotes(string vault, int? proposalId = default(int?), string voter = default(string), bool? includeZeroBalances = default(bool?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string))
        {
            Opdex.Client.Client.ApiResponse<VotesResponse> localVarResponse = GetVotesWithHttpInfo(vault, proposalId, voter, includeZeroBalances, direction, limit, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Vault Proposal Votes Retrieves details for votes that have been made against proposals within tracked Opdex vaults. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal in the vault (optional)</param>
        /// <param name="voter">Address of the voter (optional)</param>
        /// <param name="includeZeroBalances">Includes zero balances if true, otherwise filters out zero balances if false (optional, default to false)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <returns>ApiResponse of VotesResponse</returns>
        public Opdex.Client.Client.ApiResponse<VotesResponse> GetVotesWithHttpInfo(string vault, int? proposalId = default(int?), string voter = default(string), bool? includeZeroBalances = default(bool?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string))
        {
            // verify the required parameter 'vault' is set
            if (vault == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'vault' when calling VaultsApi->GetVotes");

            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("vault", Opdex.Client.Client.ClientUtils.ParameterToString(vault)); // path parameter
            if (proposalId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "proposalId", proposalId));
            }
            if (voter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "voter", voter));
            }
            if (includeZeroBalances != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "includeZeroBalances", includeZeroBalances));
            }
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<VotesResponse>("/vaults/{vault}/votes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVotes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Vault Proposal Votes Retrieves details for votes that have been made against proposals within tracked Opdex vaults. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal in the vault (optional)</param>
        /// <param name="voter">Address of the voter (optional)</param>
        /// <param name="includeZeroBalances">Includes zero balances if true, otherwise filters out zero balances if false (optional, default to false)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VotesResponse</returns>
        public async System.Threading.Tasks.Task<VotesResponse> GetVotesAsync(string vault, int? proposalId = default(int?), string voter = default(string), bool? includeZeroBalances = default(bool?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Opdex.Client.Client.ApiResponse<VotesResponse> localVarResponse = await GetVotesWithHttpInfoAsync(vault, proposalId, voter, includeZeroBalances, direction, limit, cursor, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Vault Proposal Votes Retrieves details for votes that have been made against proposals within tracked Opdex vaults. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
        /// </summary>
        /// <exception cref="Opdex.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vault">Address of the vault</param>
        /// <param name="proposalId">Id of the proposal in the vault (optional)</param>
        /// <param name="voter">Address of the voter (optional)</param>
        /// <param name="includeZeroBalances">Includes zero balances if true, otherwise filters out zero balances if false (optional, default to false)</param>
        /// <param name="direction">Order direction of the results (optional)</param>
        /// <param name="limit">Number of results per page (optional, default to 10)</param>
        /// <param name="cursor">Reference of the requested page, returned by a previous call (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VotesResponse)</returns>
        public async System.Threading.Tasks.Task<Opdex.Client.Client.ApiResponse<VotesResponse>> GetVotesWithHttpInfoAsync(string vault, int? proposalId = default(int?), string voter = default(string), bool? includeZeroBalances = default(bool?), SortDirection? direction = default(SortDirection?), int? limit = default(int?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'vault' is set
            if (vault == null)
                throw new Opdex.Client.Client.ApiException(400, "Missing required parameter 'vault' when calling VaultsApi->GetVotes");


            Opdex.Client.Client.RequestOptions localVarRequestOptions = new Opdex.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };


            var localVarContentType = Opdex.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Opdex.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("vault", Opdex.Client.Client.ClientUtils.ParameterToString(vault)); // path parameter
            if (proposalId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "proposalId", proposalId));
            }
            if (voter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "voter", voter));
            }
            if (includeZeroBalances != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "includeZeroBalances", includeZeroBalances));
            }
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Opdex.Client.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<VotesResponse>("/vaults/{vault}/votes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVotes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
